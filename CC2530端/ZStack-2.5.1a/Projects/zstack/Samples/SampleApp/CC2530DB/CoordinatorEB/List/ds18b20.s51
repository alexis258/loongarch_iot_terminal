///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        06/May/2018  15:31:36 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  M:\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6\Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5×é /
//                          ÍøÊµÑé\6.ÎÂ¶È´«¸ÐÆ÷DS18B20\ZStack-2.5.1a\Projects /
//                          \zstack\Samples\SampleApp\Source\ds18b20.c        /
//    Command line       =  -f M:\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6\Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\ /
//                          5×éÍøÊµÑé\6.ÎÂ¶È´«¸ÐÆ÷DS18B20\ZStack-2.5.1a\Proje /
//                          cts\zstack\Samples\SampleApp\CC2530DB\..\..\..\To /
//                          ols\CC2530DB\f8wCoord.cfg (-DCPU32MHZ             /
//                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TR /
//                          UE -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8     /
//                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)   /
//                          -f M:\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6\Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\ /
//                          5×éÍøÊµÑé\6.ÎÂ¶È´«¸ÐÆ÷DS18B20\ZStack-2.5.1a\Proje /
//                          cts\zstack\Samples\SampleApp\CC2530DB\..\..\..\To /
//                          ols\CC2530DB\f8wConfig.cfg (-DZIGBEEPRO           /
//                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR      /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 M:\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6\Ñ§Ï°À /
//                          ý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5×éÍøÊµÑé\6.ÎÂ¶È´«¸ÐÆ÷DS18B20 /
//                          \ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\ /
//                          Source\ds18b20.c -D ZTOOL_P1 -D xMT_TASK -D       /
//                          xMT_SYS_FUNC -D xMT_ZDO_FUNC -D                   /
//                          LCD_SUPPORTED=DEBUG -lC                           /
//                          M:\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6\Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5×é /
//                          ÍøÊµÑé\6.ÎÂ¶È´«¸ÐÆ÷DS18B20\ZStack-2.5.1a\Projects /
//                          \zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\ /
//                          List\ -lA M:\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6\Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»· /
//                          ¾³°²×°\5×éÍøÊµÑé\6.ÎÂ¶È´«¸ÐÆ÷DS18B20\ZStack-2.5.1 /
//                          a\Projects\zstack\Samples\SampleApp\CC2530DB\Coor /
//                          dinatorEB\List\ --diag_suppress Pe001,Pa010 -o    /
//                          M:\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6\Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5×é /
//                          ÍøÊµÑé\6.ÎÂ¶È´«¸ÐÆ÷DS18B20\ZStack-2.5.1a\Projects /
//                          \zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\ /
//                          Obj\ -e --no_code_motion --debug --core=plain     /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          M:\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6\Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5×é /
//                          ÍøÊµÑé\6.ÎÂ¶È´«¸ÐÆ÷DS18B20\ZStack-2.5.1a\Projects /
//                          \zstack\Samples\SampleApp\CC2530DB\ -I            /
//                          M:\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6\Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5×é /
//                          ÍøÊµÑé\6.ÎÂ¶È´«¸ÐÆ÷DS18B20\ZStack-2.5.1a\Projects /
//                          \zstack\Samples\SampleApp\CC2530DB\..\Source\ -I  /
//                          M:\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6\Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5×é /
//                          ÍøÊµÑé\6.ÎÂ¶È´«¸ÐÆ÷DS18B20\ZStack-2.5.1a\Projects /
//                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\ZMain /
//                          \TI2530DB\ -I M:\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6\Ñ§Ï°Àý³ÌÒÔ¼°¿ª /
//                          ·¢»·¾³°²×°\5×éÍøÊµÑé\6.ÎÂ¶È´«¸ÐÆ÷DS18B20\ZStack-2 /
//                          .5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ /
//                          ..\..\..\..\..\Components\hal\include\ -I         /
//                          M:\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6\Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5×é /
//                          ÍøÊµÑé\6.ÎÂ¶È´«¸ÐÆ÷DS18B20\ZStack-2.5.1a\Projects /
//                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\.. /
//                          \Components\hal\target\CC2530EB\ -I               /
//                          M:\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6\Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5×é /
//                          ÍøÊµÑé\6.ÎÂ¶È´«¸ÐÆ÷DS18B20\ZStack-2.5.1a\Projects /
//                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\.. /
//                          \Components\mac\include\ -I                       /
//                          M:\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6\Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5×é /
//                          ÍøÊµÑé\6.ÎÂ¶È´«¸ÐÆ÷DS18B20\ZStack-2.5.1a\Projects /
//                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\.. /
//                          \Components\mac\high_level\ -I                    /
//                          M:\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6\Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5×é /
//                          ÍøÊµÑé\6.ÎÂ¶È´«¸ÐÆ÷DS18B20\ZStack-2.5.1a\Projects /
//                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\.. /
//                          \Components\mac\low_level\srf04\ -I               /
//                          M:\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6\Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5×é /
//                          ÍøÊµÑé\6.ÎÂ¶È´«¸ÐÆ÷DS18B20\ZStack-2.5.1a\Projects /
//                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\.. /
//                          \Components\mac\low_level\srf04\single_chip\ -I   /
//                          M:\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6\Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5×é /
//                          ÍøÊµÑé\6.ÎÂ¶È´«¸ÐÆ÷DS18B20\ZStack-2.5.1a\Projects /
//                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\.. /
//                          \Components\mt\ -I M:\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6\Ñ§Ï°Àý³ÌÒ /
//                          Ô¼°¿ª·¢»·¾³°²×°\5×éÍøÊµÑé\6.ÎÂ¶È´«¸ÐÆ÷DS18B20\ZSt /
//                          ack-2.5.1a\Projects\zstack\Samples\SampleApp\CC25 /
//                          30DB\..\..\..\..\..\Components\osal\include\ -I   /
//                          M:\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6\Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5×é /
//                          ÍøÊµÑé\6.ÎÂ¶È´«¸ÐÆ÷DS18B20\ZStack-2.5.1a\Projects /
//                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\.. /
//                          \Components\services\saddr\ -I                    /
//                          M:\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6\Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5×é /
//                          ÍøÊµÑé\6.ÎÂ¶È´«¸ÐÆ÷DS18B20\ZStack-2.5.1a\Projects /
//                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\.. /
//                          \Components\services\sdata\ -I                    /
//                          M:\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6\Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5×é /
//                          ÍøÊµÑé\6.ÎÂ¶È´«¸ÐÆ÷DS18B20\ZStack-2.5.1a\Projects /
//                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\.. /
//                          \Components\stack\af\ -I                          /
//                          M:\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6\Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5×é /
//                          ÍøÊµÑé\6.ÎÂ¶È´«¸ÐÆ÷DS18B20\ZStack-2.5.1a\Projects /
//                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\.. /
//                          \Components\stack\nwk\ -I                         /
//                          M:\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6\Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5×é /
//                          ÍøÊµÑé\6.ÎÂ¶È´«¸ÐÆ÷DS18B20\ZStack-2.5.1a\Projects /
//                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\.. /
//                          \Components\stack\sapi\ -I                        /
//                          M:\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6\Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5×é /
//                          ÍøÊµÑé\6.ÎÂ¶È´«¸ÐÆ÷DS18B20\ZStack-2.5.1a\Projects /
//                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\.. /
//                          \Components\stack\sec\ -I                         /
//                          M:\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6\Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5×é /
//                          ÍøÊµÑé\6.ÎÂ¶È´«¸ÐÆ÷DS18B20\ZStack-2.5.1a\Projects /
//                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\.. /
//                          \Components\stack\sys\ -I                         /
//                          M:\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6\Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5×é /
//                          ÍøÊµÑé\6.ÎÂ¶È´«¸ÐÆ÷DS18B20\ZStack-2.5.1a\Projects /
//                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\.. /
//                          \Components\stack\zdo\ -I                         /
//                          M:\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6\Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5×é /
//                          ÍøÊµÑé\6.ÎÂ¶È´«¸ÐÆ÷DS18B20\ZStack-2.5.1a\Projects /
//                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\.. /
//                          \Components\zmac\ -I M:\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6\Ñ§Ï°Àý³ /
//                          ÌÒÔ¼°¿ª·¢»·¾³°²×°\5×éÍøÊµÑé\6.ÎÂ¶È´«¸ÐÆ÷DS18B20\Z /
//                          Stack-2.5.1a\Projects\zstack\Samples\SampleApp\CC /
//                          2530DB\..\..\..\..\..\Components\zmac\f8w\ -Ohz   /
//    List file          =  M:\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6\Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5×é /
//                          ÍøÊµÑé\6.ÎÂ¶È´«¸ÐÆ÷DS18B20\ZStack-2.5.1a\Projects /
//                          \zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\ /
//                          List\ds18b20.s51                                  /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME ds18b20

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?FLT_MUL
        EXTERN ?L_MOV_X
        EXTERN ?UL_TO_FLT
        EXTERN ?V0

        PUBLIC ??Delay_us?relay
        FUNCTION ??Delay_us?relay,0203H
        PUBLIC ??Ds18b20Delay?relay
        FUNCTION ??Ds18b20Delay?relay,0203H
        PUBLIC ??Ds18b20Initial?relay
        FUNCTION ??Ds18b20Initial?relay,0203H
        PUBLIC ??Ds18b20InputInitial?relay
        FUNCTION ??Ds18b20InputInitial?relay,0203H
        PUBLIC ??Ds18b20OutputInitial?relay
        FUNCTION ??Ds18b20OutputInitial?relay,0203H
        PUBLIC ??Ds18b20Read?relay
        FUNCTION ??Ds18b20Read?relay,0203H
        PUBLIC ??Ds18b20Write?relay
        FUNCTION ??Ds18b20Write?relay,0203H
        PUBLIC ??ReadDs18B20?relay
        FUNCTION ??ReadDs18B20?relay,0203H
        PUBLIC ??floatReadDs18B20?relay
        FUNCTION ??floatReadDs18B20?relay,0203H
        PUBLIC Delay_us
        FUNCTION Delay_us,0203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC Ds18b20Delay
        FUNCTION Ds18b20Delay,080203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC Ds18b20Initial
        FUNCTION Ds18b20Initial,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC Ds18b20InputInitial
        FUNCTION Ds18b20InputInitial,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC Ds18b20OutputInitial
        FUNCTION Ds18b20OutputInitial,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC Ds18b20Read
        FUNCTION Ds18b20Read,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC Ds18b20Write
        FUNCTION Ds18b20Write,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBWEAK P0DIR
        PUBLIC ReadDs18B20
        FUNCTION ReadDs18B20,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBWEAK T1CC0H
        PUBWEAK T1CC0L
        PUBWEAK T1CNTH
        PUBWEAK T1CNTL
        PUBWEAK T1CTL
        PUBWEAK _A_P0
        PUBWEAK __Constant_3d800000
        PUBLIC floatReadDs18B20
        FUNCTION floatReadDs18B20,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
Delay_us            SYMBOL "Delay_us"
??Delay_us?relay    SYMBOL "?relay", Delay_us
Ds18b20Delay        SYMBOL "Ds18b20Delay"
??Ds18b20Delay?relay SYMBOL "?relay", Ds18b20Delay
Ds18b20Initial      SYMBOL "Ds18b20Initial"
??Ds18b20Initial?relay SYMBOL "?relay", Ds18b20Initial
Ds18b20InputInitial SYMBOL "Ds18b20InputInitial"
??Ds18b20InputInitial?relay SYMBOL "?relay", Ds18b20InputInitial
Ds18b20OutputInitial SYMBOL "Ds18b20OutputInitial"
??Ds18b20OutputInitial?relay SYMBOL "?relay", Ds18b20OutputInitial
Ds18b20Read         SYMBOL "Ds18b20Read"
??Ds18b20Read?relay SYMBOL "?relay", Ds18b20Read
Ds18b20Write        SYMBOL "Ds18b20Write"
??Ds18b20Write?relay SYMBOL "?relay", Ds18b20Write
ReadDs18B20         SYMBOL "ReadDs18B20"
??ReadDs18B20?relay SYMBOL "?relay", ReadDs18B20
floatReadDs18B20    SYMBOL "floatReadDs18B20"
??floatReadDs18B20?relay SYMBOL "?relay", floatReadDs18B20

// M:\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6\Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5×éÍøÊµÑé\6.ÎÂ¶È´«¸ÐÆ÷DS18B20\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\Source\ds18b20.c
//    1 #include"iocc2530.h"

        ASEGN SFR_AN:DATA:NOROOT,080H
// union <unnamed> volatile __sfr _A_P0
_A_P0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0daH
// unsigned char volatile __sfr T1CC0L
T1CC0L:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0dbH
// unsigned char volatile __sfr T1CC0H
T1CC0H:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e2H
// unsigned char volatile __sfr T1CNTL
T1CNTL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e3H
// unsigned char volatile __sfr T1CNTH
T1CNTH:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e4H
// unsigned char volatile __sfr T1CTL
T1CTL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0fdH
// unsigned char volatile __sfr P0DIR
P0DIR:
        DATA8
        DS 1
//    2 #include"OnBoard.h"
//    3 #include "ds18b20.h" 
//    4 
//    5 #define Ds18b20IO P0_7       //ÎÂ¶È´«¸ÐÆ÷Òý½Å
//    6 
//    7 
//    8 void Ds18b20Delay(unsigned int k);
//    9 void Ds18b20InputInitial(void);
//   10 void Ds18b20OutputInitial(void);
//   11 unsigned char Ds18b20Initial(void);
//   12 void Ds18b20Write(unsigned char infor);
//   13 unsigned char Ds18b20Read(void);
//   14 
//   15 //Ê±ÖÓÆµÂÊÎª32M

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   16 void Ds18b20Delay(unsigned int k)
Ds18b20Delay:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function Ds18b20Delay
        CODE
//   17 { 
        ; Saved register size: 0
        ; Auto size: 0
        SJMP    ??Ds18b20Delay_0
//   18   while (k--)
//   19   {
//   20     asm("NOP");
??Ds18b20Delay_1:
        NOP
//   21     asm("NOP");
        NOP
//   22     asm("NOP");
        NOP
//   23     asm("NOP");
        NOP
//   24     asm("NOP");
        NOP
//   25     asm("NOP");
        NOP
//   26     asm("NOP");
        NOP
//   27     asm("NOP");   
        NOP
//   28     asm("NOP");   
        NOP
//   29   }
??Ds18b20Delay_0:
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     A,R0
        ADD     A,#-0x1
        DEC     R2
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     R3,A
        MOV     A,R0
        ORL     A,R1
        JNZ     ??Ds18b20Delay_1
//   30 
//   31 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock0
//   32 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   33 void Delay_us(unsigned int k)//usÑÓÊ±º¯Êý
Delay_us:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function Delay_us
        CODE
//   34 {
        ; Saved register size: 0
        ; Auto size: 0
//   35     T1CNTL=0;
        MOV     0xe2,#0x0
//   36     T1CNTH=0;
        MOV     0xe3,#0x0
//   37     T1CC0L = 32; 
        MOV     0xda,#0x20
//   38     T1CC0H = 0x00; 
        MOV     0xdb,#0x0
//   39     T1CTL = 0x02; //Ä££¬´Ó0x0000µ½T1CC0·´¸´¼ÆÊý¡£
        MOV     0xe4,#0x2
        SJMP    ??Delay_us_0
//   40     while(k)
//   41     { 
//   42         while(!(T1CNTL >= 25));//¶¨Ê±Æ÷µÄµÍ×Ö½Ú¼ÆÊý
??Delay_us_1:
        MOV     A,0xe2
        CLR     C
        SUBB    A,#0x19
        JC      ??Delay_us_1
//   43         k--;
        MOV     A,R2
        ADD     A,#-0x1
        DEC     R2
        MOV     A,R3
        ADDC    A,#-0x1
        MOV     R3,A
//   44     }
??Delay_us_0:
        MOV     A,R2
        ORL     A,R3
        JNZ     ??Delay_us_1
//   45     T1CTL = 0x00;  //¹Ø±Õ¶¨Ê±Æ÷
        MOV     0xe4,#0x0
//   46 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock1
        REQUIRE T1CNTL
        REQUIRE T1CNTH
        REQUIRE T1CC0L
        REQUIRE T1CC0H
        REQUIRE T1CTL
//   47 
//   48 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   49 void Ds18b20InputInitial(void)//ÉèÖÃ¶Ë¿ÚÎªÊäÈë
Ds18b20InputInitial:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function Ds18b20InputInitial
        CODE
//   50 {
        ; Saved register size: 0
        ; Auto size: 0
//   51     P0DIR &= 0x7f;
        ANL     0xfd,#0x7f
//   52 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock2
        REQUIRE P0DIR
//   53 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   54 void Ds18b20OutputInitial(void)//ÉèÖÃ¶Ë¿ÚÎªÊä³ö
Ds18b20OutputInitial:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function Ds18b20OutputInitial
        CODE
//   55 {
        ; Saved register size: 0
        ; Auto size: 0
//   56     P0DIR |= 0x80;
        ORL     0xfd,#0x80
//   57 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock3
        REQUIRE P0DIR
//   58 
//   59 //ds18b20³õÊ¼»¯  ³õÊ¼»¯³É¹¦·µ»Ø0x00£¬Ê§°Ü·µ»Ø0x01

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   60 unsigned char Ds18b20Initial(void)
Ds18b20Initial:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function Ds18b20Initial
        CODE
//   61 {
        FUNCALL Ds18b20Initial, Delay_us
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Ds18b20Initial, Delay_us
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Ds18b20Initial, Delay_us
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Ds18b20Initial, Delay_us
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//   62     unsigned char Status = 0x00;
        MOV     ?V0 + 0,#0x0
//   63     unsigned int CONT_1 = 0;
        MOV     R6,#0x0
        MOV     R7,#0x0
//   64     unsigned char Flag_1 = 1;
        MOV     ?V0 + 1,#0x1
//   65     Ds18b20OutputInitial();
        LCALL   ?Subroutine2 & 0xFFFF
//   66     Ds18b20IO = 1;      //DQ¸´Î»
//   67     Delay_us(10);  //ÉÔ×öÑÓÊ±
//   68     Ds18b20IO = 0;      //µ¥Æ¬»ú½«DQÀ­µÍ
??CrossCallReturnLabel_2:
        CLR     0x80.7
//   69     Delay_us(650);  //¾«È·ÑÓÊ± ´óÓÚ 480us Ð¡ÓÚ960us
        ; Setup parameters for call to function Delay_us
        MOV     R2,#-0x76
        MOV     R3,#0x2
        LCALL   ??Delay_us?relay
//   70     Ds18b20IO = 1;      //À­¸ß×ÜÏß
        SETB    0x80.7
//   71     Ds18b20InputInitial();//ÉèÖÃIOÊäÈë
        ANL     0xfd,#0x7f
        SJMP    ??Ds18b20Initial_0
//   72     while((Ds18b20IO != 0)&&(Flag_1 == 1))//µÈ´ýds18b20ÏìÓ¦£¬¾ßÓÐ·ÀÖ¹³¬Ê±¹¦ÄÜ
//   73     {                                      //µÈ´ýÔ¼60ms×óÓÒ
//   74         CONT_1++;
??Ds18b20Initial_1:
        MOV     A,R6
        ADD     A,#0x1
        INC     R6
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
//   75         Delay_us(10);
        ; Setup parameters for call to function Delay_us
        MOV     R2,#0xa
        MOV     R3,#0x0
        LCALL   ??Delay_us?relay
//   76         if(CONT_1 > 8000)Flag_1 = 0;
        CLR     C
        MOV     A,R6
        SUBB    A,#0x41
        MOV     A,R7
        SUBB    A,#0x1f
        JC      ??Ds18b20Initial_2
        MOV     ?V0 + 1,#0x0
//   77         Status = Ds18b20IO;
??Ds18b20Initial_2:
        MOV     C,0x80.7
        CLR     A
        RLC     A
        MOV     ?V0 + 0,A
//   78     }
??Ds18b20Initial_0:
        MOV     C,0x80.7
        JNC     ??Ds18b20Initial_3
        MOV     A,?V0 + 1
        MOV     C,0xE0 /* A   */.0
        JC      ??Ds18b20Initial_1
//   79     Ds18b20OutputInitial();
??Ds18b20Initial_3:
        ORL     0xfd,#0x80
//   80     Ds18b20IO = 1;
        SETB    0x80.7
//   81     Delay_us(100);
        ; Setup parameters for call to function Delay_us
        MOV     R2,#0x64
        MOV     R3,#0x0
        LCALL   ??Delay_us?relay
//   82     return Status;       //·µ»Ø³õÊ¼»¯×´Ì¬
        MOV     R1,?V0 + 0
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock4
        REQUIRE _A_P0
        REQUIRE P0DIR
//   83 }
//   84 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   85 void Ds18b20Write(unsigned char infor)
Ds18b20Write:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function Ds18b20Write
        CODE
//   86 {
        FUNCALL Ds18b20Write, Delay_us
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Ds18b20Write, Delay_us
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Ds18b20Write, Delay_us
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R7,A
//   87     unsigned int i;
//   88     Ds18b20OutputInitial();
        ORL     0xfd,#0x80
//   89     for(i=0;i<8;i++)
        MOV     R6,#0x8
//   90     {
//   91         Ds18b20IO = 0;
??Ds18b20Write_0:
        CLR     0x80.7
//   92         Delay_us(4);
        ; Setup parameters for call to function Delay_us
        MOV     R2,#0x4
        MOV     R3,#0x0
        LCALL   ??Delay_us?relay
//   93         if((infor & 0x01))
        MOV     A,R7
        MOV     C,0xE0 /* A   */.0
        JNC     ??Ds18b20Write_1
//   94         {
//   95           Ds18b20IO = 1;
        SETB    0x80.7
        SJMP    ??Ds18b20Write_2
//   96         }
//   97         else
//   98         {
//   99           Ds18b20IO = 0;
??Ds18b20Write_1:
        CLR     0x80.7
//  100         }
//  101         Delay_us(59);
??Ds18b20Write_2:
        ; Setup parameters for call to function Delay_us
        MOV     R2,#0x3b
        MOV     R3,#0x0
        LCALL   ??Delay_us?relay
//  102         Ds18b20IO = 1;
        SETB    0x80.7
//  103         Delay_us(4);
        ; Setup parameters for call to function Delay_us
        MOV     R2,#0x4
        MOV     R3,#0x0
        LCALL   ??Delay_us?relay
//  104         
//  105         infor >>= 1;
        MOV     A,R7
        CLR     C
        RRC     A
        MOV     R7,A
//  106     }
        DEC     R6
        MOV     A,R6
        JNZ     ??Ds18b20Write_0
//  107 }
        SJMP    ??Subroutine4_0
        CFI EndBlock cfiBlock5
        REQUIRE _A_P0
        REQUIRE P0DIR
//  108 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  109 unsigned char Ds18b20Read(void)
Ds18b20Read:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function Ds18b20Read
        CODE
//  110 {
        FUNCALL Ds18b20Read, Delay_us
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Ds18b20Read, Delay_us
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Ds18b20Read, Delay_us
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Ds18b20Read, Delay_us
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  111     unsigned char Value = 0x00;
        MOV     R6,#0x0
//  112     unsigned int i;
//  113     Ds18b20OutputInitial();
        LCALL   ?Subroutine2 & 0xFFFF
//  114     Ds18b20IO = 1;
//  115     Delay_us(10);
//  116     for(i=0;i<8;i++)
??CrossCallReturnLabel_3:
        MOV     R7,#0x8
//  117     {
//  118         Value >>= 1; 
??Ds18b20Read_0:
        MOV     A,R6
        CLR     C
        RRC     A
        MOV     R6,A
//  119         Ds18b20OutputInitial();
        ORL     0xfd,#0x80
//  120         Ds18b20IO = 0;// ¸øÂö³åÐÅºÅ
        CLR     0x80.7
//  121         Delay_us(3);
        ; Setup parameters for call to function Delay_us
        MOV     R2,#0x3
        MOV     R3,#0x0
        LCALL   ??Delay_us?relay
//  122         Ds18b20IO = 1;// ¸øÂö³åÐÅºÅ
        SETB    0x80.7
//  123         Delay_us(3);
        ; Setup parameters for call to function Delay_us
        MOV     R2,#0x3
        MOV     R3,#0x0
        LCALL   ??Delay_us?relay
//  124         Ds18b20InputInitial();
        ANL     0xfd,#0x7f
//  125         if(Ds18b20IO == 1) Value |= 0x80;
        MOV     C,0x80.7
        JNC     ??Ds18b20Read_1
        MOV     A,R6
        SETB    0xE0 /* A   */.7
        MOV     R6,A
//  126         Delay_us(35);
??Ds18b20Read_1:
        ; Setup parameters for call to function Delay_us
        MOV     R2,#0x23
        MOV     R3,#0x0
        LCALL   ??Delay_us?relay
//  127     } 
        DEC     R7
        MOV     A,R7
        JNZ     ??Ds18b20Read_0
//  128     return Value;
        MOV     A,R6
        CFI EndBlock cfiBlock6
        REQUIRE ?Subroutine0
        REQUIRE _A_P0
        REQUIRE P0DIR
        ; // Fall through to label ?Subroutine0
//  129 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R1,A
        CFI EndBlock cfiBlock7
        REQUIRE ??Subroutine4_0
        ; // Fall through to label ??Subroutine4_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine4_0:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock8

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond9 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond10 Using cfiCommon0
        CFI (cfiCond10) NoFunction
        CFI (cfiCond10) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond10) CFA_SP SP+0
        CFI (cfiCond10) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker11 Using cfiCommon1
        CFI (cfiPicker11) NoFunction
        CFI (cfiPicker11) Picker
        ORL     0xfd,#0x80
        SETB    0x80.7
        ; Setup parameters for call to function Delay_us
        ; Setup parameters for call to function Delay_us
        MOV     R2,#0xa
        MOV     R3,#0x0
        LCALL   ??Delay_us?relay
        RET
        CFI EndBlock cfiCond9
        CFI EndBlock cfiCond10
        CFI EndBlock cfiPicker11
//  130 
//  131 //ÎÂ¶È¶ÁÈ¡º¯Êý

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  132 unsigned char ReadDs18B20(void) 
ReadDs18B20:
        CFI Block cfiBlock12 Using cfiCommon0
        CFI Function ReadDs18B20
        CODE
//  133 {
        FUNCALL ReadDs18B20, Ds18b20Initial
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ReadDs18B20, Ds18b20Write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ReadDs18B20, Ds18b20Write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ReadDs18B20, Ds18b20Initial
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ReadDs18B20, Ds18b20Write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ReadDs18B20, Ds18b20Write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ReadDs18B20, Ds18b20Read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ReadDs18B20, Ds18b20Read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  134     unsigned char V1,V2;   //¶¨Òå¸ßµÍ8Î» »º³å
//  135     unsigned char temp;    //¶¨ÒåÎÂ¶È»º³å¼Ä´æÆ÷
//  136     
//  137     Ds18b20Initial();
        ; Setup parameters for call to function Ds18b20Initial
        LCALL   ?Subroutine1 & 0xFFFF
//  138     Ds18b20Write(0xcc);    // Ìø¹ý¶ÁÐòºÅÁÐºÅµÄ²Ù×÷
//  139     Ds18b20Write(0x44);    // Æô¶¯ÎÂ¶È×ª»»
//  140     
//  141     Ds18b20Initial();
//  142     Ds18b20Write(0xcc);    //Ìø¹ý¶ÁÐòºÅÁÐºÅµÄ²Ù×÷ 
//  143     Ds18b20Write(0xbe);    //¶ÁÈ¡ÎÂ¶È¼Ä´æÆ÷µÈ£¨¹²¿É¶Á9¸ö¼Ä´æÆ÷£© Ç°Á½¸ö¾ÍÊÇÎÂ¶È
//  144     
//  145     V1 = Ds18b20Read();    //µÍÎ»
??CrossCallReturnLabel_0:
        MOV     R6,A
//  146     V2 = Ds18b20Read();    //¸ßÎ»
//  147     temp = ((V1 >> 4)+((V2 & 0x07)*16)); //×ª»»Êý¾Ý 
//  148 
//  149     return temp;
        ; Setup parameters for call to function Ds18b20Read
        LCALL   ??Ds18b20Read?relay
        MOV     A,R1
        ANL     A,#0x7
        SWAP    A
        MOV     R0,A
        MOV     A,R6
        SWAP    A
        ANL     A,#0xf
        ADD     A,R0
        SJMP    ?Subroutine0
        CFI EndBlock cfiBlock12
//  150 }
//  151 
//  152 //ÎÂ¶È¶ÁÈ¡º¯Êý ´ø1Î»Ð¡ÊýÎ»

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  153 float floatReadDs18B20(void) 
floatReadDs18B20:
        CFI Block cfiBlock13 Using cfiCommon0
        CFI Function floatReadDs18B20
        CODE
//  154 {
        FUNCALL floatReadDs18B20, Ds18b20Initial
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL floatReadDs18B20, Ds18b20Write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL floatReadDs18B20, Ds18b20Write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL floatReadDs18B20, Ds18b20Initial
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL floatReadDs18B20, Ds18b20Write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL floatReadDs18B20, Ds18b20Write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL floatReadDs18B20, Ds18b20Read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL floatReadDs18B20, Ds18b20Read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
//  155     unsigned char V1,V2;   //¶¨Òå¸ßµÍ8Î» »º³å
//  156     unsigned int temp;     //¶¨ÒåÎÂ¶È»º³å¼Ä´æÆ÷
//  157     float fValue;
//  158     Ds18b20Initial();
        ; Setup parameters for call to function Ds18b20Initial
        LCALL   ?Subroutine1 & 0xFFFF
//  159     Ds18b20Write(0xcc);    // Ìø¹ý¶ÁÐòºÅÁÐºÅµÄ²Ù×÷
//  160     Ds18b20Write(0x44);    // Æô¶¯ÎÂ¶È×ª»»
//  161     
//  162     Ds18b20Initial();
//  163     Ds18b20Write(0xcc);    //Ìø¹ý¶ÁÐòºÅÁÐºÅµÄ²Ù×÷ 
//  164     Ds18b20Write(0xbe);    //¶ÁÈ¡ÎÂ¶È¼Ä´æÆ÷µÈ£¨¹²¿É¶Á9¸ö¼Ä´æÆ÷£© Ç°Á½¸ö¾ÍÊÇÎÂ¶È
//  165     
//  166     V1 = Ds18b20Read();    //µÍÎ»
??CrossCallReturnLabel_1:
        MOV     ?V0 + 0,A
//  167     V2 = Ds18b20Read();    //¸ßÎ»
//  168     //temp = ((V1 >> 4)+((V2 & 0x07)*16)); //×ª»»Êý¾Ý 
//  169     temp=V2*0xFF+V1;
//  170     fValue = temp*0.0625;
//  171     
//  172     return fValue;
        ; Setup parameters for call to function Ds18b20Read
        LCALL   ??Ds18b20Read?relay
        MOV     A,R1
        MOV     B,#-0x1
        MUL     AB
        ADD     A,?V0 + 0
        MOV     ?V0 + 0,A
        MOV     A,B
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        CLR     A
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 0
        LCALL   ?UL_TO_FLT
        MOV     DPTR,#__Constant_3d800000
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock13
//  173 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond14 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond15 Using cfiCommon0
        CFI (cfiCond15) NoFunction
        CFI (cfiCond15) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond15) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond15) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond15) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond15) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond15) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond15) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond15) CFA_SP SP+0
        CFI (cfiCond15) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker16 Using cfiCommon1
        CFI (cfiPicker16) NoFunction
        CFI (cfiPicker16) Picker
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_4:
        ; Setup parameters for call to function Ds18b20Write
        ; Setup parameters for call to function Ds18b20Write
        MOV     R1,#0x44
        LCALL   ??Ds18b20Write?relay
        ; Setup parameters for call to function Ds18b20Initial
        ; Setup parameters for call to function Ds18b20Initial
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_5:
        ; Setup parameters for call to function Ds18b20Write
        ; Setup parameters for call to function Ds18b20Write
        MOV     R1,#-0x42
        LCALL   ??Ds18b20Write?relay
        ; Setup parameters for call to function Ds18b20Read
        ; Setup parameters for call to function Ds18b20Read
        LCALL   ??Ds18b20Read?relay
        MOV     A,R1
        RET
        CFI EndBlock cfiCond14
        CFI EndBlock cfiCond15
        CFI EndBlock cfiPicker16

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond17 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4, ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond18 Using cfiCommon0
        CFI (cfiCond18) NoFunction
        CFI (cfiCond18) Conditional ??CrossCallReturnLabel_4, ??CrossCallReturnLabel_1
        CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond18) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond18) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond18) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond18) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond18) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond18) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond18) CFA_SP SP+0
        CFI (cfiCond18) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond19 Using cfiCommon0
        CFI (cfiCond19) NoFunction
        CFI (cfiCond19) Conditional ??CrossCallReturnLabel_5, ??CrossCallReturnLabel_0
        CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond19) CFA_SP SP+0
        CFI (cfiCond19) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond20 Using cfiCommon0
        CFI (cfiCond20) NoFunction
        CFI (cfiCond20) Conditional ??CrossCallReturnLabel_5, ??CrossCallReturnLabel_1
        CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond20) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond20) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond20) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond20) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond20) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond20) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond20) CFA_SP SP+0
        CFI (cfiCond20) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker21 Using cfiCommon1
        CFI (cfiPicker21) NoFunction
        CFI (cfiPicker21) Picker
        LCALL   ??Ds18b20Initial?relay
        ; Setup parameters for call to function Ds18b20Write
        ; Setup parameters for call to function Ds18b20Write
        ; Setup parameters for call to function Ds18b20Write
        ; Setup parameters for call to function Ds18b20Write
        MOV     R1,#-0x34
        LCALL   ??Ds18b20Write?relay
        RET
        CFI EndBlock cfiCond17
        CFI EndBlock cfiCond18
        CFI EndBlock cfiCond19
        CFI EndBlock cfiCond20
        CFI EndBlock cfiPicker21

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3d800000:
        DD 3D800000H

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Ds18b20Delay?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Ds18b20Delay

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Delay_us?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Delay_us

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Ds18b20InputInitial?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Ds18b20InputInitial

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Ds18b20OutputInitial?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Ds18b20OutputInitial

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Ds18b20Initial?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Ds18b20Initial

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Ds18b20Write?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Ds18b20Write

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Ds18b20Read?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Ds18b20Read

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ReadDs18B20?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ReadDs18B20

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??floatReadDs18B20?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    floatReadDs18B20

        END
// 
// 437 bytes in segment BANKED_CODE
//  54 bytes in segment BANK_RELAYS
//   7 bytes in segment SFR_AN
//   4 bytes in segment XDATA_ROM_C
// 
// 491 bytes of CODE  memory
//   0 bytes of CONST memory (+ 4 bytes shared)
//   0 bytes of DATA  memory (+ 7 bytes shared)
//
//Errors: none
//Warnings: none
