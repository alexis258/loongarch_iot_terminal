###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         28/Jun/2023  22:35:04 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\濟捇\Desktop\stm32\ZStack-2.5.1a\Projects #
#                          \zstack\Samples\SampleApp\Source\cJSON.c           #
#    Command line       =  -f C:\Users\濟捇\Desktop\stm32\ZStack-2.5.1a\Proje #
#                          cts\zstack\Samples\SampleApp\CC2530DB\..\..\..\Too #
#                          ls\CC2530DB\f8wEndev.cfg (-DCPU32MHZ               #
#                          -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3         #
#                          -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f          #
#                          C:\Users\濟捇\Desktop\stm32\ZStack-2.5.1a\Projects #
#                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\ #
#                          CC2530DB\f8wConfig.cfg (-DZIGBEEPRO -DSECURE=0     #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 C:\Users\濟捇\Desktop\stm32 #
#                          \ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\S #
#                          ource\cJSON.c -D NWK_AUTO_POLL -D ZTOOL_P1 -D      #
#                          MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D           #
#                          LCD_SUPPORTED=DEBUG -lC C:\Users\濟捇\Desktop\stm3 #
#                          2\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\ #
#                          CC2530DB\EndDeviceEB\List\ -lA                     #
#                          C:\Users\濟捇\Desktop\stm32\ZStack-2.5.1a\Projects #
#                          \zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\Lis #
#                          t\ --diag_suppress Pe001,Pa010 -o                  #
#                          C:\Users\濟捇\Desktop\stm32\ZStack-2.5.1a\Projects #
#                          \zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\Obj #
#                          \ -e --no_code_motion --debug --core=plain         #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I C:\Users\濟捇\Desktop\stm3 #
#                          2\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\ #
#                          CC2530DB\ -I C:\Users\濟捇\Desktop\stm32\ZStack-2. #
#                          5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \Source\ -I C:\Users\濟捇\Desktop\stm32\ZStack-2.5 #
#                          .1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\ZMain\TI2530DB\ -I                           #
#                          C:\Users\濟捇\Desktop\stm32\ZStack-2.5.1a\Projects #
#                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\ #
#                          Components\hal\include\ -I                         #
#                          C:\Users\濟捇\Desktop\stm32\ZStack-2.5.1a\Projects #
#                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\ #
#                          Components\hal\target\CC2530EB\ -I                 #
#                          C:\Users\濟捇\Desktop\stm32\ZStack-2.5.1a\Projects #
#                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\ #
#                          Components\mac\include\ -I                         #
#                          C:\Users\濟捇\Desktop\stm32\ZStack-2.5.1a\Projects #
#                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\ #
#                          Components\mac\high_level\ -I                      #
#                          C:\Users\濟捇\Desktop\stm32\ZStack-2.5.1a\Projects #
#                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\ #
#                          Components\mac\low_level\srf04\ -I                 #
#                          C:\Users\濟捇\Desktop\stm32\ZStack-2.5.1a\Projects #
#                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\ #
#                          Components\mac\low_level\srf04\single_chip\ -I     #
#                          C:\Users\濟捇\Desktop\stm32\ZStack-2.5.1a\Projects #
#                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\ #
#                          Components\mt\ -I C:\Users\濟捇\Desktop\stm32\ZSta #
#                          ck-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530 #
#                          DB\..\..\..\..\..\Components\osal\include\ -I      #
#                          C:\Users\濟捇\Desktop\stm32\ZStack-2.5.1a\Projects #
#                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\ #
#                          Components\services\saddr\ -I                      #
#                          C:\Users\濟捇\Desktop\stm32\ZStack-2.5.1a\Projects #
#                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\ #
#                          Components\services\sdata\ -I                      #
#                          C:\Users\濟捇\Desktop\stm32\ZStack-2.5.1a\Projects #
#                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\ #
#                          Components\stack\af\ -I C:\Users\濟捇\Desktop\stm3 #
#                          2\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\ #
#                          CC2530DB\..\..\..\..\..\Components\stack\nwk\ -I   #
#                          C:\Users\濟捇\Desktop\stm32\ZStack-2.5.1a\Projects #
#                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\ #
#                          Components\stack\sapi\ -I                          #
#                          C:\Users\濟捇\Desktop\stm32\ZStack-2.5.1a\Projects #
#                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\ #
#                          Components\stack\sec\ -I                           #
#                          C:\Users\濟捇\Desktop\stm32\ZStack-2.5.1a\Projects #
#                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\ #
#                          Components\stack\sys\ -I                           #
#                          C:\Users\濟捇\Desktop\stm32\ZStack-2.5.1a\Projects #
#                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\ #
#                          Components\stack\zdo\ -I                           #
#                          C:\Users\濟捇\Desktop\stm32\ZStack-2.5.1a\Projects #
#                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\ #
#                          Components\zmac\ -I C:\Users\濟捇\Desktop\stm32\ZS #
#                          tack-2.5.1a\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\..\..\..\..\Components\zmac\f8w\ -Ohz      #
#    List file          =  C:\Users\濟捇\Desktop\stm32\ZStack-2.5.1a\Projects #
#                          \zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\Lis #
#                          t\cJSON.lst                                        #
#    Object file        =  C:\Users\濟捇\Desktop\stm32\ZStack-2.5.1a\Projects #
#                          \zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\Obj #
#                          \cJSON.r51                                         #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\濟捇\Desktop\stm32\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\Source\cJSON.c
      1          /*
      2            Copyright (c) 2009-2017 Dave Gamble and cJSON contributors
      3          
      4            Permission is hereby granted, free of charge, to any person obtaining a copy
      5            of this software and associated documentation files (the "Software"), to deal
      6            in the Software without restriction, including without limitation the rights
      7            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
      8            copies of the Software, and to permit persons to whom the Software is
      9            furnished to do so, subject to the following conditions:
     10          
     11            The above copyright notice and this permission notice shall be included in
     12            all copies or substantial portions of the Software.
     13          
     14            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     15            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     16            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     17            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     18            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     19            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     20            THE SOFTWARE.
     21          */
     22          
     23          /* cJSON */
     24          /* JSON parser in C. */
     25          
     26          /* disable warnings about old C89 functions in MSVC */
     27          #if !defined(_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER)
     28          #define _CRT_SECURE_NO_DEPRECATE
     29          #endif
     30          
     31          #ifdef __GNUC__
     32          #pragma GCC visibility push(default)
     33          #endif
     34          #if defined(_MSC_VER)
     35          #pragma warning (push)
     36          /* disable warning about single line comments in system headers */
     37          #pragma warning (disable : 4001)
     38          #endif
     39          
     40          #include <string.h>
     41          #include <stdio.h>
     42          #include <math.h>
     43          #include <stdlib.h>
     44          #include <limits.h>
     45          #include <ctype.h>
     46          #include <float.h>
     47          #include "OSAL_Memory.h"
     48          
     49          #ifdef ENABLE_LOCALES
     50          #include <locale.h>
     51          #endif
     52          
     53          #if defined(_MSC_VER)
     54          #pragma warning (pop)
     55          #endif
     56          #ifdef __GNUC__
     57          #pragma GCC visibility pop
     58          #endif
     59          
     60          #include "cJSON.h"
     61          
     62          /* define our own boolean type */
     63          #ifdef true
     64          #undef true
     65          #endif
     66          #define true ((cJSON_bool)1)
     67          
     68          #ifdef false
     69          #undef false
     70          #endif
     71          #define false ((cJSON_bool)0)
     72          
     73          /* define isnan and isinf for ANSI C, if in C99 or above, isnan and isinf has been defined in math.h */
     74          #ifndef isinf
     75          #define isinf(d) (isnan((d - d)) && !isnan(d))
     76          #endif
     77          #ifndef isnan
     78          #define isnan(d) (d != d)
     79          #endif
     80          
     81          #ifndef NAN
     82          #ifdef _WIN32
     83          #define NAN sqrt(-1.0)
     84          #else
     85          #define NAN 0.0/0.0
     86          #endif
     87          #endif
     88          
     89          typedef struct {
     90              const unsigned char *json;
     91              size_t position;
     92          } error;

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     93          static error global_error = { NULL, 0 };
   \                     global_error:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
     94          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     95          CJSON_PUBLIC(const char *) cJSON_GetErrorPtr(void)
   \                     cJSON_GetErrorPtr:
     96          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     97              return (const char*) (global_error.json + global_error.position);
   \   000004   90....       MOV     DPTR,#global_error + 2
   \   000007   12....       LCALL   ??Subroutine230_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_611:
   \   00000A   90....       MOV     DPTR,#global_error
   \   00000D   12....       LCALL   ?Subroutine150 & 0xFFFF
   \                     ??CrossCallReturnLabel_324:
   \   000010   FB           MOV     R3,A
   \   000011   02....       LJMP    ??Subroutine209_0 & 0xFFFF
     98          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine150:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   28           ADD     A,R0
   \   000002   FA           MOV     R2,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   39           ADDC    A,R1
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine206_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine209_0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine230_0:
   \   000000   12....       LCALL   ??Subroutine206_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_638:
   \   000003   22           RET
     99          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    100          CJSON_PUBLIC(char *) cJSON_GetStringValue(const cJSON * const item)
   \                     cJSON_GetStringValue:
    101          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    102              if (!cJSON_IsString(item))
   \   000009                ; Setup parameters for call to function cJSON_IsString
   \   000009   12....       LCALL   ??cJSON_IsString?relay
   \   00000C   8B..         MOV     ?V0 + 1,R3
   \   00000E   EA           MOV     A,R2
   \   00000F   45..         ORL     A,?V0 + 1
   \   000011   7006         JNZ     ??cJSON_GetStringValue_0
    103              {
    104                  return NULL;
   \   000013   7A00         MOV     R2,#0x0
   \   000015   7B00         MOV     R3,#0x0
   \   000017   8007         SJMP    ??CrossCallReturnLabel_417
    105              }
    106          
    107              return item->valuestring;
   \                     ??cJSON_GetStringValue_0:
   \   000019   8E82         MOV     DPL,R6
   \   00001B   8F83         MOV     DPH,R7
   \   00001D   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_417:
   \   000020   02....       LJMP    ??Subroutine162_0 & 0xFFFF
    108          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine162_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004                REQUIRE ??Subroutine194_0
   \   000004                ; // Fall through to label ??Subroutine194_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine194_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004                REQUIRE ??Subroutine195_0
   \   000004                ; // Fall through to label ??Subroutine195_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine195_0:
   \   000000   12....       LCALL   ??Subroutine216_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_556:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine216_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET
    109          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    110          CJSON_PUBLIC(double) cJSON_GetNumberValue(const cJSON * const item)
   \                     cJSON_GetNumberValue:
    111          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    112              if (!cJSON_IsNumber(item))
   \   000009                ; Setup parameters for call to function cJSON_IsNumber
   \   000009   12....       LCALL   ??cJSON_IsNumber?relay
   \   00000C   8B..         MOV     ?V0 + 1,R3
   \   00000E   EA           MOV     A,R2
   \   00000F   45..         ORL     A,?V0 + 1
   \   000011   7025         JNZ     ??cJSON_GetNumberValue_0
    113              {
    114                  return (double) NAN;
                                         ^
Warning[Pe222]: floating-point operation result is out of range
   \   000013   75..00       MOV     ?V0 + 0,#0x0
   \   000016   75..00       MOV     ?V0 + 1,#0x0
   \   000019   75..00       MOV     ?V0 + 2,#0x0
   \   00001C   75..00       MOV     ?V0 + 3,#0x0
   \   00001F   90....       MOV     DPTR,#__Constant_0
   \   000022   78..         MOV     R0,#?V0 + 4
   \   000024   12....       LCALL   ?L_MOV_X
   \   000027   78..         MOV     R0,#?V0 + 0
   \   000029   79..         MOV     R1,#?V0 + 4
   \   00002B   12....       LCALL   ?FLT_DIV
   \   00002E   AA..         MOV     R2,?V0 + 0
   \   000030   AB..         MOV     R3,?V0 + 1
   \   000032   AC..         MOV     R4,?V0 + 2
   \   000034   AD..         MOV     R5,?V0 + 3
   \   000036   8006         SJMP    ??cJSON_GetNumberValue_1
    115              }
    116          
    117              return item->valuedouble;
   \                     ??cJSON_GetNumberValue_0:
   \   000038   12....       LCALL   ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_142:
   \   00003B   12....       LCALL   ?XLOAD_R2345
   \                     ??cJSON_GetNumberValue_1:
   \   00003E   02....       LJMP    ??Subroutine190_0 & 0xFFFF
    118          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine178_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine190_0:
   \   000000   7F08         MOV     R7,#0x8
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine84:
   \   000000   EE           MOV     A,R6
   \   000001   240C         ADD     A,#0xc
   \   000003   F582         MOV     DPL,A
   \   000005   EF           MOV     A,R7
   \   000006   12....       LCALL   ??Subroutine178_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_647:
   \   000009   22           RET
    119          
    120          /* This is a safeguard to prevent copy-pasters from using incompatible C and header files */
    121          #if (CJSON_VERSION_MAJOR != 1) || (CJSON_VERSION_MINOR != 7) || (CJSON_VERSION_PATCH != 15)
    122              #error cJSON.h and cJSON.c have different versions. Make sure that both have the same.
    123          #endif
    124          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    125          CJSON_PUBLIC(const char*) cJSON_Version(void)
   \                     cJSON_Version:
    126          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    127              static char version[15];
    128              sprintf(version, "%i.%i.%i", CJSON_VERSION_MAJOR, CJSON_VERSION_MINOR, CJSON_VERSION_PATCH);
   \   000005                ; Setup parameters for call to function sprintf
   \   000005   75..0F       MOV     ?V0 + 0,#0xf
   \   000008   75..00       MOV     ?V0 + 1,#0x0
   \   00000B   78..         MOV     R0,#?V0 + 0
   \   00000D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000010   75..07       MOV     ?V0 + 0,#0x7
   \   000013   78..         MOV     R0,#?V0 + 0
   \   000015   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000018   75..01       MOV     ?V0 + 0,#0x1
   \   00001B   78..         MOV     R0,#?V0 + 0
   \   00001D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000020   7C..         MOV     R4,#`?<Constant "%i.%i.%i">` & 0xff
   \   000022   7D..         MOV     R5,#(`?<Constant "%i.%i.%i">` >> 8) & 0xff
   \   000024   7A..         MOV     R2,#??version & 0xff
   \   000026   7B..         MOV     R3,#(??version >> 8) & 0xff
   \   000028   12....       LCALL   ??sprintf?relay
   \   00002B   7406         MOV     A,#0x6
   \   00002D   12....       LCALL   ?DEALLOC_XSTACK8
    129          
    130              return version;
   \   000030   7A..         MOV     R2,#??version & 0xff
   \   000032   7B..         MOV     R3,#(??version >> 8) & 0xff
   \   000034   02....       LJMP    ??Subroutine162_0 & 0xFFFF
    131          }

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??version:
   \   000000                DS 15
   \   00000F                REQUIRE __INIT_XDATA_Z
    132          
    133          /* Case insensitive string comparison, doesn't consider two NULL pointers equal though */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    134          static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
   \                     case_insensitive_strcmp:
    135          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    136              if ((string1 == NULL) || (string2 == NULL))
   \   000005   EA           MOV     A,R2
   \   000006   4B           ORL     A,R3
   \   000007   6004         JZ      ??case_insensitive_strcmp_0
   \   000009   EC           MOV     A,R4
   \   00000A   4D           ORL     A,R5
   \   00000B   7006         JNZ     ??case_insensitive_strcmp_1
    137              {
    138                  return 1;
   \                     ??case_insensitive_strcmp_0:
   \   00000D   7A01         MOV     R2,#0x1
   \                     ??case_insensitive_strcmp_2:
   \   00000F   7B00         MOV     R3,#0x0
   \   000011   8079         SJMP    ??case_insensitive_strcmp_3
    139              }
    140          
    141              if (string1 == string2)
   \                     ??case_insensitive_strcmp_1:
   \   000013   EC           MOV     A,R4
   \   000014   6A           XRL     A,R2
   \   000015   7002         JNZ     ??case_insensitive_strcmp_4
   \   000017   ED           MOV     A,R5
   \   000018   6B           XRL     A,R3
   \                     ??case_insensitive_strcmp_4:
   \   000019   7015         JNZ     ??case_insensitive_strcmp_5
    142              {
    143                  return 0;
   \                     ??case_insensitive_strcmp_6:
   \   00001B   7A00         MOV     R2,#0x0
   \   00001D   80F0         SJMP    ??case_insensitive_strcmp_2
    144              }
    145          
    146              for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    147              {
    148                  if (*string1 == '\0')
   \                     ??case_insensitive_strcmp_7:
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   60F9         JZ      ??case_insensitive_strcmp_6
    149                  {
    150                      return 0;
    151                  }
    152              }
   \   000022   A3           INC     DPTR
   \   000023   AA82         MOV     R2,DPL
   \   000025   AB83         MOV     R3,DPH
   \   000027   8C82         MOV     DPL,R4
   \   000029   8D83         MOV     DPH,R5
   \   00002B   A3           INC     DPTR
   \   00002C   AC82         MOV     R4,DPL
   \   00002E   AD83         MOV     R5,DPH
   \                     ??case_insensitive_strcmp_5:
   \   000030   8A82         MOV     DPL,R2
   \   000032   8B83         MOV     DPH,R3
   \   000034   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000037   8A82         MOV     DPL,R2
   \   000039   8B83         MOV     DPH,R3
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   5002         JNC     ??case_insensitive_strcmp_8
   \   00003E   4420         ORL     A,#0x20
   \                     ??case_insensitive_strcmp_8:
   \   000040   FE           MOV     R6,A
   \   000041   8C82         MOV     DPL,R4
   \   000043   8D83         MOV     DPH,R5
   \   000045   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000048   5008         JNC     ??case_insensitive_strcmp_9
   \   00004A   8C82         MOV     DPL,R4
   \   00004C   8D83         MOV     DPH,R5
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   4420         ORL     A,#0x20
   \   000051   F8           MOV     R0,A
   \                     ??case_insensitive_strcmp_9:
   \   000052   E8           MOV     A,R0
   \   000053   6E           XRL     A,R6
   \   000054   8A82         MOV     DPL,R2
   \   000056   8B83         MOV     DPH,R3
   \   000058   60C5         JZ      ??case_insensitive_strcmp_7
    153          
    154              return tolower(*string1) - tolower(*string2);
   \   00005A   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   00005D   5008         JNC     ??case_insensitive_strcmp_10
   \   00005F   8A82         MOV     DPL,R2
   \   000061   8B83         MOV     DPH,R3
   \   000063   E0           MOVX    A,@DPTR
   \   000064   4420         ORL     A,#0x20
   \   000066   F8           MOV     R0,A
   \                     ??case_insensitive_strcmp_10:
   \   000067   8C82         MOV     DPL,R4
   \   000069   8D83         MOV     DPH,R5
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   FA           MOV     R2,A
   \   00006D   74..         MOV     A,#(_Small_Ctype + 1) & 0xff
   \   00006F   2A           ADD     A,R2
   \   000070   F582         MOV     DPL,A
   \   000072   74..         MOV     A,#((_Small_Ctype + 1) >> 8) & 0xff
   \   000074   12....       LCALL   ??Subroutine180_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_349:
   \   000077   E4           CLR     A
   \   000078   93           MOVC    A,@A+DPTR
   \   000079   A2E0         MOV     C,0xE0 /* A   */.0
   \   00007B   5008         JNC     ??case_insensitive_strcmp_11
   \   00007D   8C82         MOV     DPL,R4
   \   00007F   8D83         MOV     DPH,R5
   \   000081   E0           MOVX    A,@DPTR
   \   000082   4420         ORL     A,#0x20
   \   000084   FA           MOV     R2,A
   \                     ??case_insensitive_strcmp_11:
   \   000085   E8           MOV     A,R0
   \   000086   C3           CLR     C
   \   000087   9A           SUBB    A,R2
   \   000088   FA           MOV     R2,A
   \   000089   95E0         SUBB    A,0xE0 /* A   */
   \   00008B   FB           MOV     R3,A
   \                     ??case_insensitive_strcmp_3:
   \   00008C   02....       LJMP    ??Subroutine191_0 & 0xFFFF
    155          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   74..         MOV     A,#(_Small_Ctype + 1) & 0xff
   \   000004   28           ADD     A,R0
   \   000005   F582         MOV     DPL,A
   \   000007   74..         MOV     A,#((_Small_Ctype + 1) >> 8) & 0xff
   \   000009   12....       LCALL   ??Subroutine178_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_646:
   \   00000C   E4           CLR     A
   \   00000D   93           MOVC    A,@A+DPTR
   \   00000E   A2E0         MOV     C,0xE0 /* A   */.0
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine180_0:
   \   000000   12....       LCALL   ??Subroutine178_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_652:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine191_0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    156          
    157          typedef struct internal_hooks
    158          {
    159              void *(CJSON_CDECL *allocate)(uint16 size);
    160              void (CJSON_CDECL *deallocate)(void *pointer);
    161              void *(CJSON_CDECL *reallocate)(void *pointer, uint16 size);
    162          } internal_hooks;

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    163          static void * CJSON_CDECL osal_mem_realloc(void *pointer, uint16 size)
   \                     osal_mem_realloc:
    164          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EC           MOV     A,R4
   \   000006   FE           MOV     R6,A
   \   000007   ED           MOV     A,R5
   \   000008   FF           MOV     R7,A
    165              osal_mem_free(pointer);
   \   000009                ; Setup parameters for call to function osal_mem_free
   \   000009   12....       LCALL   ??osal_mem_free?relay
    166              return osal_mem_alloc(size);
   \   00000C                ; Setup parameters for call to function osal_mem_alloc
   \   00000C   EE           MOV     A,R6
   \   00000D   FA           MOV     R2,A
   \   00000E   EF           MOV     A,R7
   \   00000F   FB           MOV     R3,A
   \   000010   12....       LCALL   ??osal_mem_alloc?relay
   \   000013   02....       LJMP    ??Subroutine191_0 & 0xFFFF
    167          }
    168          #define realloc osal_mem_realloc
    169          #define malloc osal_mem_alloc
    170          #define free osal_mem_free
    171          
    172          
    173          #if defined(_MSC_VER)
    174          /* work around MSVC error C2322: '...' address of dllimport '...' is not static */
    175          static void * CJSON_CDECL internal_malloc(size_t size)
    176          {
    177              return malloc(size);
    178          }
    179          static void CJSON_CDECL internal_free(void *pointer)
    180          {
    181              free(pointer);
    182          }
    183          static void * CJSON_CDECL internal_realloc(void *pointer, size_t size)
    184          {
    185              return realloc(pointer, size);
    186          }
    187          #else
    188          #define internal_malloc malloc
    189          #define internal_free free
    190          #define internal_realloc realloc
    191          #endif
    192          
    193          /* strlen of character literals resolved at compile time */
    194          #define static_strlen(string_literal) (sizeof(string_literal) - sizeof(""))
    195          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    196          static internal_hooks global_hooks = { internal_malloc, internal_free, internal_realloc };
   \                     global_hooks:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for global_hooks>`
   \   000006                REQUIRE __INIT_XDATA_I
    197          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    198          static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
   \                     cJSON_strdup:
    199          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
    200              size_t length = 0;
    201              unsigned char *copy = NULL;
    202          
    203              if (string == NULL)
   \   00000D   EE           MOV     A,R6
   \   00000E   4F           ORL     A,R7
   \   00000F   7006         JNZ     ??cJSON_strdup_0
    204              {
    205                  return NULL;
   \                     ??cJSON_strdup_1:
   \   000011   7A00         MOV     R2,#0x0
   \   000013   7B00         MOV     R3,#0x0
   \   000015   802F         SJMP    ??cJSON_strdup_2
    206              }
    207          
    208              length = strlen((const char*)string) + sizeof("");
   \                     ??cJSON_strdup_0:
   \   000017                ; Setup parameters for call to function strlen
   \   000017   12....       LCALL   ??strlen?relay
   \   00001A   12....       LCALL   ?Subroutine93 & 0xFFFF
    209              copy = (unsigned char*)hooks->allocate(length);
   \                     ??CrossCallReturnLabel_152:
   \   00001D                ; Setup parameters for indirect call
   \   00001D   0A           INC     R2
   \   00001E   FB           MOV     R3,A
   \   00001F   85..82       MOV     DPL,?V0 + 0
   \   000022   85..83       MOV     DPH,?V0 + 1
   \   000025   12....       LCALL   ??Subroutine164_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_254:
   \   000028   12....       LCALL   ?CALL_IND
   \   00002B   8A..         MOV     ?V0 + 0,R2
   \   00002D   8B..         MOV     ?V0 + 1,R3
    210              if (copy == NULL)
   \   00002F   EA           MOV     A,R2
   \   000030   45..         ORL     A,?V0 + 1
   \   000032   60DD         JZ      ??cJSON_strdup_1
    211              {
    212                  return NULL;
    213              }
    214              memcpy(copy, string, length);
   \   000034                ; Setup parameters for call to function memcpy
   \   000034   78..         MOV     R0,#?V0 + 2
   \   000036   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000039   EE           MOV     A,R6
   \   00003A   FC           MOV     R4,A
   \   00003B   EF           MOV     A,R7
   \   00003C   12....       LCALL   ?Subroutine143 & 0xFFFF
   \                     ??CrossCallReturnLabel_285:
   \   00003F   12....       LCALL   ?DEALLOC_XSTACK8
    215          
    216              return copy;
   \   000042   AA..         MOV     R2,?V0 + 0
   \   000044   AB..         MOV     R3,?V0 + 1
   \                     ??cJSON_strdup_2:
   \   000046   02....       LJMP    ??Subroutine192_0 & 0xFFFF
    217          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine164_0:
   \   000000   12....       LCALL   ?Subroutine129 & 0xFFFF
   \                     ??CrossCallReturnLabel_284:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine143:
   \   000000   FD           MOV     R5,A
   \   000001                REQUIRE ??Subroutine165_0
   \   000001                ; // Fall through to label ??Subroutine165_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine165_0:
   \   000000   12....       LCALL   ??memcpy?relay
   \   000003   7402         MOV     A,#0x2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine129:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   12....       LCALL   ?Subroutine149 & 0xFFFF
   \                     ??CrossCallReturnLabel_608:
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine149:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine166_0
   \   000001                ; // Fall through to label ??Subroutine166_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine166_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F583         MOV     DPH,A
   \   000003   8882         MOV     DPL,R0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine93:
   \   000000   EA           MOV     A,R2
   \   000001   2401         ADD     A,#0x1
   \   000003   F5..         MOV     ?V0 + 2,A
   \   000005   EB           MOV     A,R3
   \   000006   3400         ADDC    A,#0x0
   \   000008   F5..         MOV     ?V0 + 3,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine192_0:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    218          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    219          CJSON_PUBLIC(void) cJSON_InitHooks(cJSON_Hooks* hooks)
   \                     cJSON_InitHooks:
    220          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    221              if (hooks == NULL)
   \   000004   EA           MOV     A,R2
   \   000005   4B           ORL     A,R3
   \   000006   90....       MOV     DPTR,#global_hooks
   \   000009   7012         JNZ     ??cJSON_InitHooks_0
    222              {
    223                  /* Reset hooks */
    224                  global_hooks.allocate = malloc;
   \   00000B   74..         MOV     A,#??osal_mem_alloc?relay & 0xff
   \   00000D   F0           MOVX    @DPTR,A
   \   00000E   A3           INC     DPTR
   \   00000F   74..         MOV     A,#(??osal_mem_alloc?relay >> 8) & 0xff
   \   000011   F0           MOVX    @DPTR,A
    225                  global_hooks.deallocate = free;
   \   000012   A3           INC     DPTR
   \   000013   74..         MOV     A,#??osal_mem_free?relay & 0xff
   \   000015   F0           MOVX    @DPTR,A
   \   000016   A3           INC     DPTR
   \   000017   74..         MOV     A,#(??osal_mem_free?relay >> 8) & 0xff
   \   000019   F0           MOVX    @DPTR,A
    226                  global_hooks.reallocate = realloc;
   \   00001A   A3           INC     DPTR
   \   00001B   8051         SJMP    ??cJSON_InitHooks_1
    227                  return;
    228              }
    229          
    230              global_hooks.allocate = malloc;
   \                     ??cJSON_InitHooks_0:
   \   00001D   74..         MOV     A,#??osal_mem_alloc?relay & 0xff
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   A3           INC     DPTR
   \   000021   74..         MOV     A,#(??osal_mem_alloc?relay >> 8) & 0xff
   \   000023   12....       LCALL   ?Subroutine105 & 0xFFFF
    231              if (hooks->malloc_fn != NULL)
   \                     ??CrossCallReturnLabel_166:
   \   000026   12....       LCALL   ??Subroutine205_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_458:
   \   000029   6006         JZ      ??CrossCallReturnLabel_430
    232              {
    233                  global_hooks.allocate = hooks->malloc_fn;
   \   00002B   90....       MOV     DPTR,#global_hooks
   \   00002E   12....       LCALL   ??Subroutine200_0 & 0xFFFF
    234              }
    235          
    236              global_hooks.deallocate = free;
   \                     ??CrossCallReturnLabel_430:
   \   000031   90....       MOV     DPTR,#global_hooks + 2
   \   000034   74..         MOV     A,#??osal_mem_free?relay & 0xff
   \   000036   F0           MOVX    @DPTR,A
   \   000037   A3           INC     DPTR
   \   000038   74..         MOV     A,#(??osal_mem_free?relay >> 8) & 0xff
   \   00003A   12....       LCALL   ?Subroutine105 & 0xFFFF
    237              if (hooks->free_fn != NULL)
   \                     ??CrossCallReturnLabel_167:
   \   00003D   12....       LCALL   ??Subroutine204_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_487:
   \   000040   6006         JZ      ??CrossCallReturnLabel_431
    238              {
    239                  global_hooks.deallocate = hooks->free_fn;
   \   000042   90....       MOV     DPTR,#global_hooks + 2
   \   000045   12....       LCALL   ??Subroutine200_0 & 0xFFFF
    240              }
    241          
    242              /* use realloc only if both free and malloc are used */
    243              global_hooks.reallocate = NULL;
   \                     ??CrossCallReturnLabel_431:
   \   000048   90....       MOV     DPTR,#global_hooks + 4
   \   00004B   E4           CLR     A
   \   00004C   F0           MOVX    @DPTR,A
   \   00004D   A3           INC     DPTR
   \   00004E   F0           MOVX    @DPTR,A
    244              if ((global_hooks.allocate == malloc) && (global_hooks.deallocate == free))
   \   00004F   90....       MOV     DPTR,#global_hooks
   \   000052   E0           MOVX    A,@DPTR
   \   000053   64..         XRL     A,#??osal_mem_alloc?relay & 0xff
   \   000055   7004         JNZ     ??cJSON_InitHooks_2
   \   000057   A3           INC     DPTR
   \   000058   E0           MOVX    A,@DPTR
   \   000059   64..         XRL     A,#(??osal_mem_alloc?relay >> 8) & 0xff
   \                     ??cJSON_InitHooks_2:
   \   00005B   7018         JNZ     ??cJSON_InitHooks_3
   \   00005D   90....       MOV     DPTR,#global_hooks + 2
   \   000060   E0           MOVX    A,@DPTR
   \   000061   64..         XRL     A,#??osal_mem_free?relay & 0xff
   \   000063   7004         JNZ     ??cJSON_InitHooks_4
   \   000065   A3           INC     DPTR
   \   000066   E0           MOVX    A,@DPTR
   \   000067   64..         XRL     A,#(??osal_mem_free?relay >> 8) & 0xff
   \                     ??cJSON_InitHooks_4:
   \   000069   700A         JNZ     ??cJSON_InitHooks_3
    245              {
    246                  global_hooks.reallocate = realloc;
   \   00006B   90....       MOV     DPTR,#global_hooks + 4
   \                     ??cJSON_InitHooks_1:
   \   00006E   74..         MOV     A,#??osal_mem_realloc?relay & 0xff
   \   000070   F0           MOVX    @DPTR,A
   \   000071   A3           INC     DPTR
   \   000072   74..         MOV     A,#(??osal_mem_realloc?relay >> 8) & 0xff
   \   000074   F0           MOVX    @DPTR,A
    247              }
   \                     ??cJSON_InitHooks_3:
   \   000075   02....       LJMP    ??Subroutine209_0 & 0xFFFF
    248          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine200_0:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine204_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine205_0
   \   000002                ; // Fall through to label ??Subroutine205_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine205_0:
   \   000000   12....       LCALL   ??Subroutine206_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_637:
   \   000003   E8           MOV     A,R0
   \   000004   49           ORL     A,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine105:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   22           RET
    249          
    250          /* Internal constructor. */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    251          static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
   \                     cJSON_New_Item:
    252          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
    253              cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
   \   000009                ; Setup parameters for indirect call
   \   000009   7A12         MOV     R2,#0x12
   \   00000B   7B00         MOV     R3,#0x0
   \   00000D   12....       LCALL   ??Subroutine164_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_255:
   \   000010   12....       LCALL   ?CALL_IND
   \   000013   8A..         MOV     ?V0 + 0,R2
   \   000015   8B..         MOV     ?V0 + 1,R3
   \   000017   AE..         MOV     R6,?V0 + 0
   \   000019   AF..         MOV     R7,?V0 + 1
    254              if (node)
   \   00001B   EE           MOV     A,R6
   \   00001C   4F           ORL     A,R7
   \   00001D   6017         JZ      ??cJSON_New_Item_0
    255              {
    256                  memset(node, '\0', sizeof(cJSON));
   \   00001F                ; Setup parameters for call to function memset
   \   00001F   75..12       MOV     ?V0 + 0,#0x12
   \   000022   75..00       MOV     ?V0 + 1,#0x0
   \   000025   78..         MOV     R0,#?V0 + 0
   \   000027   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002A   7C00         MOV     R4,#0x0
   \   00002C   7D00         MOV     R5,#0x0
   \   00002E   12....       LCALL   ??memset?relay
   \   000031   7402         MOV     A,#0x2
   \   000033   12....       LCALL   ?DEALLOC_XSTACK8
    257              }
    258          
    259              return node;
   \                     ??cJSON_New_Item_0:
   \   000036   EE           MOV     A,R6
   \   000037   FA           MOV     R2,A
   \   000038   EF           MOV     A,R7
   \   000039   FB           MOV     R3,A
   \   00003A   02....       LJMP    ??Subroutine162_0 & 0xFFFF
    260          }
    261          
    262          /* Delete a cJSON structure. */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    263          CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
   \                     cJSON_Delete:
    264          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    265              cJSON *next = NULL;
   \   000009   02....       LJMP    ??cJSON_Delete_0 & 0xFFFF
    266              while (item != NULL)
    267              {
    268                  next = item->next;
   \                     ??cJSON_Delete_1:
   \   00000C   8E82         MOV     DPL,R6
   \   00000E   8F83         MOV     DPH,R7
   \   000010   12....       LCALL   ?Subroutine39 & 0xFFFF
    269                  if (!(item->type & cJSON_IsReference) && (item->child != NULL))
   \                     ??CrossCallReturnLabel_56:
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   5401         ANL     A,#0x1
   \   000019   7013         JNZ     ??cJSON_Delete_2
   \   00001B   8E82         MOV     DPL,R6
   \   00001D   8F83         MOV     DPH,R7
   \   00001F   12....       LCALL   ??Subroutine203_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_489:
   \   000022   600A         JZ      ??cJSON_Delete_2
    270                  {
    271                      cJSON_Delete(item->child);
   \   000024                ; Setup parameters for call to function cJSON_Delete
   \   000024   8E82         MOV     DPL,R6
   \   000026   8F83         MOV     DPH,R7
   \   000028   12....       LCALL   ??Subroutine194_0 & 0xFFFF
    272                  }
   \                     ??CrossCallReturnLabel_415:
   \   00002B   12....       LCALL   ??cJSON_Delete?relay
    273                  if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
   \                     ??cJSON_Delete_2:
   \   00002E   8E82         MOV     DPL,R6
   \   000030   8F83         MOV     DPH,R7
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   A3           INC     DPTR
   \   000038   A3           INC     DPTR
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   5401         ANL     A,#0x1
   \   00003C   701B         JNZ     ??cJSON_Delete_3
   \   00003E   8E82         MOV     DPL,R6
   \   000040   8F83         MOV     DPH,R7
   \   000042   12....       LCALL   ??Subroutine202_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_497:
   \   000045   6012         JZ      ??cJSON_Delete_3
    274                  {
    275                      global_hooks.deallocate(item->valuestring);
   \   000047                ; Setup parameters for indirect call
   \   000047   8E82         MOV     DPL,R6
   \   000049   8F83         MOV     DPH,R7
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   A3           INC     DPTR
   \   000051   A3           INC     DPTR
   \   000052   A3           INC     DPTR
   \   000053   12....       LCALL   ?Subroutine23 & 0xFFFF
    276                  }
   \                     ??CrossCallReturnLabel_23:
   \   000056   12....       LCALL   ?CALL_IND
    277                  if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
   \                     ??cJSON_Delete_3:
   \   000059   8E82         MOV     DPL,R6
   \   00005B   8F83         MOV     DPH,R7
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   A3           INC     DPTR
   \   000060   A3           INC     DPTR
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   A3           INC     DPTR
   \   000064   E0           MOVX    A,@DPTR
   \   000065   5402         ANL     A,#0x2
   \   000067   7019         JNZ     ??cJSON_Delete_4
   \   000069   12....       LCALL   ?Subroutine112 & 0xFFFF
   \                     ??CrossCallReturnLabel_643:
   \   00006C   EF           MOV     A,R7
   \   00006D   12....       LCALL   ??Subroutine180_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_350:
   \   000070   12....       LCALL   ??Subroutine205_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_459:
   \   000073   600D         JZ      ??cJSON_Delete_4
    278                  {
    279                      global_hooks.deallocate(item->string);
   \   000075                ; Setup parameters for indirect call
   \   000075   12....       LCALL   ?Subroutine112 & 0xFFFF
    280                  }
   \                     ??CrossCallReturnLabel_644:
   \   000078   EF           MOV     A,R7
   \   000079   12....       LCALL   ??Subroutine180_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_351:
   \   00007C   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   00007F   12....       LCALL   ?CALL_IND
    281                  global_hooks.deallocate(item);
   \                     ??cJSON_Delete_4:
   \   000082                ; Setup parameters for indirect call
   \   000082   EE           MOV     A,R6
   \   000083   FA           MOV     R2,A
   \   000084   EF           MOV     A,R7
   \   000085   FB           MOV     R3,A
   \   000086   90....       MOV     DPTR,#global_hooks + 2
   \   000089   12....       LCALL   ??Subroutine164_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_256:
   \   00008C   12....       LCALL   ?CALL_IND
    282                  item = next;
   \   00008F   AE..         MOV     R6,?V0 + 0
   \   000091   AF..         MOV     R7,?V0 + 1
    283              }
   \                     ??cJSON_Delete_0:
   \   000093   EE           MOV     A,R6
   \   000094   4F           ORL     A,R7
   \   000095   6003         JZ      $+5
   \   000097   02....       LJMP    ??cJSON_Delete_1 & 0xFFFF
    284          }
   \   00009A   02....       LJMP    ??Subroutine162_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL   ??Subroutine216_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_548:
   \   000003   90....       MOV     DPTR,#global_hooks + 2
   \   000006   12....       LCALL   ?Subroutine129 & 0xFFFF
   \                     ??CrossCallReturnLabel_279:
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine202_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004                REQUIRE ??Subroutine203_0
   \   000004                ; // Fall through to label ??Subroutine203_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine203_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine204_0
   \   000002                ; // Fall through to label ??Subroutine204_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine130:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 1,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine112:
   \   000000   EE           MOV     A,R6
   \   000001                REQUIRE ??Subroutine231_0
   \   000001                ; // Fall through to label ??Subroutine231_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine231_0:
   \   000000   2410         ADD     A,#0x10
   \   000002   F582         MOV     DPL,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   12....       LCALL   ?Subroutine130 & 0xFFFF
   \                     ??CrossCallReturnLabel_535:
   \   000003   8E82         MOV     DPL,R6
   \   000005   8F83         MOV     DPH,R7
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   22           RET
    285          
    286          /* get the decimal point character of the current locale */
    287          static unsigned char get_decimal_point(void)
    288          {
    289          #ifdef ENABLE_LOCALES
    290              struct lconv *lconv = localeconv();
    291              return (unsigned char) lconv->decimal_point[0];
    292          #else
    293              return '.';
    294          #endif
    295          }
    296          
    297          typedef struct
    298          {
    299              const unsigned char *content;
    300              size_t length;
    301              size_t offset;
    302              size_t depth; /* How deeply nested (in arrays/objects) is the input at the current offset. */
    303              internal_hooks hooks;
    304          } parse_buffer;
    305          
    306          /* check if the given size is left to read in a given parse buffer (starting with 1) */
    307          #define can_read(buffer, size) ((buffer != NULL) && (((buffer)->offset + size) <= (buffer)->length))
    308          /* check if the buffer can be accessed at the given index (starting with 0) */
    309          #define can_access_at_index(buffer, index) ((buffer != NULL) && (((buffer)->offset + index) < (buffer)->length))
    310          #define cannot_access_at_index(buffer, index) (!can_access_at_index(buffer, index))
    311          /* get a pointer to the buffer at the position */
    312          #define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)
    313          
    314          /* Parse the input text to generate a number, and populate the result into item. */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    315          static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
   \                     parse_number:
    316          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 66
   \   000005   74BE         MOV     A,#-0x42
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 0,R2
   \   00000C   8B..         MOV     ?V0 + 1,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
    317              double number = 0;
    318              unsigned char *after_end = NULL;
   \   000012   85..82       MOV     DPL,?XSP + 0
   \   000015   85..83       MOV     DPH,?XSP + 1
   \   000018   E4           CLR     A
   \   000019   F0           MOVX    @DPTR,A
   \   00001A   A3           INC     DPTR
   \   00001B   F0           MOVX    @DPTR,A
    319              unsigned char number_c_string[64];
    320              unsigned char decimal_point = get_decimal_point();
    321              size_t i = 0;
    322          
    323              if ((input_buffer == NULL) || (input_buffer->content == NULL))
   \   00001C   EE           MOV     A,R6
   \   00001D   4F           ORL     A,R7
   \   00001E   6009         JZ      ??parse_number_0
   \   000020   8E82         MOV     DPL,R6
   \   000022   8F83         MOV     DPH,R7
   \   000024   12....       LCALL   ??Subroutine205_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_460:
   \   000027   7005         JNZ     ??parse_number_1
    324              {
    325                  return false;
   \                     ??parse_number_0:
   \   000029   7A00         MOV     R2,#0x0
   \   00002B   02....       LJMP    ??parse_number_2 & 0xFFFF
    326              }
    327          
    328              /* copy the number into a temporary buffer and replace '.' with the decimal point
    329               * of the current locale (for strtod)
    330               * This also takes care of '\0' not necessarily being available for marking the end of the input */
    331              for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
   \                     ??parse_number_1:
   \   00002E   7800         MOV     R0,#0x0
   \   000030   7900         MOV     R1,#0x0
   \                     ??parse_number_3:
   \   000032   8E82         MOV     DPL,R6
   \   000034   8F83         MOV     DPH,R7
   \   000036   A3           INC     DPTR
   \   000037   A3           INC     DPTR
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   28           ADD     A,R0
   \   00003C   FC           MOV     R4,A
   \   00003D   A3           INC     DPTR
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   39           ADDC    A,R1
   \   000040   FD           MOV     R5,A
   \   000041   8E82         MOV     DPL,R6
   \   000043   8F83         MOV     DPH,R7
   \   000045   12....       LCALL   ??Subroutine181_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_365:
   \   000048   5044         JNC     ??parse_number_4
    332              {
    333                  switch (buffer_at_offset(input_buffer)[i])
   \   00004A   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   00004D   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for parse_number>_0`:
   \   000050   01           DB        1
   \   000051   30           DB        48
   \   000052   39           DB        57
   \   000053   ....         DW        ??parse_number_5
   \   000055   05           DB        5
   \   000056   2B           DB        43
   \   000057   ....         DW        ??parse_number_5
   \   000059   2D           DB        45
   \   00005A   ....         DW        ??parse_number_5
   \   00005C   2E           DB        46
   \   00005D   ....         DW        ??parse_number_6
   \   00005F   45           DB        69
   \   000060   ....         DW        ??parse_number_5
   \   000062   65           DB        101
   \   000063   ....         DW        ??parse_number_5
   \   000065   ....         DW        ??parse_number_4
    334                  {
    335                      case '0':
    336                      case '1':
    337                      case '2':
    338                      case '3':
    339                      case '4':
    340                      case '5':
    341                      case '6':
    342                      case '7':
    343                      case '8':
    344                      case '9':
    345                      case '+':
    346                      case '-':
    347                      case 'e':
    348                      case 'E':
    349                          number_c_string[i] = buffer_at_offset(input_buffer)[i];
   \                     ??parse_number_5:
   \   000067   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   00006A   C0E0         PUSH    A
   \   00006C   7402         MOV     A,#0x2
   \   00006E   12....       LCALL   ?XSTACK_DISP0_8
   \   000071   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   000074   D0E0         POP     A
   \   000076   800A         SJMP    ??parse_number_7
    350                          break;
    351          
    352                      case '.':
    353                          number_c_string[i] = decimal_point;
   \                     ??parse_number_6:
   \   000078   7402         MOV     A,#0x2
   \   00007A   12....       LCALL   ?XSTACK_DISP0_8
   \   00007D   12....       LCALL   ?Subroutine81 & 0xFFFF
    354                          break;
    355          
    356                      default:
    357                          goto loop_end;
    358                  }
    359              }
   \                     ??CrossCallReturnLabel_128:
   \   000080   742E         MOV     A,#0x2e
   \                     ??parse_number_7:
   \   000082   12....       LCALL   ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_228:
   \   000085   C3           CLR     C
   \   000086   E8           MOV     A,R0
   \   000087   943F         SUBB    A,#0x3f
   \   000089   E9           MOV     A,R1
   \   00008A   9400         SUBB    A,#0x0
   \   00008C   40A4         JC      ??parse_number_3
    360          loop_end:
    361              number_c_string[i] = '\0';
   \                     ??parse_number_4:
   \   00008E   7402         MOV     A,#0x2
   \   000090   12....       LCALL   ?XSTACK_DISP0_8
   \   000093   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   000096   E4           CLR     A
   \   000097   12....       LCALL   ??Subroutine167_0 & 0xFFFF
    362          
    363              number = strtod((const char*)number_c_string, (char**)&after_end);
   \                     ??CrossCallReturnLabel_291:
   \   00009A   AC82         MOV     R4,DPL
   \   00009C   AD83         MOV     R5,DPH
   \   00009E   7402         MOV     A,#0x2
   \   0000A0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A3   AA82         MOV     R2,DPL
   \   0000A5   AB83         MOV     R3,DPH
   \   0000A7   12....       LCALL   ??strtod?relay
   \   0000AA   8A..         MOV     ?V0 + 4,R2
   \   0000AC   8B..         MOV     ?V0 + 5,R3
   \   0000AE   8C..         MOV     ?V0 + 6,R4
   \   0000B0   8D..         MOV     ?V0 + 7,R5
    364              if (number_c_string == after_end)
   \   0000B2   7402         MOV     A,#0x2
   \   0000B4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B7   C082         PUSH    DPL
   \   0000B9   C083         PUSH    DPH
   \   0000BB   85..82       MOV     DPL,?XSP + 0
   \   0000BE   85..83       MOV     DPH,?XSP + 1
   \   0000C1   12....       LCALL   ??Subroutine230_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_612:
   \   0000C4   D083         POP     DPH
   \   0000C6   D082         POP     DPL
   \   0000C8   E582         MOV     A,DPL
   \   0000CA   68           XRL     A,R0
   \   0000CB   7003         JNZ     ??parse_number_8
   \   0000CD   E583         MOV     A,DPH
   \   0000CF   69           XRL     A,R1
   \                     ??parse_number_8:
   \   0000D0   7003         JNZ     $+5
   \   0000D2   02....       LJMP    ??parse_number_0 & 0xFFFF
    365              {
    366                  return false; /* parse_error */
    367              }
    368          
    369              item->valuedouble = number;
   \   0000D5   12....       LCALL   ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_139:
   \   0000D8   78..         MOV     R0,#?V0 + 4
   \   0000DA   12....       LCALL   ?L_MOV_TO_X
    370          
    371              /* use saturation in case of overflow */
    372              if (number >= INT_MAX)
   \   0000DD   90....       MOV     DPTR,#__Constant_46fffe00
   \   0000E0   78..         MOV     R0,#?V0 + 8
   \   0000E2   12....       LCALL   ?L_MOV_X
   \   0000E5   78..         MOV     R0,#?V0 + 4
   \   0000E7   79..         MOV     R1,#?V0 + 8
   \   0000E9   12....       LCALL   ?FLT_GE
   \   0000EC   5018         JNC     ??parse_number_9
    373              {
    374                  item->valueint = INT_MAX;
   \   0000EE   85..82       MOV     DPL,?V0 + 0
   \   0000F1   85..83       MOV     DPH,?V0 + 1
   \   0000F4   A3           INC     DPTR
   \   0000F5   A3           INC     DPTR
   \   0000F6   A3           INC     DPTR
   \   0000F7   A3           INC     DPTR
   \   0000F8   A3           INC     DPTR
   \   0000F9   A3           INC     DPTR
   \   0000FA   A3           INC     DPTR
   \   0000FB   A3           INC     DPTR
   \   0000FC   A3           INC     DPTR
   \   0000FD   A3           INC     DPTR
   \   0000FE   74FF         MOV     A,#-0x1
   \   000100   F0           MOVX    @DPTR,A
   \   000101   A3           INC     DPTR
   \   000102   747F         MOV     A,#0x7f
   \   000104   8043         SJMP    ??parse_number_10
    375              }
    376              else if (number <= (double)INT_MIN)
   \                     ??parse_number_9:
   \   000106   90....       MOV     DPTR,#__Constant_c6fffffe
   \   000109   78..         MOV     R0,#?V0 + 8
   \   00010B   12....       LCALL   ?L_MOV_X
   \   00010E   78..         MOV     R0,#?V0 + 4
   \   000110   79..         MOV     R1,#?V0 + 8
   \   000112   12....       LCALL   ?FLT_LT
   \   000115   5017         JNC     ??parse_number_11
    377              {
    378                  item->valueint = INT_MIN;
   \   000117   85..82       MOV     DPL,?V0 + 0
   \   00011A   85..83       MOV     DPH,?V0 + 1
   \   00011D   A3           INC     DPTR
   \   00011E   A3           INC     DPTR
   \   00011F   A3           INC     DPTR
   \   000120   A3           INC     DPTR
   \   000121   A3           INC     DPTR
   \   000122   A3           INC     DPTR
   \   000123   A3           INC     DPTR
   \   000124   A3           INC     DPTR
   \   000125   A3           INC     DPTR
   \   000126   A3           INC     DPTR
   \   000127   E4           CLR     A
   \   000128   F0           MOVX    @DPTR,A
   \   000129   A3           INC     DPTR
   \   00012A   7480         MOV     A,#-0x80
   \   00012C   801B         SJMP    ??parse_number_10
    379              }
    380              else
    381              {
    382                  item->valueint = (int)number;
   \                     ??parse_number_11:
   \   00012E   78..         MOV     R0,#?V0 + 4
   \   000130   12....       LCALL   ?FLT_TO_L
   \   000133   85..82       MOV     DPL,?V0 + 0
   \   000136   85..83       MOV     DPH,?V0 + 1
   \   000139   A3           INC     DPTR
   \   00013A   A3           INC     DPTR
   \   00013B   A3           INC     DPTR
   \   00013C   A3           INC     DPTR
   \   00013D   A3           INC     DPTR
   \   00013E   A3           INC     DPTR
   \   00013F   A3           INC     DPTR
   \   000140   A3           INC     DPTR
   \   000141   A3           INC     DPTR
   \   000142   A3           INC     DPTR
   \   000143   E5..         MOV     A,?V0 + 4
   \   000145   F0           MOVX    @DPTR,A
   \   000146   A3           INC     DPTR
   \   000147   E5..         MOV     A,?V0 + 5
    383              }
   \                     ??parse_number_10:
   \   000149   12....       LCALL   ?Subroutine95 & 0xFFFF
    384          
    385              item->type = cJSON_Number;
   \                     ??CrossCallReturnLabel_154:
   \   00014C   7408         MOV     A,#0x8
   \   00014E   12....       LCALL   ??Subroutine217_0 & 0xFFFF
    386          
    387              input_buffer->offset += (size_t)(after_end - (size_t)number_c_string);
   \                     ??CrossCallReturnLabel_560:
   \   000151   7402         MOV     A,#0x2
   \   000153   12....       LCALL   ?XSTACK_DISP0_8
   \   000156   C3           CLR     C
   \   000157   E4           CLR     A
   \   000158   9582         SUBB    A,DPL
   \   00015A   F8           MOV     R0,A
   \   00015B   E4           CLR     A
   \   00015C   9583         SUBB    A,DPH
   \   00015E   F9           MOV     R1,A
   \   00015F   85..82       MOV     DPL,?XSP + 0
   \   000162   85..83       MOV     DPH,?XSP + 1
   \   000165   12....       LCALL   ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   000168   A3           INC     DPTR
   \   000169   A3           INC     DPTR
   \   00016A   A3           INC     DPTR
   \   00016B   A3           INC     DPTR
   \   00016C   12....       LCALL   ?Subroutine55 & 0xFFFF
    388              return true;
   \                     ??CrossCallReturnLabel_83:
   \   00016F   7A01         MOV     R2,#0x1
   \                     ??parse_number_2:
   \   000171   7B00         MOV     R3,#0x0
   \   000173   7442         MOV     A,#0x42
   \   000175   02....       LJMP    ?Subroutine5 & 0xFFFF
    389          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine91:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                REQUIRE ??Subroutine153_0
   \   000001                ; // Fall through to label ??Subroutine153_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine153_0:
   \   000000   E8           MOV     A,R0
   \   000001   2401         ADD     A,#0x1
   \   000003   08           INC     R0
   \   000004   E9           MOV     A,R1
   \   000005   3400         ADDC    A,#0x0
   \   000007   F9           MOV     R1,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine81:
   \   000000   12....       LCALL   ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_215:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine140:
   \   000000   E582         MOV     A,DPL
   \   000002   28           ADD     A,R0
   \   000003   F582         MOV     DPL,A
   \   000005   E583         MOV     A,DPH
   \   000007   39           ADDC    A,R1
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   12....       LCALL   ?Subroutine137 & 0xFFFF
   \                     ??CrossCallReturnLabel_557:
   \   000007   8E82         MOV     DPL,R6
   \   000009   8F83         MOV     DPH,R7
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   2A           ADD     A,R2
   \   00000D   FA           MOV     R2,A
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   3B           ADDC    A,R3
   \   000011   FB           MOV     R3,A
   \   000012   EA           MOV     A,R2
   \   000013   28           ADD     A,R0
   \   000014   F582         MOV     DPL,A
   \   000016   EB           MOV     A,R3
   \   000017   39           ADDC    A,R1
   \   000018   F583         MOV     DPH,A
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine83:
   \   000000   E5..         MOV     A,?V0 + 0
   \   000002   240C         ADD     A,#0xc
   \   000004   12....       LCALL   ?Subroutine142 & 0xFFFF
   \                     ??CrossCallReturnLabel_651:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   28           ADD     A,R0
   \   000002   F0           MOVX    @DPTR,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   39           ADDC    A,R1
   \   000006   F0           MOVX    @DPTR,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   28           ADD     A,R0
   \   000002   F8           MOV     R0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   39           ADDC    A,R1
   \   000006   F9           MOV     R1,A
   \   000007   8E82         MOV     DPL,R6
   \   000009   8F83         MOV     DPH,R7
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine167_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function strtod
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine95:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?V0 + 0
   \   000004   85..83       MOV     DPH,?V0 + 1
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine142:
   \   000000   F582         MOV     DPL,A
   \   000002   E5..         MOV     A,?V0 + 1
   \   000004                REQUIRE ??Subroutine178_0
   \   000004                ; // Fall through to label ??Subroutine178_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine181_0:
   \   000000   12....       LCALL   ??Subroutine215_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_559:
   \   000003   C3           CLR     C
   \   000004   EC           MOV     A,R4
   \   000005   9A           SUBB    A,R2
   \   000006   ED           MOV     A,R5
   \   000007   9B           SUBB    A,R3
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine137:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine215_0
   \   000002                ; // Fall through to label ??Subroutine215_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine215_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine216_0
   \   000002                ; // Fall through to label ??Subroutine216_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine217_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E4           CLR     A
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine221_0
   \   000003                ; // Fall through to label ??Subroutine221_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine221_0:
   \   000000   7F0C         MOV     R7,#0xc
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    390          
    391          /* don't ask me, but the original cJSON_SetNumberValue returns an integer or double */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    392          CJSON_PUBLIC(double) cJSON_SetNumberHelper(cJSON *object, double number)
   \                     cJSON_SetNumberHelper:
    393          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   7410         MOV     A,#0x10
   \   000007   12....       LCALL   ?XSTACK_DISP0_8
   \   00000A   78..         MOV     R0,#?V0 + 4
   \   00000C   12....       LCALL   ?L_MOV_X
    394              if (number >= INT_MAX)
   \   00000F   90....       MOV     DPTR,#__Constant_46fffe00
   \   000012   78..         MOV     R0,#?V0 + 0
   \   000014   12....       LCALL   ?L_MOV_X
   \   000017   78..         MOV     R0,#?V0 + 4
   \   000019   79..         MOV     R1,#?V0 + 0
   \   00001B   12....       LCALL   ?FLT_GE
   \   00001E   5016         JNC     ??cJSON_SetNumberHelper_0
    395              {
    396                  object->valueint = INT_MAX;
   \   000020   8A82         MOV     DPL,R2
   \   000022   8B83         MOV     DPH,R3
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   74FF         MOV     A,#-0x1
   \   000030   F0           MOVX    @DPTR,A
   \   000031   A3           INC     DPTR
   \   000032   747F         MOV     A,#0x7f
   \   000034   804B         SJMP    ??cJSON_SetNumberHelper_1
    397              }
    398              else if (number <= (double)INT_MIN)
   \                     ??cJSON_SetNumberHelper_0:
   \   000036   90....       MOV     DPTR,#__Constant_c6fffffe
   \   000039   78..         MOV     R0,#?V0 + 0
   \   00003B   12....       LCALL   ?L_MOV_X
   \   00003E   78..         MOV     R0,#?V0 + 4
   \   000040   79..         MOV     R1,#?V0 + 0
   \   000042   12....       LCALL   ?FLT_LT
   \   000045   5015         JNC     ??cJSON_SetNumberHelper_2
    399              {
    400                  object->valueint = INT_MIN;
   \   000047   8A82         MOV     DPL,R2
   \   000049   8B83         MOV     DPH,R3
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   A3           INC     DPTR
   \   000051   A3           INC     DPTR
   \   000052   A3           INC     DPTR
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   E4           CLR     A
   \   000056   F0           MOVX    @DPTR,A
   \   000057   A3           INC     DPTR
   \   000058   7480         MOV     A,#-0x80
   \   00005A   8025         SJMP    ??cJSON_SetNumberHelper_1
    401              }
    402              else
    403              {
    404                  object->valueint = (int)number;
   \                     ??cJSON_SetNumberHelper_2:
   \   00005C   85....       MOV     ?V0 + 0,?V0 + 4
   \   00005F   85....       MOV     ?V0 + 1,?V0 + 5
   \   000062   85....       MOV     ?V0 + 2,?V0 + 6
   \   000065   85....       MOV     ?V0 + 3,?V0 + 7
   \   000068   78..         MOV     R0,#?V0 + 0
   \   00006A   12....       LCALL   ?FLT_TO_L
   \   00006D   8A82         MOV     DPL,R2
   \   00006F   8B83         MOV     DPH,R3
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   A3           INC     DPTR
   \   000074   A3           INC     DPTR
   \   000075   A3           INC     DPTR
   \   000076   A3           INC     DPTR
   \   000077   A3           INC     DPTR
   \   000078   A3           INC     DPTR
   \   000079   A3           INC     DPTR
   \   00007A   A3           INC     DPTR
   \   00007B   E5..         MOV     A,?V0 + 0
   \   00007D   F0           MOVX    @DPTR,A
   \   00007E   A3           INC     DPTR
   \   00007F   E5..         MOV     A,?V0 + 1
   \                     ??cJSON_SetNumberHelper_1:
   \   000081   F0           MOVX    @DPTR,A
    405              }
    406          
    407              return object->valuedouble = number;
   \   000082   EA           MOV     A,R2
   \   000083   240C         ADD     A,#0xc
   \   000085   F8           MOV     R0,A
   \   000086   EB           MOV     A,R3
   \   000087   3400         ADDC    A,#0x0
   \   000089   F9           MOV     R1,A
   \   00008A   E8           MOV     A,R0
   \   00008B   FA           MOV     R2,A
   \   00008C   E9           MOV     A,R1
   \   00008D   FB           MOV     R3,A
   \   00008E   8A82         MOV     DPL,R2
   \   000090   8B83         MOV     DPH,R3
   \   000092   78..         MOV     R0,#?V0 + 4
   \   000094   12....       LCALL   ?L_MOV_TO_X
   \   000097   8A82         MOV     DPL,R2
   \   000099   8B83         MOV     DPH,R3
   \   00009B   12....       LCALL   ?XLOAD_R2345
   \   00009E   02....       LJMP    ??Subroutine190_0 & 0xFFFF
    408          }
    409          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    410          CJSON_PUBLIC(char*) cJSON_SetValuestring(cJSON *object, const char *valuestring)
   \                     cJSON_SetValuestring:
    411          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
    412              char *copy = NULL;
    413              /* if object's type is not cJSON_String or is cJSON_IsReference, it should not set valuestring */
    414              if (!(object->type & cJSON_String) || (object->type & cJSON_IsReference))
   \   00000D   8A82         MOV     DPL,R2
   \   00000F   8B83         MOV     DPH,R3
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   5410         ANL     A,#0x10
   \   00001A   F8           MOV     R0,A
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   5401         ANL     A,#0x1
   \   00001F   F9           MOV     R1,A
   \   000020   7410         MOV     A,#0x10
   \   000022   68           XRL     A,R0
   \   000023   7001         JNZ     ??cJSON_SetValuestring_0
   \   000025   E9           MOV     A,R1
   \                     ??cJSON_SetValuestring_0:
   \   000026   6007         JZ      ??cJSON_SetValuestring_1
    415              {
    416                  return NULL;
   \                     ??cJSON_SetValuestring_2:
   \   000028   7A00         MOV     R2,#0x0
   \   00002A   7B00         MOV     R3,#0x0
   \   00002C   02....       LJMP    ??cJSON_SetValuestring_3 & 0xFFFF
    417              }
    418              if (strlen(valuestring) <= strlen(object->valuestring))
   \                     ??cJSON_SetValuestring_1:
   \   00002F                ; Setup parameters for call to function strlen
   \   00002F   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   000032   8A..         MOV     ?V0 + 2,R2
   \   000034   8B..         MOV     ?V0 + 3,R3
   \   000036                ; Setup parameters for call to function strlen
   \   000036   EE           MOV     A,R6
   \   000037   FA           MOV     R2,A
   \   000038   EF           MOV     A,R7
   \   000039   FB           MOV     R3,A
   \   00003A   12....       LCALL   ??strlen?relay
   \   00003D   8A..         MOV     ?V0 + 4,R2
   \   00003F   8B..         MOV     ?V0 + 5,R3
   \   000041   C3           CLR     C
   \   000042   E5..         MOV     A,?V0 + 2
   \   000044   95..         SUBB    A,?V0 + 4
   \   000046   E5..         MOV     A,?V0 + 3
   \   000048   95..         SUBB    A,?V0 + 5
   \   00004A   4021         JC      ??cJSON_SetValuestring_4
    419              {
    420                  strcpy(object->valuestring, valuestring);
   \   00004C   12....       LCALL   ?Subroutine113 & 0xFFFF
   \                     ??CrossCallReturnLabel_177:
   \   00004F   88..         MOV     ?V0 + 0,R0
   \   000051   89..         MOV     ?V0 + 1,R1
   \   000053                ; Setup parameters for call to function strcpy
   \   000053   EE           MOV     A,R6
   \   000054   FC           MOV     R4,A
   \   000055   EF           MOV     A,R7
   \   000056   FD           MOV     R5,A
   \   000057   8882         MOV     DPL,R0
   \   000059   8983         MOV     DPH,R1
   \   00005B   12....       LCALL   ??Subroutine195_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_405:
   \   00005E   12....       LCALL   ??strcpy?relay
    421                  return object->valuestring;
   \   000061   85..82       MOV     DPL,?V0 + 0
   \   000064   85..83       MOV     DPH,?V0 + 1
   \   000067   E0           MOVX    A,@DPTR
   \   000068   FA           MOV     R2,A
   \   000069   A3           INC     DPTR
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   8049         SJMP    ??cJSON_SetValuestring_5
    422              }
    423              copy = (char*) cJSON_strdup((const unsigned char*)valuestring, &global_hooks);
   \                     ??cJSON_SetValuestring_4:
   \   00006D                ; Setup parameters for call to function cJSON_strdup
   \   00006D   7C..         MOV     R4,#global_hooks & 0xff
   \   00006F   7D..         MOV     R5,#(global_hooks >> 8) & 0xff
   \   000071   EE           MOV     A,R6
   \   000072   FA           MOV     R2,A
   \   000073   EF           MOV     A,R7
   \   000074   FB           MOV     R3,A
   \   000075   12....       LCALL   ??cJSON_strdup?relay
   \   000078   8A..         MOV     ?V0 + 2,R2
   \   00007A   8B..         MOV     ?V0 + 3,R3
   \   00007C   AE..         MOV     R6,?V0 + 2
   \   00007E   AF..         MOV     R7,?V0 + 3
    424              if (copy == NULL)
   \   000080   EE           MOV     A,R6
   \   000081   4F           ORL     A,R7
   \   000082   60A4         JZ      ??cJSON_SetValuestring_2
    425              {
    426                  return NULL;
    427              }
    428              if (object->valuestring != NULL)
   \   000084   85..82       MOV     DPL,?V0 + 0
   \   000087   85..83       MOV     DPH,?V0 + 1
   \   00008A   12....       LCALL   ??Subroutine202_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_498:
   \   00008D   6011         JZ      ??CrossCallReturnLabel_104
    429              {
    430                  cJSON_free(object->valuestring);
   \   00008F                ; Setup parameters for call to function cJSON_free
   \   00008F   85..82       MOV     DPL,?V0 + 0
   \   000092   85..83       MOV     DPH,?V0 + 1
   \   000095   A3           INC     DPTR
   \   000096   A3           INC     DPTR
   \   000097   A3           INC     DPTR
   \   000098   A3           INC     DPTR
   \   000099   A3           INC     DPTR
   \   00009A   A3           INC     DPTR
   \   00009B   A3           INC     DPTR
   \   00009C   A3           INC     DPTR
   \   00009D   12....       LCALL   ?Subroutine67 & 0xFFFF
    431              }
    432              object->valuestring = copy;
   \                     ??CrossCallReturnLabel_104:
   \   0000A0   85..82       MOV     DPL,?V0 + 0
   \   0000A3   85..83       MOV     DPH,?V0 + 1
   \   0000A6   A3           INC     DPTR
   \   0000A7   A3           INC     DPTR
   \   0000A8   A3           INC     DPTR
   \   0000A9   A3           INC     DPTR
   \   0000AA   A3           INC     DPTR
   \   0000AB   A3           INC     DPTR
   \   0000AC   A3           INC     DPTR
   \   0000AD   A3           INC     DPTR
   \   0000AE   EE           MOV     A,R6
   \   0000AF   F0           MOVX    @DPTR,A
   \   0000B0   A3           INC     DPTR
   \   0000B1   EF           MOV     A,R7
   \   0000B2   F0           MOVX    @DPTR,A
    433          
    434              return copy;
   \   0000B3   EE           MOV     A,R6
   \   0000B4   FA           MOV     R2,A
   \   0000B5   EF           MOV     A,R7
   \                     ??cJSON_SetValuestring_5:
   \   0000B6   FB           MOV     R3,A
   \                     ??cJSON_SetValuestring_3:
   \   0000B7   02....       LJMP    ??Subroutine192_0 & 0xFFFF
    435          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   12....       LCALL   ?Subroutine137 & 0xFFFF
   \                     ??CrossCallReturnLabel_558:
   \   00000B   12....       LCALL   ??strlen?relay
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine113:
   \   000000   E5..         MOV     A,?V0 + 0
   \   000002   2408         ADD     A,#0x8
   \   000004   F8           MOV     R0,A
   \   000005   E5..         MOV     A,?V0 + 1
   \   000007   3400         ADDC    A,#0x0
   \   000009   F9           MOV     R1,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   12....       LCALL   ??Subroutine216_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_552:
   \   000003   12....       LCALL   ??cJSON_free?relay
   \   000006   22           RET
    436          
    437          typedef struct
    438          {
    439              unsigned char *buffer;
    440              size_t length;
    441              size_t offset;
    442              size_t depth; /* current nesting depth (for formatted printing) */
    443              cJSON_bool noalloc;
    444              cJSON_bool format; /* is this print a formatted print */
    445              internal_hooks hooks;
    446          } printbuffer;
    447          
    448          /* realloc printbuffer if necessary to have at least "needed" bytes more */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    449          static unsigned char* ensure(printbuffer * const p, size_t needed)
   \                     ensure:
    450          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
    451              unsigned char *newbuffer = NULL;
    452              size_t newsize = 0;
    453          
    454              if ((p == NULL) || (p->buffer == NULL))
   \   000009   EA           MOV     A,R2
   \   00000A   45..         ORL     A,?V0 + 1
   \   00000C   6009         JZ      ??ensure_0
   \   00000E   8A82         MOV     DPL,R2
   \   000010   8B83         MOV     DPH,R3
   \   000012   12....       LCALL   ??Subroutine205_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_461:
   \   000015   7007         JNZ     ??ensure_1
    455              {
    456                  return NULL;
   \                     ??ensure_0:
   \   000017   7A00         MOV     R2,#0x0
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   02....       LJMP    ??ensure_2 & 0xFFFF
    457              }
    458          
    459              if ((p->length > 0) && (p->offset >= p->length))
   \                     ??ensure_1:
   \   00001E   8A82         MOV     DPL,R2
   \   000020   8B83         MOV     DPH,R3
   \   000022   12....       LCALL   ??Subroutine204_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_488:
   \   000025   600D         JZ      ??ensure_3
   \   000027   8A82         MOV     DPL,R2
   \   000029   8B83         MOV     DPH,R3
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000032   50E3         JNC     ??ensure_0
    460              {
    461                  /* make sure that offset is valid */
    462                  return NULL;
    463              }
    464          
    465              if (needed > INT_MAX)
   \                     ??ensure_3:
   \   000034   C3           CLR     C
   \   000035   ED           MOV     A,R5
   \   000036   9480         SUBB    A,#-0x80
   \   000038   50DD         JNC     ??ensure_0
    466              {
    467                  /* sizes bigger than INT_MAX are currently not supported */
    468                  return NULL;
    469              }
    470          
    471              needed += p->offset + 1;
   \   00003A   8A82         MOV     DPL,R2
   \   00003C   8B83         MOV     DPH,R3
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000045   EC           MOV     A,R4
   \   000046   28           ADD     A,R0
   \   000047   FC           MOV     R4,A
   \   000048   ED           MOV     A,R5
   \   000049   39           ADDC    A,R1
   \   00004A   FD           MOV     R5,A
    472              if (needed <= p->length)
   \   00004B   8A82         MOV     DPL,R2
   \   00004D   8B83         MOV     DPH,R3
   \   00004F   A3           INC     DPTR
   \   000050   A3           INC     DPTR
   \   000051   C3           CLR     C
   \   000052   E0           MOVX    A,@DPTR
   \   000053   9C           SUBB    A,R4
   \   000054   A3           INC     DPTR
   \   000055   E0           MOVX    A,@DPTR
   \   000056   9D           SUBB    A,R5
   \   000057   8A82         MOV     DPL,R2
   \   000059   8B83         MOV     DPH,R3
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   4007         JC      ??ensure_4
    473              {
    474                  return p->buffer + p->offset;
   \   000061   18           DEC     R0
   \   000062   12....       LCALL   ?Subroutine52 & 0xFFFF
    475              }
   \                     ??CrossCallReturnLabel_79:
   \   000065   02....       LJMP    ??ensure_5 & 0xFFFF
    476          
    477              if (p->noalloc) {
   \                     ??ensure_4:
   \   000068   12....       LCALL   ??Subroutine203_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_490:
   \   00006B   70AA         JNZ     ??ensure_0
    478                  return NULL;
    479              }
    480          
    481              /* calculate new buffer size */
    482              if (needed > (INT_MAX / 2))
   \   00006D   C3           CLR     C
   \   00006E   ED           MOV     A,R5
   \   00006F   9440         SUBB    A,#0x40
   \   000071   400C         JC      ??ensure_6
    483              {
    484                  /* overflow of int, use INT_MAX if possible */
    485                  if (needed <= INT_MAX)
   \   000073   C3           CLR     C
   \   000074   ED           MOV     A,R5
   \   000075   9480         SUBB    A,#-0x80
   \   000077   509E         JNC     ??ensure_0
    486                  {
    487                      newsize = INT_MAX;
   \   000079   7EFF         MOV     R6,#-0x1
   \   00007B   7F7F         MOV     R7,#0x7f
   \   00007D   800B         SJMP    ??ensure_7
    488                  }
    489                  else
    490                  {
    491                      return NULL;
    492                  }
    493              }
    494              else
    495              {
    496                  newsize = needed * 2;
   \                     ??ensure_6:
   \   00007F   EC           MOV     A,R4
   \   000080   C3           CLR     C
   \   000081   33           RLC     A
   \   000082   FC           MOV     R4,A
   \   000083   ED           MOV     A,R5
   \   000084   33           RLC     A
   \   000085   FD           MOV     R5,A
   \   000086   EC           MOV     A,R4
   \   000087   FE           MOV     R6,A
   \   000088   ED           MOV     A,R5
   \   000089   FF           MOV     R7,A
    497              }
    498          
    499              if (p->hooks.reallocate != NULL)
   \                     ??ensure_7:
   \   00008A   EA           MOV     A,R2
   \   00008B   12....       LCALL   ??Subroutine231_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_639:
   \   00008E   EB           MOV     A,R3
   \   00008F   12....       LCALL   ??Subroutine180_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_352:
   \   000092   12....       LCALL   ??Subroutine205_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_462:
   \   000095   6034         JZ      ??ensure_8
    500              {
    501                  /* reallocate with realloc if available */
    502                  newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
   \   000097                ; Setup parameters for indirect call
   \   000097   EE           MOV     A,R6
   \   000098   FC           MOV     R4,A
   \   000099   EF           MOV     A,R7
   \   00009A   FD           MOV     R5,A
   \   00009B   8A82         MOV     DPL,R2
   \   00009D   8B83         MOV     DPH,R3
   \   00009F   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   0000A2   12....       LCALL   ?Subroutine149 & 0xFFFF
   \                     ??CrossCallReturnLabel_606:
   \   0000A5   12....       LCALL   ?CALL_IND
   \   0000A8   8A..         MOV     ?V0 + 2,R2
   \   0000AA   8B..         MOV     ?V0 + 3,R3
    503                  if (newbuffer == NULL)
   \   0000AC   EA           MOV     A,R2
   \   0000AD   45..         ORL     A,?V0 + 3
   \   0000AF   705C         JNZ     ??ensure_9
    504                  {
    505                      p->hooks.deallocate(p->buffer);
   \                     ??ensure_10:
   \   0000B1                ; Setup parameters for indirect call
   \   0000B1   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   0000B4   12....       LCALL   ?CALL_IND
    506                      p->length = 0;
   \   0000B7   85..82       MOV     DPL,?V0 + 0
   \   0000BA   85..83       MOV     DPH,?V0 + 1
   \   0000BD   A3           INC     DPTR
   \   0000BE   A3           INC     DPTR
   \   0000BF   E4           CLR     A
   \   0000C0   F0           MOVX    @DPTR,A
   \   0000C1   A3           INC     DPTR
   \   0000C2   12....       LCALL   ??Subroutine163_0 & 0xFFFF
    507                      p->buffer = NULL;
    508          
    509                      return NULL;
    510                  }
    511              }
   \                     ??CrossCallReturnLabel_250:
   \   0000C5   F0           MOVX    @DPTR,A
   \   0000C6   A3           INC     DPTR
   \   0000C7   F0           MOVX    @DPTR,A
   \   0000C8   02....       LJMP    ??ensure_0 & 0xFFFF
    512              else
    513              {
    514                  /* otherwise reallocate manually */
    515                  newbuffer = (unsigned char*)p->hooks.allocate(newsize);
   \                     ??ensure_8:
   \   0000CB                ; Setup parameters for indirect call
   \   0000CB   EE           MOV     A,R6
   \   0000CC   FA           MOV     R2,A
   \   0000CD   EF           MOV     A,R7
   \   0000CE   FB           MOV     R3,A
   \   0000CF   12....       LCALL   ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_140:
   \   0000D2   12....       LCALL   ??Subroutine164_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_257:
   \   0000D5   12....       LCALL   ?CALL_IND
   \   0000D8   8A..         MOV     ?V0 + 2,R2
   \   0000DA   8B..         MOV     ?V0 + 3,R3
    516                  if (!newbuffer)
   \   0000DC   EA           MOV     A,R2
   \   0000DD   45..         ORL     A,?V0 + 3
   \   0000DF   60D0         JZ      ??ensure_10
    517                  {
    518                      p->hooks.deallocate(p->buffer);
    519                      p->length = 0;
    520                      p->buffer = NULL;
    521          
    522                      return NULL;
    523                  }
    524          
    525                  memcpy(newbuffer, p->buffer, p->offset + 1);
   \   0000E1                ; Setup parameters for call to function memcpy
   \   0000E1   85..82       MOV     DPL,?V0 + 0
   \   0000E4   85..83       MOV     DPH,?V0 + 1
   \   0000E7   A3           INC     DPTR
   \   0000E8   A3           INC     DPTR
   \   0000E9   A3           INC     DPTR
   \   0000EA   A3           INC     DPTR
   \   0000EB   E0           MOVX    A,@DPTR
   \   0000EC   2401         ADD     A,#0x1
   \   0000EE   F5..         MOV     ?V0 + 4,A
   \   0000F0   A3           INC     DPTR
   \   0000F1   E0           MOVX    A,@DPTR
   \   0000F2   3400         ADDC    A,#0x0
   \   0000F4   F5..         MOV     ?V0 + 5,A
   \   0000F6   78..         MOV     R0,#?V0 + 4
   \   0000F8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000FB   85..82       MOV     DPL,?V0 + 0
   \   0000FE   85..83       MOV     DPH,?V0 + 1
   \   000101   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   000104   12....       LCALL   ?DEALLOC_XSTACK8
    526                  p->hooks.deallocate(p->buffer);
   \   000107                ; Setup parameters for indirect call
   \   000107   12....       LCALL   ?Subroutine26 & 0xFFFF
    527              }
   \                     ??CrossCallReturnLabel_29:
   \   00010A   12....       LCALL   ?CALL_IND
    528              p->length = newsize;
   \                     ??ensure_9:
   \   00010D   85..82       MOV     DPL,?V0 + 0
   \   000110   85..83       MOV     DPH,?V0 + 1
   \   000113   12....       LCALL   ?Subroutine99 & 0xFFFF
    529              p->buffer = newbuffer;
   \                     ??CrossCallReturnLabel_248:
   \   000116   E5..         MOV     A,?V0 + 2
   \   000118   F0           MOVX    @DPTR,A
   \   000119   A3           INC     DPTR
   \   00011A   E5..         MOV     A,?V0 + 3
   \   00011C   12....       LCALL   ??Subroutine163_0 & 0xFFFF
    530          
    531              return newbuffer + p->offset;
   \                     ??CrossCallReturnLabel_251:
   \   00011F   A3           INC     DPTR
   \   000120   A3           INC     DPTR
   \   000121   12....       LCALL   ??Subroutine229_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_618:
   \   000124   E5..         MOV     A,?V0 + 2
   \   000126   28           ADD     A,R0
   \   000127   FA           MOV     R2,A
   \   000128   E5..         MOV     A,?V0 + 3
   \                     ??ensure_5:
   \   00012A   39           ADDC    A,R1
   \   00012B   FB           MOV     R3,A
   \                     ??ensure_2:
   \   00012C   02....       LJMP    ??Subroutine192_0 & 0xFFFF
    532          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   85..82       MOV     DPL,?V0 + 0
   \   000003   85..83       MOV     DPH,?V0 + 1
   \   000006   12....       LCALL   ??Subroutine216_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_549:
   \   000009   E5..         MOV     A,?V0 + 0
   \   00000B   240E         ADD     A,#0xe
   \   00000D   12....       LCALL   ?Subroutine142 & 0xFFFF
   \                     ??CrossCallReturnLabel_649:
   \   000010   12....       LCALL   ?Subroutine129 & 0xFFFF
   \                     ??CrossCallReturnLabel_280:
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   F9           MOV     R1,A
   \   000003   8A82         MOV     DPL,R2
   \   000005   8B83         MOV     DPH,R3
   \   000007   E0           MOVX    A,@DPTR
   \   000008   28           ADD     A,R0
   \   000009   FA           MOV     R2,A
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine99:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   EE           MOV     A,R6
   \   000003   F0           MOVX    @DPTR,A
   \   000004   A3           INC     DPTR
   \   000005   EF           MOV     A,R7
   \   000006                REQUIRE ??Subroutine163_0
   \   000006                ; // Fall through to label ??Subroutine163_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine163_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?V0 + 0
   \   000004   85..83       MOV     DPH,?V0 + 1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   12....       LCALL   ?Subroutine143 & 0xFFFF
   \                     ??CrossCallReturnLabel_286:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   12....       LCALL   ?Subroutine131 & 0xFFFF
   \                     ??CrossCallReturnLabel_206:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine131:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2401         ADD     A,#0x1
   \   000003   F8           MOV     R0,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   3400         ADDC    A,#0x0
   \   000008   F9           MOV     R1,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   C3           CLR     C
   \   000001   E0           MOVX    A,@DPTR
   \   000002   98           SUBB    A,R0
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   99           SUBB    A,R1
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   12....       LCALL   ??Subroutine216_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_550:
   \   000003   E5..         MOV     A,?V0 + 0
   \   000005   2410         ADD     A,#0x10
   \   000007   12....       LCALL   ?Subroutine142 & 0xFFFF
   \                     ??CrossCallReturnLabel_650:
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine229_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine230_0
   \   000002                ; // Fall through to label ??Subroutine230_0
    533          
    534          /* calculate the new length of the string in a printbuffer and update the offset */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    535          static void update_offset(printbuffer * const buffer)
   \                     update_offset:
    536          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    537              const unsigned char *buffer_pointer = NULL;
    538              if ((buffer == NULL) || (buffer->buffer == NULL))
   \   000005   EA           MOV     A,R2
   \   000006   4B           ORL     A,R3
   \   000007   6032         JZ      ??CrossCallReturnLabel_84
   \   000009   8A82         MOV     DPL,R2
   \   00000B   8B83         MOV     DPH,R3
   \   00000D   12....       LCALL   ??Subroutine205_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_463:
   \   000010   6029         JZ      ??CrossCallReturnLabel_84
    539              {
    540                  return;
    541              }
    542              buffer_pointer = buffer->buffer + buffer->offset;
    543          
    544              buffer->offset += strlen((const char*)buffer_pointer);
   \   000012   EA           MOV     A,R2
   \   000013   2404         ADD     A,#0x4
   \   000015   F8           MOV     R0,A
   \   000016   EB           MOV     A,R3
   \   000017   3400         ADDC    A,#0x0
   \   000019   F9           MOV     R1,A
   \   00001A   E8           MOV     A,R0
   \   00001B   FE           MOV     R6,A
   \   00001C   E9           MOV     A,R1
   \   00001D   FF           MOV     R7,A
   \   00001E                ; Setup parameters for call to function strlen
   \   00001E   8E82         MOV     DPL,R6
   \   000020   8F83         MOV     DPH,R7
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F8           MOV     R0,A
   \   000024   12....       LCALL   ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000027   39           ADDC    A,R1
   \   000028   FB           MOV     R3,A
   \   000029   12....       LCALL   ??strlen?relay
   \   00002C   8A..         MOV     ?V0 + 0,R2
   \   00002E   8B..         MOV     ?V0 + 1,R3
   \   000030   A8..         MOV     R0,?V0 + 0
   \   000032   A9..         MOV     R1,?V0 + 1
   \   000034   8E82         MOV     DPL,R6
   \   000036   8F83         MOV     DPH,R7
   \   000038   12....       LCALL   ?Subroutine55 & 0xFFFF
    545          }
   \                     ??CrossCallReturnLabel_84:
   \   00003B   02....       LJMP    ??Subroutine162_0 & 0xFFFF
    546          
    547          /* securely comparison of floating-point variables */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    548          static cJSON_bool compare_double(double a, double b)
   \                     compare_double:
    549          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   8C..         MOV     ?V0 + 2,R4
   \   00000B   8D..         MOV     ?V0 + 3,R5
   \   00000D   7418         MOV     A,#0x18
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   78..         MOV     R0,#?V0 + 4
   \   000014   12....       LCALL   ?L_MOV_X
    550              double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
   \   000017   85....       MOV     ?V0 + 8,?V0 + 4
   \   00001A   85....       MOV     ?V0 + 9,?V0 + 5
   \   00001D   85....       MOV     ?V0 + 10,?V0 + 6
   \   000020   85....       MOV     ?V0 + 11,?V0 + 7
   \   000023   E5..         MOV     A,?V0 + 11
   \   000025   C2E7         CLR     0xE0 /* A   */.7
   \   000027   F5..         MOV     ?V0 + 11,A
   \   000029   8A..         MOV     ?V0 + 12,R2
   \   00002B   8B..         MOV     ?V0 + 13,R3
   \   00002D   8C..         MOV     ?V0 + 14,R4
   \   00002F   ED           MOV     A,R5
   \   000030   C2E7         CLR     0xE0 /* A   */.7
   \   000032   F5..         MOV     ?V0 + 15,A
   \   000034   78..         MOV     R0,#?V0 + 8
   \   000036   79..         MOV     R1,#?V0 + 12
   \   000038   12....       LCALL   ?FLT_LT
   \   00003B   5009         JNC     ??compare_double_0
   \   00003D   8A..         MOV     ?V0 + 8,R2
   \   00003F   8B..         MOV     ?V0 + 9,R3
   \   000041   8C..         MOV     ?V0 + 10,R4
   \   000043   ED           MOV     A,R5
   \   000044   8005         SJMP    ??compare_double_1
   \                     ??compare_double_0:
   \   000046   85....       MOV     ?V0 + 11,?V0 + 7
   \   000049   E5..         MOV     A,?V0 + 11
   \                     ??compare_double_1:
   \   00004B   C2E7         CLR     0xE0 /* A   */.7
   \   00004D   F5..         MOV     ?V0 + 11,A
    551              return (fabs(a - b) <= maxVal * DBL_EPSILON);
   \   00004F   90....       MOV     DPTR,#__Constant_34000000
   \   000052   78..         MOV     R0,#?V0 + 12
   \   000054   12....       LCALL   ?L_MOV_X
   \   000057   78..         MOV     R0,#?V0 + 8
   \   000059   79..         MOV     R1,#?V0 + 12
   \   00005B   12....       LCALL   ?FLT_MUL
   \   00005E   78..         MOV     R0,#?V0 + 0
   \   000060   79..         MOV     R1,#?V0 + 4
   \   000062   12....       LCALL   ?FLT_SUB
   \   000065   E5..         MOV     A,?V0 + 3
   \   000067   C2E7         CLR     0xE0 /* A   */.7
   \   000069   F5..         MOV     ?V0 + 3,A
   \   00006B   78..         MOV     R0,#?V0 + 8
   \   00006D   79..         MOV     R1,#?V0 + 0
   \   00006F   12....       LCALL   ?FLT_GE
   \   000072   5004         JNC     ??compare_double_2
   \   000074   D2F0         SETB    B.0
   \   000076   8002         SJMP    ??compare_double_3
   \                     ??compare_double_2:
   \   000078   C2F0         CLR     B.0
   \                     ??compare_double_3:
   \   00007A   A2F0         MOV     C,B.0
   \   00007C   E4           CLR     A
   \   00007D   33           RLC     A
   \   00007E   FA           MOV     R2,A
   \   00007F   7B00         MOV     R3,#0x0
   \   000081   7F10         MOV     R7,#0x10
   \   000083   02....       LJMP    ?BANKED_LEAVE_XDATA
    552          }
    553          
    554          /* Render the number nicely from the given item into a string. */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    555          static cJSON_bool print_number(const cJSON * const item, printbuffer * const output_buffer)
   \                     print_number:
    556          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 30
   \   000005   74E2         MOV     A,#-0x1e
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 0,R2
   \   00000C   8B..         MOV     ?V0 + 1,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
    557              unsigned char *output_pointer = NULL;
    558              double d = item->valuedouble;
   \   000012   12....       LCALL   ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_145:
   \   000015   78..         MOV     R0,#?V0 + 4
   \   000017   12....       LCALL   ?L_MOV_X
    559              int length = 0;
    560              size_t i = 0;
    561              unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
   \   00001A   7404         MOV     A,#0x4
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   AC82         MOV     R4,DPL
   \   000021   AD83         MOV     R5,DPH
   \   000023   7583..       MOV     DPH,#(`?<Constant {0}>` >> 8) & 0xff
   \   000026   7582..       MOV     DPL,#`?<Constant {0}>` & 0xff
   \   000029   741A         MOV     A,#0x1a
   \   00002B   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    562              unsigned char decimal_point = get_decimal_point();
    563              double test = 0.0;
   \   00002E   90....       MOV     DPTR,#__Constant_0
   \   000031   12....       LCALL   ?XLOAD_R2345
   \   000034   85..82       MOV     DPL,?XSP + 0
   \   000037   85..83       MOV     DPH,?XSP + 1
   \   00003A   12....       LCALL   ?XSTORE_R2345
    564          
    565              if (output_buffer == NULL)
   \   00003D   EE           MOV     A,R6
   \   00003E   4F           ORL     A,R7
   \   00003F   7005         JNZ     ??print_number_0
    566              {
    567                  return false;
   \                     ??print_number_1:
   \   000041   7A00         MOV     R2,#0x0
   \   000043   02....       LJMP    ??print_number_2 & 0xFFFF
    568              }
    569          
    570              /* This checks for NaN and Infinity */
    571              if (isnan(d) || isinf(d))
   \                     ??print_number_0:
   \   000046   78..         MOV     R0,#?V0 + 4
   \   000048   79..         MOV     R1,#?V0 + 4
   \   00004A   12....       LCALL   ?FLT_EQ
   \   00004D   701C         JNZ     ??print_number_3
   \   00004F   85....       MOV     ?V0 + 8,?V0 + 4
   \   000052   85....       MOV     ?V0 + 9,?V0 + 5
   \   000055   85....       MOV     ?V0 + 10,?V0 + 6
   \   000058   85....       MOV     ?V0 + 11,?V0 + 7
   \   00005B   78..         MOV     R0,#?V0 + 8
   \   00005D   79..         MOV     R1,#?V0 + 4
   \   00005F   12....       LCALL   ?FLT_SUB
   \   000062   78..         MOV     R0,#?V0 + 8
   \   000064   79..         MOV     R1,#?V0 + 8
   \   000066   12....       LCALL   ?FLT_EQ
   \   000069   6013         JZ      ??print_number_4
    572              {
    573                  length = sprintf((char*)number_buffer, "null");
   \                     ??print_number_3:
   \   00006B                ; Setup parameters for call to function sprintf
   \   00006B   7C..         MOV     R4,#`?<Constant "null">` & 0xff
   \   00006D   7D..         MOV     R5,#(`?<Constant "null">` >> 8) & 0xff
   \   00006F   7404         MOV     A,#0x4
   \   000071   12....       LCALL   ?XSTACK_DISP0_8
   \   000074   AA82         MOV     R2,DPL
   \   000076   AB83         MOV     R3,DPH
   \   000078   12....       LCALL   ??sprintf?relay
   \   00007B   02....       LJMP    ??print_number_5 & 0xFFFF
    574              }
    575          	else if(d == (double)item->valueint)
   \                     ??print_number_4:
   \   00007E   85..82       MOV     DPL,?V0 + 0
   \   000081   85..83       MOV     DPH,?V0 + 1
   \   000084   A3           INC     DPTR
   \   000085   A3           INC     DPTR
   \   000086   A3           INC     DPTR
   \   000087   A3           INC     DPTR
   \   000088   A3           INC     DPTR
   \   000089   A3           INC     DPTR
   \   00008A   A3           INC     DPTR
   \   00008B   A3           INC     DPTR
   \   00008C   A3           INC     DPTR
   \   00008D   A3           INC     DPTR
   \   00008E   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000091   12....       LCALL   ?L_TO_FLT
   \   000094   78..         MOV     R0,#?V0 + 4
   \   000096   79..         MOV     R1,#?V0 + 8
   \   000098   12....       LCALL   ?FLT_EQ
   \   00009B   702B         JNZ     ??print_number_6
    576          	{
    577          		length = sprintf((char*)number_buffer, "%d", item->valueint);
   \   00009D                ; Setup parameters for call to function sprintf
   \   00009D   85..82       MOV     DPL,?V0 + 0
   \   0000A0   85..83       MOV     DPH,?V0 + 1
   \   0000A3   A3           INC     DPTR
   \   0000A4   A3           INC     DPTR
   \   0000A5   A3           INC     DPTR
   \   0000A6   A3           INC     DPTR
   \   0000A7   A3           INC     DPTR
   \   0000A8   A3           INC     DPTR
   \   0000A9   A3           INC     DPTR
   \   0000AA   A3           INC     DPTR
   \   0000AB   A3           INC     DPTR
   \   0000AC   A3           INC     DPTR
   \   0000AD   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0000B0   7C..         MOV     R4,#`?<Constant "%d">` & 0xff
   \   0000B2   7D..         MOV     R5,#(`?<Constant "%d">` >> 8) & 0xff
   \   0000B4   7406         MOV     A,#0x6
   \   0000B6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B9   AA82         MOV     R2,DPL
   \   0000BB   AB83         MOV     R3,DPH
   \   0000BD   12....       LCALL   ??sprintf?relay
   \   0000C0   7402         MOV     A,#0x2
   \   0000C2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C5   02....       LJMP    ??print_number_5 & 0xFFFF
    578          	}
    579              else
    580              {
    581                  /* Try 15 decimal places of precision to avoid nonsignificant nonzero digits */
    582                  length = sprintf((char*)number_buffer, "%1.15g", d);
   \                     ??print_number_6:
   \   0000C8                ; Setup parameters for call to function sprintf
   \   0000C8   78..         MOV     R0,#?V0 + 4
   \   0000CA   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   0000CD   7C..         MOV     R4,#`?<Constant "%1.15g">` & 0xff
   \   0000CF   7D..         MOV     R5,#(`?<Constant "%1.15g">` >> 8) & 0xff
   \   0000D1   7408         MOV     A,#0x8
   \   0000D3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D6   AA82         MOV     R2,DPL
   \   0000D8   AB83         MOV     R3,DPH
   \   0000DA   12....       LCALL   ??sprintf?relay
   \   0000DD   7404         MOV     A,#0x4
   \   0000DF   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E2   8A..         MOV     ?V0 + 0,R2
   \   0000E4   8B..         MOV     ?V0 + 1,R3
    583          
    584                  /* Check whether the original double can be recovered */
    585                  if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
   \   0000E6                ; Setup parameters for call to function sscanf
   \   0000E6   85..82       MOV     DPL,?XSP + 0
   \   0000E9   85..83       MOV     DPH,?XSP + 1
   \   0000EC   8582..       MOV     ?V0 + 2,DPL
   \   0000EF   8583..       MOV     ?V0 + 3,DPH
   \   0000F2   78..         MOV     R0,#?V0 + 2
   \   0000F4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F7   7C..         MOV     R4,#`?<Constant "%lg">` & 0xff
   \   0000F9   7D..         MOV     R5,#(`?<Constant "%lg">` >> 8) & 0xff
   \   0000FB   7406         MOV     A,#0x6
   \   0000FD   12....       LCALL   ?XSTACK_DISP0_8
   \   000100   AA82         MOV     R2,DPL
   \   000102   AB83         MOV     R3,DPH
   \   000104   12....       LCALL   ??sscanf?relay
   \   000107   7402         MOV     A,#0x2
   \   000109   12....       LCALL   ?DEALLOC_XSTACK8
   \   00010C   8A..         MOV     ?V0 + 2,R2
   \   00010E   7401         MOV     A,#0x1
   \   000110   65..         XRL     A,?V0 + 2
   \   000112   7001         JNZ     ??print_number_7
   \   000114   EB           MOV     A,R3
   \                     ??print_number_7:
   \   000115   701C         JNZ     ??print_number_8
   \   000117                ; Setup parameters for call to function compare_double
   \   000117   78..         MOV     R0,#?V0 + 4
   \   000119   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   00011C   7404         MOV     A,#0x4
   \   00011E   12....       LCALL   ?XSTACK_DISP0_8
   \   000121   12....       LCALL   ?XLOAD_R2345
   \   000124   12....       LCALL   ??compare_double?relay
   \   000127   7404         MOV     A,#0x4
   \   000129   12....       LCALL   ?DEALLOC_XSTACK8
   \   00012C   8B..         MOV     ?V0 + 3,R3
   \   00012E   EA           MOV     A,R2
   \   00012F   45..         ORL     A,?V0 + 3
   \   000131   701E         JNZ     ??print_number_9
    586                  {
    587                      /* If not, print with 17 decimal places of precision */
    588                      length = sprintf((char*)number_buffer, "%1.17g", d);
   \                     ??print_number_8:
   \   000133                ; Setup parameters for call to function sprintf
   \   000133   78..         MOV     R0,#?V0 + 4
   \   000135   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000138   7C..         MOV     R4,#`?<Constant "%1.17g">` & 0xff
   \   00013A   7D..         MOV     R5,#(`?<Constant "%1.17g">` >> 8) & 0xff
   \   00013C   7408         MOV     A,#0x8
   \   00013E   12....       LCALL   ?XSTACK_DISP0_8
   \   000141   AA82         MOV     R2,DPL
   \   000143   AB83         MOV     R3,DPH
   \   000145   12....       LCALL   ??sprintf?relay
   \   000148   7404         MOV     A,#0x4
   \   00014A   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??print_number_5:
   \   00014D   8A..         MOV     ?V0 + 0,R2
   \   00014F   8B..         MOV     ?V0 + 1,R3
    589                  }
    590              }
    591          
    592              /* sprintf failed or buffer overrun occurred */
    593              if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
   \                     ??print_number_9:
   \   000151   C3           CLR     C
   \   000152   E5..         MOV     A,?V0 + 0
   \   000154   941A         SUBB    A,#0x1a
   \   000156   E5..         MOV     A,?V0 + 1
   \   000158   9400         SUBB    A,#0x0
   \   00015A   4003         JC      $+5
   \   00015C   02....       LJMP    ??print_number_1 & 0xFFFF
    594              {
    595                  return false;
    596              }
    597          
    598              /* reserve appropriate space in the output */
    599              output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
   \   00015F                ; Setup parameters for call to function ensure
   \   00015F   E5..         MOV     A,?V0 + 0
   \   000161   2401         ADD     A,#0x1
   \   000163   FC           MOV     R4,A
   \   000164   E5..         MOV     A,?V0 + 1
   \   000166   3400         ADDC    A,#0x0
   \   000168   FD           MOV     R5,A
   \   000169   12....       LCALL   ??Subroutine171_0 & 0xFFFF
    600              if (output_pointer == NULL)
   \                     ??CrossCallReturnLabel_308:
   \   00016C   7003         JNZ     $+5
   \   00016E   02....       LJMP    ??print_number_1 & 0xFFFF
    601              {
    602                  return false;
    603              }
    604          
    605              /* copy the printed number to the output and replace locale
    606               * dependent decimal point with '.' */
    607              for (i = 0; i < ((size_t)length); i++)
   \   000171   7800         MOV     R0,#0x0
   \   000173   7900         MOV     R1,#0x0
   \   000175   8012         SJMP    ??CrossCallReturnLabel_229
    608              {
    609                  if (number_buffer[i] == decimal_point)
    610                  {
    611                      output_pointer[i] = '.';
    612                      continue;
    613                  }
    614          
    615                  output_pointer[i] = number_buffer[i];
   \                     ??print_number_10:
   \   000177   7404         MOV     A,#0x4
   \   000179   12....       LCALL   ?XSTACK_DISP0_8
   \   00017C   12....       LCALL   ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   00017F   C0E0         PUSH    A
   \   000181   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   000184   D0E0         POP     A
   \                     ??print_number_11:
   \   000186   12....       LCALL   ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_229:
   \   000189   C3           CLR     C
   \   00018A   E8           MOV     A,R0
   \   00018B   95..         SUBB    A,?V0 + 0
   \   00018D   E9           MOV     A,R1
   \   00018E   95..         SUBB    A,?V0 + 1
   \   000190   5013         JNC     ??print_number_12
   \   000192   7404         MOV     A,#0x4
   \   000194   12....       LCALL   ?XSTACK_DISP0_8
   \   000197   12....       LCALL   ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   00019A   642E         XRL     A,#0x2e
   \   00019C   70D9         JNZ     ??print_number_10
   \   00019E   12....       LCALL   ?Subroutine79 & 0xFFFF
    616              }
   \                     ??CrossCallReturnLabel_123:
   \   0001A1   742E         MOV     A,#0x2e
   \   0001A3   80E1         SJMP    ??print_number_11
    617              output_pointer[i] = '\0';
   \                     ??print_number_12:
   \   0001A5   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   0001A8   12....       LCALL   ??Subroutine179_0 & 0xFFFF
    618          
    619              output_buffer->offset += (size_t)length;
   \                     ??CrossCallReturnLabel_345:
   \   0001AB   25..         ADD     A,?V0 + 0
   \   0001AD   F0           MOVX    @DPTR,A
   \   0001AE   A3           INC     DPTR
   \   0001AF   E0           MOVX    A,@DPTR
   \   0001B0   35..         ADDC    A,?V0 + 1
   \   0001B2   F0           MOVX    @DPTR,A
    620          
    621              return true;
   \   0001B3   7A01         MOV     R2,#0x1
   \                     ??print_number_2:
   \   0001B5   7B00         MOV     R3,#0x0
   \   0001B7   741E         MOV     A,#0x1e
   \   0001B9   02....       LJMP    ?Subroutine5 & 0xFFFF
    622          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine80:
   \   000000   12....       LCALL   ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_214:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000   EA           MOV     A,R2
   \   000001   28           ADD     A,R0
   \   000002   F582         MOV     DPL,A
   \   000004   EB           MOV     A,R3
   \   000005   39           ADDC    A,R1
   \   000006   F583         MOV     DPH,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine171_0:
   \   000000   EE           MOV     A,R6
   \   000001   FA           MOV     R2,A
   \   000002   EF           MOV     A,R7
   \   000003   FB           MOV     R3,A
   \   000004   12....       LCALL   ??ensure?relay
   \   000007   EA           MOV     A,R2
   \   000008   4B           ORL     A,R3
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine179_0:
   \   000000   E4           CLR     A
   \   000001   12....       LCALL   ?Subroutine145 & 0xFFFF
   \                     ??CrossCallReturnLabel_347:
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine145:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine85:
   \   000000   EA           MOV     A,R2
   \   000001   240C         ADD     A,#0xc
   \   000003   F582         MOV     DPL,A
   \   000005   EB           MOV     A,R3
   \   000006   12....       LCALL   ??Subroutine178_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_648:
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 8,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 9,A
   \   000007   33           RLC     A
   \   000008   95E0         SUBB    A,0xE0 /* A   */
   \   00000A   F5..         MOV     ?V0 + 10,A
   \   00000C   F5..         MOV     ?V0 + 11,A
   \   00000E   78..         MOV     R0,#?V0 + 8
   \   000010   22           RET
    623          
    624          /* parse 4 digit hexadecimal number */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    625          static unsigned parse_hex4(const unsigned char * const input)
   \                     parse_hex4:
    626          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    627              unsigned int h = 0;
   \   000005   7800         MOV     R0,#0x0
   \   000007   7900         MOV     R1,#0x0
    628              size_t i = 0;
    629          
    630              for (i = 0; i < 4; i++)
   \   000009   7C00         MOV     R4,#0x0
   \   00000B   7D00         MOV     R5,#0x0
    631              {
    632                  /* parse digit */
    633                  if ((input[i] >= '0') && (input[i] <= '9'))
   \                     ??parse_hex4_0:
   \   00000D   EA           MOV     A,R2
   \   00000E   2C           ADD     A,R4
   \   00000F   F582         MOV     DPL,A
   \   000011   EB           MOV     A,R3
   \   000012   3D           ADDC    A,R5
   \   000013   F583         MOV     DPH,A
   \   000015   E0           MOVX    A,@DPTR
   \   000016   24D0         ADD     A,#-0x30
   \   000018   C3           CLR     C
   \   000019   940A         SUBB    A,#0xa
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   5038         JNC     ??parse_hex4_1
    634                  {
    635                      h += (unsigned int) input[i] - '0';
   \   00001E   24D0         ADD     A,#-0x30
   \                     ??parse_hex4_2:
   \   000020   FE           MOV     R6,A
   \   000021   E4           CLR     A
   \   000022   34FF         ADDC    A,#-0x1
   \   000024   FF           MOV     R7,A
   \   000025   E8           MOV     A,R0
   \   000026   2E           ADD     A,R6
   \   000027   F8           MOV     R0,A
   \   000028   E9           MOV     A,R1
   \   000029   3F           ADDC    A,R7
   \   00002A   F9           MOV     R1,A
    636                  }
    637                  else if ((input[i] >= 'A') && (input[i] <= 'F'))
    638                  {
    639                      h += (unsigned int) 10 + input[i] - 'A';
    640                  }
    641                  else if ((input[i] >= 'a') && (input[i] <= 'f'))
    642                  {
    643                      h += (unsigned int) 10 + input[i] - 'a';
    644                  }
    645                  else /* invalid */
    646                  {
    647                      return 0;
    648                  }
    649          
    650                  if (i < 3)
   \   00002B   C3           CLR     C
   \   00002C   EC           MOV     A,R4
   \   00002D   9403         SUBB    A,#0x3
   \   00002F   ED           MOV     A,R5
   \   000030   9400         SUBB    A,#0x0
   \   000032   500F         JNC     ??parse_hex4_3
    651                  {
    652                      /* shift left to make place for the next nibble */
    653                      h = h << 4;
   \   000034   88..         MOV     ?V0 + 0,R0
   \   000036   89..         MOV     ?V0 + 1,R1
   \   000038   7404         MOV     A,#0x4
   \   00003A   78..         MOV     R0,#?V0 + 0
   \   00003C   12....       LCALL   ?S_SHL
   \   00003F   A8..         MOV     R0,?V0 + 0
   \   000041   A9..         MOV     R1,?V0 + 1
    654                  }
   \                     ??parse_hex4_3:
   \   000043   12....       LCALL   ??Subroutine182_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_371:
   \   000046   C3           CLR     C
   \   000047   EC           MOV     A,R4
   \   000048   9404         SUBB    A,#0x4
   \   00004A   ED           MOV     A,R5
   \   00004B   9400         SUBB    A,#0x0
   \   00004D   40BE         JC      ??parse_hex4_0
    655              }
    656          
    657              return h;
   \   00004F   E8           MOV     A,R0
   \   000050   FA           MOV     R2,A
   \   000051   E9           MOV     A,R1
   \   000052   FB           MOV     R3,A
   \                     ??parse_hex4_4:
   \   000053   02....       LJMP    ??Subroutine162_0 & 0xFFFF
   \                     ??parse_hex4_1:
   \   000056   24BF         ADD     A,#-0x41
   \   000058   C3           CLR     C
   \   000059   9406         SUBB    A,#0x6
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   5004         JNC     ??parse_hex4_5
   \   00005E   24C9         ADD     A,#-0x37
   \   000060   80BE         SJMP    ??parse_hex4_2
   \                     ??parse_hex4_5:
   \   000062   249F         ADD     A,#-0x61
   \   000064   C3           CLR     C
   \   000065   9406         SUBB    A,#0x6
   \   000067   5005         JNC     ??parse_hex4_6
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   24A9         ADD     A,#-0x57
   \   00006C   80B2         SJMP    ??parse_hex4_2
   \                     ??parse_hex4_6:
   \   00006E   7A00         MOV     R2,#0x0
   \   000070   7B00         MOV     R3,#0x0
   \   000072   80DF         SJMP    ??parse_hex4_4
    658          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine182_0:
   \   000000   EC           MOV     A,R4
   \   000001   2401         ADD     A,#0x1
   \   000003   0C           INC     R4
   \   000004   ED           MOV     A,R5
   \   000005   3400         ADDC    A,#0x0
   \   000007   FD           MOV     R5,A
   \   000008   22           RET
    659          
    660          /* converts a UTF-16 literal to UTF-8
    661           * A literal can be one or two sequences of the form \uXXXX */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    662          static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
   \                     utf16_literal_to_utf8:
    663          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   8C..         MOV     ?V0 + 2,R4
   \   00000B   8D..         MOV     ?V0 + 3,R5
   \   00000D   7412         MOV     A,#0x12
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   12....       LCALL   ?Subroutine59 & 0xFFFF
    664              long unsigned int codepoint = 0;
    665              unsigned int first_code = 0;
    666              const unsigned char *first_sequence = input_pointer;
    667              unsigned char utf8_length = 0;
    668              unsigned char utf8_position = 0;
    669              unsigned char sequence_length = 0;
    670              unsigned char first_byte_mark = 0;
   \                     ??CrossCallReturnLabel_90:
   \   000015   7F00         MOV     R7,#0x0
    671          
    672              if ((input_end - first_sequence) < 6)
   \   000017   EC           MOV     A,R4
   \   000018   C3           CLR     C
   \   000019   95..         SUBB    A,?V0 + 0
   \   00001B   F8           MOV     R0,A
   \   00001C   ED           MOV     A,R5
   \   00001D   95..         SUBB    A,?V0 + 1
   \   00001F   F9           MOV     R1,A
   \   000020   C3           CLR     C
   \   000021   E8           MOV     A,R0
   \   000022   9406         SUBB    A,#0x6
   \   000024   E9           MOV     A,R1
   \   000025   12....       LCALL   ??Subroutine208_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_507:
   \   000028   5003         JNC     $+5
   \   00002A   02....       LJMP    ??utf16_literal_to_utf8_0 & 0xFFFF
    673              {
    674                  /* input ends unexpectedly */
    675                  goto fail;
    676              }
    677          
    678              /* get the first utf16 sequence */
    679              first_code = parse_hex4(first_sequence + 2);
   \   00002D                ; Setup parameters for call to function parse_hex4
   \   00002D   EA           MOV     A,R2
   \   00002E   2402         ADD     A,#0x2
   \   000030   0A           INC     R2
   \   000031   0A           INC     R2
   \   000032   EB           MOV     A,R3
   \   000033   3400         ADDC    A,#0x0
   \   000035   FB           MOV     R3,A
   \   000036   12....       LCALL   ??parse_hex4?relay
   \   000039   8A..         MOV     ?V0 + 6,R2
   \   00003B   8B..         MOV     ?V0 + 7,R3
    680          
    681              /* check that the code is valid */
    682              if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
   \   00003D   12....       LCALL   ?Subroutine117 & 0xFFFF
   \                     ??CrossCallReturnLabel_183:
   \   000040   5003         JNC     $+5
   \   000042   02....       LJMP    ??utf16_literal_to_utf8_0 & 0xFFFF
    683              {
    684                  goto fail;
    685              }
    686          
    687              /* UTF16 surrogate pair */
    688              if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
   \   000045   EA           MOV     A,R2
   \   000046   2400         ADD     A,#0x0
   \   000048   EB           MOV     A,R3
   \   000049   3428         ADDC    A,#0x28
   \   00004B   C3           CLR     C
   \   00004C   9404         SUBB    A,#0x4
   \   00004E   506B         JNC     ??utf16_literal_to_utf8_1
    689              {
    690                  const unsigned char *second_sequence = first_sequence + 6;
   \   000050   E5..         MOV     A,?V0 + 0
   \   000052   2406         ADD     A,#0x6
   \   000054   F8           MOV     R0,A
   \   000055   E5..         MOV     A,?V0 + 1
   \   000057   3400         ADDC    A,#0x0
   \   000059   F9           MOV     R1,A
    691                  unsigned int second_code = 0;
    692                  sequence_length = 12; /* \uXXXX\uXXXX */
   \   00005A   7E0C         MOV     R6,#0xc
    693          
    694                  if ((input_end - second_sequence) < 6)
   \   00005C   E5..         MOV     A,?V0 + 2
   \   00005E   C3           CLR     C
   \   00005F   98           SUBB    A,R0
   \   000060   FA           MOV     R2,A
   \   000061   E5..         MOV     A,?V0 + 3
   \   000063   99           SUBB    A,R1
   \   000064   FB           MOV     R3,A
   \   000065   C3           CLR     C
   \   000066   EA           MOV     A,R2
   \   000067   9406         SUBB    A,#0x6
   \   000069   EB           MOV     A,R3
   \   00006A   12....       LCALL   ??Subroutine208_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_508:
   \   00006D   5003         JNC     $+5
   \   00006F   02....       LJMP    ??utf16_literal_to_utf8_0 & 0xFFFF
    695                  {
    696                      /* input ends unexpectedly */
    697                      goto fail;
    698                  }
    699          
    700                  if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
   \   000072   8882         MOV     DPL,R0
   \   000074   8983         MOV     DPH,R1
   \   000076   E0           MOVX    A,@DPTR
   \   000077   645C         XRL     A,#0x5c
   \   000079   6003         JZ      $+5
   \   00007B   02....       LJMP    ??utf16_literal_to_utf8_0 & 0xFFFF
   \   00007E   A3           INC     DPTR
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   6475         XRL     A,#0x75
   \   000082   6003         JZ      $+5
   \   000084   02....       LJMP    ??utf16_literal_to_utf8_0 & 0xFFFF
    701                  {
    702                      /* missing second half of the surrogate pair */
    703                      goto fail;
    704                  }
    705          
    706                  /* get the second utf16 sequence */
    707                  second_code = parse_hex4(second_sequence + 2);
   \   000087                ; Setup parameters for call to function parse_hex4
   \   000087   E8           MOV     A,R0
   \   000088   2402         ADD     A,#0x2
   \   00008A   FA           MOV     R2,A
   \   00008B   E9           MOV     A,R1
   \   00008C   3400         ADDC    A,#0x0
   \   00008E   FB           MOV     R3,A
   \   00008F   12....       LCALL   ??parse_hex4?relay
   \   000092   8A..         MOV     ?V0 + 0,R2
    708                  /* check that the code is valid */
    709                  if ((second_code < 0xDC00) || (second_code > 0xDFFF))
   \   000094   12....       LCALL   ?Subroutine117 & 0xFFFF
   \                     ??CrossCallReturnLabel_184:
   \   000097   4003         JC      $+5
   \   000099   02....       LJMP    ??utf16_literal_to_utf8_0 & 0xFFFF
    710                  {
    711                      /* invalid second half of the surrogate pair */
    712                      goto fail;
    713                  }
    714          
    715          
    716                  /* calculate the unicode codepoint from the surrogate pair */
    717                  codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
   \   00009C   740A         MOV     A,#0xa
   \   00009E   78..         MOV     R0,#?V0 + 6
   \   0000A0   12....       LCALL   ?S_SHL
   \   0000A3   EB           MOV     A,R3
   \   0000A4   5403         ANL     A,#0x3
   \   0000A6   F9           MOV     R1,A
   \   0000A7   E5..         MOV     A,?V0 + 7
   \   0000A9   49           ORL     A,R1
   \   0000AA   F5..         MOV     ?V0 + 1,A
   \   0000AC   E4           CLR     A
   \   0000AD   F5..         MOV     ?V0 + 2,A
   \   0000AF   F5..         MOV     ?V0 + 3,A
   \   0000B1   90....       MOV     DPTR,#__Constant_10000
   \   0000B4   78..         MOV     R0,#?V0 + 0
   \   0000B6   12....       LCALL   ?L_ADD_X
   \   0000B9   800B         SJMP    ??utf16_literal_to_utf8_2
    718              }
    719              else
    720              {
    721                  sequence_length = 6; /* \uXXXX */
   \                     ??utf16_literal_to_utf8_1:
   \   0000BB   7E06         MOV     R6,#0x6
    722                  codepoint = first_code;
   \   0000BD   8A..         MOV     ?V0 + 0,R2
   \   0000BF   8B..         MOV     ?V0 + 1,R3
   \   0000C1   E4           CLR     A
   \   0000C2   F5..         MOV     ?V0 + 2,A
   \   0000C4   F5..         MOV     ?V0 + 3,A
    723              }
    724          
    725              /* encode as UTF-8
    726               * takes at maximum 4 bytes to encode:
    727               * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    728              if (codepoint < 0x80)
   \                     ??utf16_literal_to_utf8_2:
   \   0000C6   90....       MOV     DPTR,#__Constant_80
   \   0000C9   78..         MOV     R0,#?V0 + 0
   \   0000CB   12....       LCALL   ?UL_GE_X
   \   0000CE   4004         JC      ??utf16_literal_to_utf8_3
    729              {
    730                  /* normal ascii, encoding 0xxxxxxx */
    731                  utf8_length = 1;
   \   0000D0   7901         MOV     R1,#0x1
   \   0000D2   802E         SJMP    ??utf16_literal_to_utf8_4
    732              }
    733              else if (codepoint < 0x800)
   \                     ??utf16_literal_to_utf8_3:
   \   0000D4   90....       MOV     DPTR,#__Constant_800
   \   0000D7   78..         MOV     R0,#?V0 + 0
   \   0000D9   12....       LCALL   ?UL_GE_X
   \   0000DC   4006         JC      ??utf16_literal_to_utf8_5
    734              {
    735                  /* two bytes, encoding 110xxxxx 10xxxxxx */
    736                  utf8_length = 2;
   \   0000DE   7902         MOV     R1,#0x2
    737                  first_byte_mark = 0xC0; /* 11000000 */
   \   0000E0   7FC0         MOV     R7,#-0x40
   \   0000E2   801E         SJMP    ??utf16_literal_to_utf8_4
    738              }
    739              else if (codepoint < 0x10000)
   \                     ??utf16_literal_to_utf8_5:
   \   0000E4   90....       MOV     DPTR,#__Constant_10000
   \   0000E7   78..         MOV     R0,#?V0 + 0
   \   0000E9   12....       LCALL   ?UL_GE_X
   \   0000EC   4006         JC      ??utf16_literal_to_utf8_6
    740              {
    741                  /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
    742                  utf8_length = 3;
   \   0000EE   7903         MOV     R1,#0x3
    743                  first_byte_mark = 0xE0; /* 11100000 */
   \   0000F0   7FE0         MOV     R7,#-0x20
   \   0000F2   800E         SJMP    ??utf16_literal_to_utf8_4
    744              }
    745              else if (codepoint <= 0x10FFFF)
   \                     ??utf16_literal_to_utf8_6:
   \   0000F4   90....       MOV     DPTR,#__Constant_110000
   \   0000F7   78..         MOV     R0,#?V0 + 0
   \   0000F9   12....       LCALL   ?UL_GE_X
   \   0000FC   406B         JC      ??utf16_literal_to_utf8_0
    746              {
    747                  /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
    748                  utf8_length = 4;
   \   0000FE   7904         MOV     R1,#0x4
    749                  first_byte_mark = 0xF0; /* 11110000 */
   \   000100   7FF0         MOV     R7,#-0x10
    750              }
    751              else
    752              {
    753                  /* invalid unicode codepoint */
    754                  goto fail;
    755              }
    756          
    757              /* encode as utf8 */
    758              for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
   \                     ??utf16_literal_to_utf8_4:
   \   000102   74FF         MOV     A,#-0x1
   \   000104   29           ADD     A,R1
   \   000105   FA           MOV     R2,A
   \   000106   8026         SJMP    ??utf16_literal_to_utf8_7
    759              {
    760                  /* 10xxxxxx */
    761                  (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
   \                     ??utf16_literal_to_utf8_8:
   \   000108   E5..         MOV     A,?V0 + 0
   \   00010A   54BF         ANL     A,#0xbf
   \   00010C   4480         ORL     A,#0x80
   \   00010E   C0E0         PUSH    A
   \   000110   EA           MOV     A,R2
   \   000111   FC           MOV     R4,A
   \   000112   85..82       MOV     DPL,?V0 + 4
   \   000115   85..83       MOV     DPH,?V0 + 5
   \   000118   E0           MOVX    A,@DPTR
   \   000119   2C           ADD     A,R4
   \   00011A   F8           MOV     R0,A
   \   00011B   A3           INC     DPTR
   \   00011C   E0           MOVX    A,@DPTR
   \   00011D   3400         ADDC    A,#0x0
   \   00011F   8882         MOV     DPL,R0
   \   000121   F583         MOV     DPH,A
   \   000123   D0E0         POP     A
   \   000125   F0           MOVX    @DPTR,A
    762                  codepoint >>= 6;
   \   000126   7406         MOV     A,#0x6
   \   000128   78..         MOV     R0,#?V0 + 0
   \   00012A   12....       LCALL   ?UL_SHR
    763              }
   \   00012D   1A           DEC     R2
   \                     ??utf16_literal_to_utf8_7:
   \   00012E   EA           MOV     A,R2
   \   00012F   70D7         JNZ     ??utf16_literal_to_utf8_8
    764              /* encode first byte */
    765              if (utf8_length > 1)
   \   000131   E9           MOV     A,R1
   \   000132   C3           CLR     C
   \   000133   9402         SUBB    A,#0x2
   \   000135   E5..         MOV     A,?V0 + 0
   \   000137   4003         JC      ??utf16_literal_to_utf8_9
    766              {
    767                  (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
   \   000139   4F           ORL     A,R7
   \   00013A   8002         SJMP    ??utf16_literal_to_utf8_10
    768              }
    769              else
    770              {
    771                  (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
   \                     ??utf16_literal_to_utf8_9:
   \   00013C   547F         ANL     A,#0x7f
   \                     ??utf16_literal_to_utf8_10:
   \   00013E   C0E0         PUSH    A
   \   000140   85..82       MOV     DPL,?V0 + 4
   \   000143   85..83       MOV     DPH,?V0 + 5
    772              }
   \   000146   12....       LCALL   ??Subroutine164_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_258:
   \   000149   D0E0         POP     A
   \   00014B   F0           MOVX    @DPTR,A
    773          
    774              *output_pointer += utf8_length;
   \   00014C   E9           MOV     A,R1
   \   00014D   F8           MOV     R0,A
   \   00014E   85..82       MOV     DPL,?V0 + 4
   \   000151   85..83       MOV     DPH,?V0 + 5
   \   000154   E0           MOVX    A,@DPTR
   \   000155   28           ADD     A,R0
   \   000156   F8           MOV     R0,A
   \   000157   A3           INC     DPTR
   \   000158   E0           MOVX    A,@DPTR
   \   000159   3400         ADDC    A,#0x0
   \   00015B   F9           MOV     R1,A
   \   00015C   85..82       MOV     DPL,?V0 + 4
   \   00015F   85..83       MOV     DPH,?V0 + 5
   \   000162   12....       LCALL   ??Subroutine200_0 & 0xFFFF
    775          
    776              return sequence_length;
   \                     ??CrossCallReturnLabel_432:
   \   000165   EE           MOV     A,R6
   \   000166   F9           MOV     R1,A
   \   000167   8002         SJMP    ??utf16_literal_to_utf8_11
    777          
    778          fail:
    779              return 0;
   \                     ??utf16_literal_to_utf8_0:
   \   000169   7900         MOV     R1,#0x0
   \                     ??utf16_literal_to_utf8_11:
   \   00016B   02....       LJMP    ?Subroutine6 & 0xFFFF
    780          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine117:
   \   000000   EA           MOV     A,R2
   \   000001   2400         ADD     A,#0x0
   \   000003   EB           MOV     A,R3
   \   000004   3424         ADDC    A,#0x24
   \   000006   C3           CLR     C
   \   000007   9404         SUBB    A,#0x4
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7F0A         MOV     R7,#0xa
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 4,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 5,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine208_0:
   \   000000   9400         SUBB    A,#0x0
   \   000002   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000004   65D0         XRL     A,PSW
   \   000006   33           RLC     A
   \   000007   22           RET
    781          
    782          /* Parse the input text into an unescaped cinput, and populate item. */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    783          static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
   \                     parse_string:
    784          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 6,R2
   \   00000C   8B..         MOV     ?V0 + 7,R3
   \   00000E   8C..         MOV     ?V0 + 0,R4
   \   000010   8D..         MOV     ?V0 + 1,R5
   \   000012   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_234:
   \   000015   E0           MOVX    A,@DPTR
   \   000016   28           ADD     A,R0
   \   000017   F8           MOV     R0,A
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   39           ADDC    A,R1
   \   00001B   F9           MOV     R1,A
   \   00001C   8882         MOV     DPL,R0
   \   00001E   8983         MOV     DPH,R1
   \   000020   A3           INC     DPTR
   \   000021   AE82         MOV     R6,DPL
   \   000023   AF83         MOV     R7,DPH
    785              const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
    786              const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
   \   000025   8582..       MOV     ?V0 + 2,DPL
   \   000028   8583..       MOV     ?V0 + 3,DPH
    787              unsigned char *output_pointer = NULL;
   \   00002B   85..82       MOV     DPL,?XSP + 0
   \   00002E   85..83       MOV     DPH,?XSP + 1
   \   000031   E4           CLR     A
   \   000032   F0           MOVX    @DPTR,A
   \   000033   A3           INC     DPTR
   \   000034   F0           MOVX    @DPTR,A
    788              unsigned char *output = NULL;
    789          
    790              /* not a string */
    791              if (buffer_at_offset(input_buffer)[0] != '\"')
   \   000035   8882         MOV     DPL,R0
   \   000037   8983         MOV     DPH,R1
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   6422         XRL     A,#0x22
   \   00003C   6003         JZ      $+5
   \   00003E   02....       LJMP    ??parse_string_0 & 0xFFFF
    792              {
    793                  goto fail;
    794              }
    795          
    796              {
    797                  /* calculate approximate size of the output (overestimate) */
    798                  size_t allocation_length = 0;
    799                  size_t skipped_bytes = 0;
   \   000041   7800         MOV     R0,#0x0
   \   000043   7900         MOV     R1,#0x0
   \   000045   8043         SJMP    ??parse_string_1
    800                  while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
    801                  {
    802                      /* is escape sequence */
    803                      if (input_end[0] == '\\')
   \                     ??parse_string_2:
   \   000047   E0           MOVX    A,@DPTR
   \   000048   645C         XRL     A,#0x5c
   \   00004A   7031         JNZ     ??parse_string_3
    804                      {
    805                          if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
   \   00004C   A3           INC     DPTR
   \   00004D   C082         PUSH    DPL
   \   00004F   C083         PUSH    DPH
   \   000051   85..82       MOV     DPL,?V0 + 0
   \   000054   85..83       MOV     DPH,?V0 + 1
   \   000057   12....       LCALL   ??Subroutine195_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_406:
   \   00005A   D083         POP     DPH
   \   00005C   D082         POP     DPL
   \   00005E   E582         MOV     A,DPL
   \   000060   C3           CLR     C
   \   000061   9A           SUBB    A,R2
   \   000062   FC           MOV     R4,A
   \   000063   E583         MOV     A,DPH
   \   000065   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_367:
   \   000068   4003         JC      $+5
   \   00006A   02....       LJMP    ??parse_string_0 & 0xFFFF
    806                          {
    807                              /* prevent buffer overflow when last input character is a backslash */
    808                              goto fail;
    809                          }
    810                          skipped_bytes++;
   \   00006D   12....       LCALL   ??Subroutine153_0 & 0xFFFF
    811                          input_end++;
   \                     ??CrossCallReturnLabel_230:
   \   000070   85..82       MOV     DPL,?V0 + 2
   \   000073   85..83       MOV     DPH,?V0 + 3
   \   000076   A3           INC     DPTR
   \   000077   8582..       MOV     ?V0 + 2,DPL
   \   00007A   8583..       MOV     ?V0 + 3,DPH
    812                      }
    813                      input_end++;
   \                     ??parse_string_3:
   \   00007D   85..82       MOV     DPL,?V0 + 2
   \   000080   85..83       MOV     DPH,?V0 + 3
   \   000083   A3           INC     DPTR
   \   000084   8582..       MOV     ?V0 + 2,DPL
   \   000087   8583..       MOV     ?V0 + 3,DPH
    814                  }
   \                     ??parse_string_1:
   \   00008A   85..82       MOV     DPL,?V0 + 0
   \   00008D   85..83       MOV     DPH,?V0 + 1
   \   000090   12....       LCALL   ??Subroutine195_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_407:
   \   000093   E5..         MOV     A,?V0 + 2
   \   000095   C3           CLR     C
   \   000096   9A           SUBB    A,R2
   \   000097   FC           MOV     R4,A
   \   000098   E5..         MOV     A,?V0 + 3
   \   00009A   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_368:
   \   00009D   4003         JC      $+5
   \   00009F   02....       LJMP    ??parse_string_0 & 0xFFFF
   \   0000A2   85..82       MOV     DPL,?V0 + 2
   \   0000A5   85..83       MOV     DPH,?V0 + 3
   \   0000A8   E0           MOVX    A,@DPTR
   \   0000A9   6422         XRL     A,#0x22
   \   0000AB   709A         JNZ     ??parse_string_2
   \   0000AD   E0           MOVX    A,@DPTR
   \   0000AE   6422         XRL     A,#0x22
   \   0000B0   6003         JZ      $+5
   \   0000B2   02....       LJMP    ??parse_string_0 & 0xFFFF
    815                  if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
    816                  {
    817                      goto fail; /* string ended unexpectedly */
    818                  }
    819          
    820                  /* This is at most how much we need for the output */
    821                  allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
    822                  output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
   \   0000B5                ; Setup parameters for indirect call
   \   0000B5   85..82       MOV     DPL,?V0 + 0
   \   0000B8   85..83       MOV     DPH,?V0 + 1
   \   0000BB   A3           INC     DPTR
   \   0000BC   A3           INC     DPTR
   \   0000BD   A3           INC     DPTR
   \   0000BE   A3           INC     DPTR
   \   0000BF   12....       LCALL   ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   0000C2   E0           MOVX    A,@DPTR
   \   0000C3   2A           ADD     A,R2
   \   0000C4   FA           MOV     R2,A
   \   0000C5   A3           INC     DPTR
   \   0000C6   E0           MOVX    A,@DPTR
   \   0000C7   3B           ADDC    A,R3
   \   0000C8   FB           MOV     R3,A
   \   0000C9   E5..         MOV     A,?V0 + 2
   \   0000CB   C3           CLR     C
   \   0000CC   9A           SUBB    A,R2
   \   0000CD   FA           MOV     R2,A
   \   0000CE   E5..         MOV     A,?V0 + 3
   \   0000D0   9B           SUBB    A,R3
   \   0000D1   FB           MOV     R3,A
   \   0000D2   EA           MOV     A,R2
   \   0000D3   C3           CLR     C
   \   0000D4   98           SUBB    A,R0
   \   0000D5   F8           MOV     R0,A
   \   0000D6   EB           MOV     A,R3
   \   0000D7   99           SUBB    A,R1
   \   0000D8   F9           MOV     R1,A
   \   0000D9   E8           MOV     A,R0
   \   0000DA   2401         ADD     A,#0x1
   \   0000DC   FA           MOV     R2,A
   \   0000DD   E9           MOV     A,R1
   \   0000DE   12....       LCALL   ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   0000E1   A3           INC     DPTR
   \   0000E2   A3           INC     DPTR
   \   0000E3   A3           INC     DPTR
   \   0000E4   A3           INC     DPTR
   \   0000E5   A3           INC     DPTR
   \   0000E6   A3           INC     DPTR
   \   0000E7   A3           INC     DPTR
   \   0000E8   A3           INC     DPTR
   \   0000E9   12....       LCALL   ??Subroutine164_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_259:
   \   0000EC   12....       LCALL   ?CALL_IND
   \   0000EF   8A..         MOV     ?V0 + 4,R2
   \   0000F1   8B..         MOV     ?V0 + 5,R3
    823                  if (output == NULL)
   \   0000F3   EA           MOV     A,R2
   \   0000F4   45..         ORL     A,?V0 + 5
   \   0000F6   7003         JNZ     $+5
   \   0000F8   02....       LJMP    ??parse_string_0 & 0xFFFF
    824                  {
    825                      goto fail; /* allocation failure */
    826                  }
    827              }
    828          
    829              output_pointer = output;
   \   0000FB   85..82       MOV     DPL,?XSP + 0
   \   0000FE   85..83       MOV     DPH,?XSP + 1
   \   000101   EA           MOV     A,R2
   \   000102   F0           MOVX    @DPTR,A
   \   000103   A3           INC     DPTR
   \   000104   EB           MOV     A,R3
   \   000105   8022         SJMP    ??parse_string_4
    830              /* loop through the string literal */
    831              while (input_pointer < input_end)
    832              {
    833                  if (*input_pointer != '\\')
    834                  {
    835                      *output_pointer++ = *input_pointer++;
   \                     ??parse_string_5:
   \   000107   E0           MOVX    A,@DPTR
   \   000108   C0E0         PUSH    A
   \   00010A   12....       LCALL   ?Subroutine72 & 0xFFFF
    836                  }
   \                     ??CrossCallReturnLabel_272:
   \   00010D   D0E0         POP     A
   \   00010F   12....       LCALL   ?Subroutine109 & 0xFFFF
   \                     ??CrossCallReturnLabel_176:
   \   000112   AE82         MOV     R6,DPL
   \   000114   AF83         MOV     R7,DPH
   \   000116   85..82       MOV     DPL,?XSP + 0
   \   000119   85..83       MOV     DPH,?XSP + 1
   \   00011C   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   00011F   85..82       MOV     DPL,?XSP + 0
   \   000122   85..83       MOV     DPH,?XSP + 1
   \   000125   E8           MOV     A,R0
   \   000126   F0           MOVX    @DPTR,A
   \   000127   A3           INC     DPTR
   \   000128   E9           MOV     A,R1
   \                     ??parse_string_4:
   \   000129   F0           MOVX    @DPTR,A
   \                     ??parse_string_6:
   \   00012A   C3           CLR     C
   \   00012B   EE           MOV     A,R6
   \   00012C   95..         SUBB    A,?V0 + 2
   \   00012E   EF           MOV     A,R7
   \   00012F   95..         SUBB    A,?V0 + 3
   \   000131   4003         JC      $+5
   \   000133   02....       LJMP    ??parse_string_7 & 0xFFFF
   \   000136   8E82         MOV     DPL,R6
   \   000138   8F83         MOV     DPH,R7
   \   00013A   E0           MOVX    A,@DPTR
   \   00013B   645C         XRL     A,#0x5c
   \   00013D   70C8         JNZ     ??parse_string_5
    837                  /* escape sequence */
    838                  else
    839                  {
    840                      unsigned char sequence_length = 2;
   \   00013F   75..02       MOV     ?V0 + 8,#0x2
    841                      if ((input_end - input_pointer) < 1)
   \   000142   E5..         MOV     A,?V0 + 2
   \   000144   C3           CLR     C
   \   000145   9E           SUBB    A,R6
   \   000146   F8           MOV     R0,A
   \   000147   E5..         MOV     A,?V0 + 3
   \   000149   9F           SUBB    A,R7
   \   00014A   F9           MOV     R1,A
   \   00014B   C3           CLR     C
   \   00014C   E8           MOV     A,R0
   \   00014D   9401         SUBB    A,#0x1
   \   00014F   E9           MOV     A,R1
   \   000150   12....       LCALL   ??Subroutine208_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_509:
   \   000153   5003         JNC     $+5
   \   000155   02....       LJMP    ??parse_string_8 & 0xFFFF
    842                      {
    843                          goto fail;
    844                      }
    845          
    846                      switch (input_pointer[1])
   \   000158   A3           INC     DPTR
   \   000159   E0           MOVX    A,@DPTR
   \   00015A   24DE         ADD     A,#-0x22
   \   00015C   6048         JZ      ??parse_string_9
   \   00015E   24F3         ADD     A,#-0xd
   \   000160   6044         JZ      ??parse_string_9
   \   000162   24D3         ADD     A,#-0x2d
   \   000164   6040         JZ      ??parse_string_9
   \   000166   24FA         ADD     A,#-0x6
   \   000168   6016         JZ      ??parse_string_10
   \   00016A   24FC         ADD     A,#-0x4
   \   00016C   601C         JZ      ??parse_string_11
   \   00016E   24F8         ADD     A,#-0x8
   \   000170   601F         JZ      ??parse_string_12
   \   000172   24FC         ADD     A,#-0x4
   \   000174   6022         JZ      ??parse_string_13
   \   000176   24FE         ADD     A,#-0x2
   \   000178   6025         JZ      ??parse_string_14
   \   00017A   14           DEC     A
   \   00017B   6038         JZ      ??parse_string_15
   \   00017D   02....       LJMP    ??parse_string_8 & 0xFFFF
    847                      {
    848                          case 'b':
    849                              *output_pointer++ = '\b';
   \                     ??parse_string_10:
   \   000180   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_273:
   \   000183   7408         MOV     A,#0x8
   \                     ??parse_string_16:
   \   000185   12....       LCALL   ?Subroutine32 & 0xFFFF
    850                              break;
   \                     ??CrossCallReturnLabel_38:
   \   000188   8051         SJMP    ??parse_string_17
    851                          case 'f':
    852                              *output_pointer++ = '\f';
   \                     ??parse_string_11:
   \   00018A   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_274:
   \   00018D   740C         MOV     A,#0xc
   \   00018F   80F4         SJMP    ??parse_string_16
    853                              break;
    854                          case 'n':
    855                              *output_pointer++ = '\n';
   \                     ??parse_string_12:
   \   000191   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_275:
   \   000194   740A         MOV     A,#0xa
   \   000196   80ED         SJMP    ??parse_string_16
    856                              break;
    857                          case 'r':
    858                              *output_pointer++ = '\r';
   \                     ??parse_string_13:
   \   000198   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_276:
   \   00019B   740D         MOV     A,#0xd
   \   00019D   80E6         SJMP    ??parse_string_16
    859                              break;
    860                          case 't':
    861                              *output_pointer++ = '\t';
   \                     ??parse_string_14:
   \   00019F   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_277:
   \   0001A2   7409         MOV     A,#0x9
   \   0001A4   80DF         SJMP    ??parse_string_16
    862                              break;
    863                          case '\"':
    864                          case '\\':
    865                          case '/':
    866                              *output_pointer++ = input_pointer[1];
   \                     ??parse_string_9:
   \   0001A6   8E82         MOV     DPL,R6
   \   0001A8   8F83         MOV     DPH,R7
   \   0001AA   A3           INC     DPTR
   \   0001AB   E0           MOVX    A,@DPTR
   \   0001AC   C0E0         PUSH    A
   \   0001AE   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_278:
   \   0001B1   D0E0         POP     A
   \   0001B3   80D0         SJMP    ??parse_string_16
    867                              break;
    868          
    869                          /* UTF-16 literal */
    870                          case 'u':
    871                              sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
   \                     ??parse_string_15:
   \   0001B5                ; Setup parameters for call to function utf16_literal_to_utf8
   \   0001B5   85..82       MOV     DPL,?XSP + 0
   \   0001B8   85..83       MOV     DPH,?XSP + 1
   \   0001BB   8582..       MOV     ?V0 + 8,DPL
   \   0001BE   8583..       MOV     ?V0 + 9,DPH
   \   0001C1   78..         MOV     R0,#?V0 + 8
   \   0001C3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001C6   AC..         MOV     R4,?V0 + 2
   \   0001C8   AD..         MOV     R5,?V0 + 3
   \   0001CA   EE           MOV     A,R6
   \   0001CB   FA           MOV     R2,A
   \   0001CC   EF           MOV     A,R7
   \   0001CD   FB           MOV     R3,A
   \   0001CE   12....       LCALL   ??utf16_literal_to_utf8?relay
   \   0001D1   7402         MOV     A,#0x2
   \   0001D3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001D6   E9           MOV     A,R1
   \   0001D7   F5..         MOV     ?V0 + 8,A
    872                              if (sequence_length == 0)
   \   0001D9   6048         JZ      ??parse_string_8
    873                              {
    874                                  /* failed to convert UTF16-literal to UTF-8 */
    875                                  goto fail;
    876                              }
    877                              break;
    878          
    879                          default:
    880                              goto fail;
    881                      }
    882                      input_pointer += sequence_length;
   \                     ??parse_string_17:
   \   0001DB   EE           MOV     A,R6
   \   0001DC   25..         ADD     A,?V0 + 8
   \   0001DE   FE           MOV     R6,A
   \   0001DF   EF           MOV     A,R7
   \   0001E0   3400         ADDC    A,#0x0
   \   0001E2   FF           MOV     R7,A
   \   0001E3   02....       LJMP    ??parse_string_6 & 0xFFFF
    883                  }
    884              }
    885          
    886              /* zero terminate the output */
    887              *output_pointer = '\0';
   \                     ??parse_string_7:
   \   0001E6   85..82       MOV     DPL,?XSP + 0
   \   0001E9   85..83       MOV     DPH,?XSP + 1
   \   0001EC   12....       LCALL   ?Subroutine65 & 0xFFFF
    888          
    889              item->type = cJSON_String;
   \                     ??CrossCallReturnLabel_100:
   \   0001EF   85..82       MOV     DPL,?V0 + 6
   \   0001F2   85..83       MOV     DPH,?V0 + 7
   \   0001F5   A3           INC     DPTR
   \   0001F6   A3           INC     DPTR
   \   0001F7   A3           INC     DPTR
   \   0001F8   A3           INC     DPTR
   \   0001F9   A3           INC     DPTR
   \   0001FA   A3           INC     DPTR
   \   0001FB   7410         MOV     A,#0x10
   \   0001FD   12....       LCALL   ?Subroutine100 & 0xFFFF
    890              item->valuestring = (char*)output;
   \                     ??CrossCallReturnLabel_159:
   \   000200   A3           INC     DPTR
   \   000201   A3           INC     DPTR
   \   000202   A3           INC     DPTR
   \   000203   A3           INC     DPTR
   \   000204   E5..         MOV     A,?V0 + 4
   \   000206   F0           MOVX    @DPTR,A
   \   000207   A3           INC     DPTR
   \   000208   E5..         MOV     A,?V0 + 5
   \   00020A   12....       LCALL   ??Subroutine163_0 & 0xFFFF
    891          
    892              input_buffer->offset = (size_t) (input_end - input_buffer->content);
    893              input_buffer->offset++;
   \                     ??CrossCallReturnLabel_252:
   \   00020D   12....       LCALL   ??Subroutine230_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_613:
   \   000210   E5..         MOV     A,?V0 + 2
   \   000212   C3           CLR     C
   \   000213   98           SUBB    A,R0
   \   000214   F8           MOV     R0,A
   \   000215   E5..         MOV     A,?V0 + 3
   \   000217   99           SUBB    A,R1
   \   000218   F9           MOV     R1,A
   \   000219   12....       LCALL   ??Subroutine153_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_231:
   \   00021C   12....       LCALL   ?Subroutine98 & 0xFFFF
    894          
    895              return true;
   \                     ??CrossCallReturnLabel_453:
   \   00021F   7A01         MOV     R2,#0x1
   \   000221   8032         SJMP    ??parse_string_18
    896          
    897          fail:
    898              if (output != NULL)
    899              {
    900                  input_buffer->hooks.deallocate(output);
   \                     ??parse_string_8:
   \   000223                ; Setup parameters for indirect call
   \   000223   AA..         MOV     R2,?V0 + 4
   \   000225   AB..         MOV     R3,?V0 + 5
   \   000227   85..82       MOV     DPL,?V0 + 0
   \   00022A   85..83       MOV     DPH,?V0 + 1
   \   00022D   A3           INC     DPTR
   \   00022E   A3           INC     DPTR
   \   00022F   A3           INC     DPTR
   \   000230   A3           INC     DPTR
   \   000231   A3           INC     DPTR
   \   000232   A3           INC     DPTR
   \   000233   A3           INC     DPTR
   \   000234   A3           INC     DPTR
   \   000235   A3           INC     DPTR
   \   000236   A3           INC     DPTR
   \   000237   12....       LCALL   ??Subroutine164_0 & 0xFFFF
    901              }
   \                     ??CrossCallReturnLabel_260:
   \   00023A   12....       LCALL   ?CALL_IND
    902          
    903              if (input_pointer != NULL)
   \                     ??parse_string_0:
   \   00023D   EE           MOV     A,R6
   \   00023E   4F           ORL     A,R7
   \   00023F   6012         JZ      ??CrossCallReturnLabel_454
    904              {
    905                  input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
   \   000241   85..82       MOV     DPL,?V0 + 0
   \   000244   85..83       MOV     DPH,?V0 + 1
   \   000247   12....       LCALL   ?Subroutine46 & 0xFFFF
    906              }
   \                     ??CrossCallReturnLabel_69:
   \   00024A   C3           CLR     C
   \   00024B   98           SUBB    A,R0
   \   00024C   F8           MOV     R0,A
   \   00024D   EF           MOV     A,R7
   \   00024E   99           SUBB    A,R1
   \   00024F   F9           MOV     R1,A
   \   000250   12....       LCALL   ?Subroutine98 & 0xFFFF
    907          
    908              return false;
   \                     ??CrossCallReturnLabel_454:
   \   000253   7A00         MOV     R2,#0x0
   \                     ??parse_string_18:
   \   000255   7B00         MOV     R3,#0x0
   \   000257   7402         MOV     A,#0x2
   \   000259   12....       LCALL   ?DEALLOC_XSTACK8
   \   00025C   02....       LJMP    ?Subroutine6 & 0xFFFF
    909          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   8C82         MOV     DPL,R4
   \   000002   8D83         MOV     DPH,R5
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006                REQUIRE ??Subroutine154_0
   \   000006                ; // Fall through to label ??Subroutine154_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine154_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine155_0
   \   000002                ; // Fall through to label ??Subroutine155_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine155_0:
   \   000000   12....       LCALL   ??Subroutine206_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_636:
   \   000003   8C82         MOV     DPL,R4
   \   000005   8D83         MOV     DPH,R5
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine89:
   \   000000   3400         ADDC    A,#0x0
   \   000002   FB           MOV     R3,A
   \   000003   85..82       MOV     DPL,?V0 + 0
   \   000006   85..83       MOV     DPH,?V0 + 1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine164_0
   \   000006                ; // Fall through to label ??Subroutine164_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   12....       LCALL   ?Subroutine136 & 0xFFFF
   \                     ??CrossCallReturnLabel_211:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine136:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   85..82       MOV     DPL,?V0 + 0
   \   000008   85..83       MOV     DPH,?V0 + 1
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine100:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E4           CLR     A
   \   000003   F0           MOVX    @DPTR,A
   \   000004   85..82       MOV     DPL,?V0 + 6
   \   000007   85..83       MOV     DPH,?V0 + 7
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   9B           SUBB    A,R3
   \   000001   FD           MOV     R5,A
   \   000002   85..82       MOV     DPL,?V0 + 0
   \   000005   85..83       MOV     DPH,?V0 + 1
   \   000008                REQUIRE ??Subroutine181_0
   \   000008                ; // Fall through to label ??Subroutine181_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine146:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine109:
   \   000000   12....       LCALL   ?Subroutine146 & 0xFFFF
   \                     ??CrossCallReturnLabel_223:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   12....       LCALL   ??Subroutine206_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_631:
   \   000003   EE           MOV     A,R6
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine98:
   \   000000   85..82       MOV     DPL,?V0 + 0
   \   000003   85..83       MOV     DPH,?V0 + 1
   \   000006                REQUIRE ??Subroutine197_0
   \   000006                ; // Fall through to label ??Subroutine197_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine197_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine198_0
   \   000002                ; // Fall through to label ??Subroutine198_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine198_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine199_0
   \   000001                ; // Fall through to label ??Subroutine199_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine199_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine200_0
   \   000001                ; // Fall through to label ??Subroutine200_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   12....       LCALL   ?Subroutine129 & 0xFFFF
   \                     ??CrossCallReturnLabel_282:
   \   000003   E4           CLR     A
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   12....       LCALL   ?Subroutine131 & 0xFFFF
   \                     ??CrossCallReturnLabel_205:
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   E8           MOV     A,R0
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   E9           MOV     A,R1
   \   000014   F0           MOVX    @DPTR,A
   \   000015   22           RET
    910          
    911          /* Render the cstring provided to an escaped version that can be printed. */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    912          static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
   \                     print_string_ptr:
    913          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 6,R2
   \   000007   8B..         MOV     ?V0 + 7,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FA           MOV     R2,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FB           MOV     R3,A
    914              const unsigned char *input_pointer = NULL;
    915              unsigned char *output = NULL;
    916              unsigned char *output_pointer = NULL;
    917              size_t output_length = 0;
    918              /* numbers of additional characters needed for escaping */
    919              size_t escape_characters = 0;
   \   00000D   75..00       MOV     ?V0 + 4,#0x0
   \   000010   75..00       MOV     ?V0 + 5,#0x0
    920          
    921              if (output_buffer == NULL)
   \   000013   EA           MOV     A,R2
   \   000014   4B           ORL     A,R3
   \   000015   7007         JNZ     ??print_string_ptr_0
    922              {
    923                  return false;
   \                     ??print_string_ptr_1:
   \   000017   7A00         MOV     R2,#0x0
   \                     ??print_string_ptr_2:
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   02....       LJMP    ??print_string_ptr_3 & 0xFFFF
    924              }
    925          
    926              /* empty string */
    927              if (input == NULL)
   \                     ??print_string_ptr_0:
   \   00001E   E5..         MOV     A,?V0 + 6
   \   000020   45..         ORL     A,?V0 + 7
   \   000022   7019         JNZ     ??print_string_ptr_4
    928              {
    929                  output = ensure(output_buffer, sizeof("\"\""));
   \   000024                ; Setup parameters for call to function ensure
   \   000024   7C03         MOV     R4,#0x3
   \   000026   7D00         MOV     R5,#0x0
   \   000028   12....       LCALL   ??ensure?relay
   \   00002B   8B..         MOV     ?V0 + 3,R3
    930                  if (output == NULL)
   \   00002D   EA           MOV     A,R2
   \   00002E   45..         ORL     A,?V0 + 3
   \   000030   60E5         JZ      ??print_string_ptr_1
    931                  {
    932                      return false;
    933                  }
    934                  strcpy((char*)output, "\"\"");
   \   000032                ; Setup parameters for call to function strcpy
   \   000032   7C..         MOV     R4,#`?<Constant "\\"\\"">` & 0xff
   \   000034   7D..         MOV     R5,#(`?<Constant "\\"\\"">` >> 8) & 0xff
   \   000036   12....       LCALL   ??strcpy?relay
    935          
    936                  return true;
   \   000039   7A01         MOV     R2,#0x1
   \   00003B   80DC         SJMP    ??print_string_ptr_2
    937              }
    938          
    939              /* set "flag" to 1 if something needs to be escaped */
    940              for (input_pointer = input; *input_pointer; input_pointer++)
   \                     ??print_string_ptr_4:
   \   00003D   85....       MOV     ?V0 + 0,?V0 + 6
   \   000040   85....       MOV     ?V0 + 1,?V0 + 7
   \   000043   8019         SJMP    ??print_string_ptr_5
    941              {
    942                  switch (*input_pointer)
    943                  {
    944                      case '\"':
    945                      case '\\':
    946                      case '\b':
    947                      case '\f':
    948                      case '\n':
    949                      case '\r':
    950                      case '\t':
    951                          /* one character escape sequence */
    952                          escape_characters++;
    953                          break;
    954                      default:
    955                          if (*input_pointer < 32)
   \                     ??print_string_ptr_6:
   \   000045   E0           MOVX    A,@DPTR
   \   000046   C3           CLR     C
   \   000047   9420         SUBB    A,#0x20
   \   000049   500C         JNC     ??print_string_ptr_7
    956                          {
    957                              /* UTF-16 escape sequence uXXXX */
    958                              escape_characters += 5;
   \   00004B   E5..         MOV     A,?V0 + 4
   \   00004D   2405         ADD     A,#0x5
   \                     ??print_string_ptr_8:
   \   00004F   F5..         MOV     ?V0 + 4,A
   \   000051   E5..         MOV     A,?V0 + 5
   \   000053   3400         ADDC    A,#0x0
   \   000055   F5..         MOV     ?V0 + 5,A
    959                          }
   \                     ??print_string_ptr_7:
   \   000057   A3           INC     DPTR
   \   000058   8582..       MOV     ?V0 + 0,DPL
   \   00005B   8583..       MOV     ?V0 + 1,DPH
   \                     ??print_string_ptr_5:
   \   00005E   85..82       MOV     DPL,?V0 + 0
   \   000061   85..83       MOV     DPH,?V0 + 1
   \   000064   E0           MOVX    A,@DPTR
   \   000065   601F         JZ      ??print_string_ptr_9
   \   000067   24F8         ADD     A,#-0x8
   \   000069   6015         JZ      ??print_string_ptr_10
   \   00006B   14           DEC     A
   \   00006C   6012         JZ      ??print_string_ptr_10
   \   00006E   14           DEC     A
   \   00006F   600F         JZ      ??print_string_ptr_10
   \   000071   24FE         ADD     A,#-0x2
   \   000073   600B         JZ      ??print_string_ptr_10
   \   000075   14           DEC     A
   \   000076   6008         JZ      ??print_string_ptr_10
   \   000078   24EB         ADD     A,#-0x15
   \   00007A   6004         JZ      ??print_string_ptr_10
   \   00007C   24C6         ADD     A,#-0x3a
   \   00007E   70C5         JNZ     ??print_string_ptr_6
   \                     ??print_string_ptr_10:
   \   000080   E5..         MOV     A,?V0 + 4
   \   000082   2401         ADD     A,#0x1
   \   000084   80C9         SJMP    ??print_string_ptr_8
    960                          break;
    961                  }
    962              }
    963              output_length = (size_t)(input_pointer - input) + escape_characters;
   \                     ??print_string_ptr_9:
   \   000086   E5..         MOV     A,?V0 + 0
   \   000088   C3           CLR     C
   \   000089   95..         SUBB    A,?V0 + 6
   \   00008B   F8           MOV     R0,A
   \   00008C   E5..         MOV     A,?V0 + 1
   \   00008E   95..         SUBB    A,?V0 + 7
   \   000090   F9           MOV     R1,A
   \   000091   E8           MOV     A,R0
   \   000092   25..         ADD     A,?V0 + 4
   \   000094   F5..         MOV     ?V0 + 8,A
   \   000096   E9           MOV     A,R1
   \   000097   35..         ADDC    A,?V0 + 5
   \   000099   F5..         MOV     ?V0 + 9,A
    964          
    965              output = ensure(output_buffer, output_length + sizeof("\"\""));
   \   00009B                ; Setup parameters for call to function ensure
   \   00009B   E5..         MOV     A,?V0 + 8
   \   00009D   2403         ADD     A,#0x3
   \   00009F   FC           MOV     R4,A
   \   0000A0   E5..         MOV     A,?V0 + 9
   \   0000A2   3400         ADDC    A,#0x0
   \   0000A4   FD           MOV     R5,A
   \   0000A5   12....       LCALL   ??ensure?relay
   \   0000A8   8A..         MOV     ?V0 + 2,R2
   \   0000AA   8B..         MOV     ?V0 + 3,R3
    966              if (output == NULL)
   \   0000AC   EA           MOV     A,R2
   \   0000AD   45..         ORL     A,?V0 + 3
   \   0000AF   7003         JNZ     $+5
   \   0000B1   02....       LJMP    ??print_string_ptr_1 & 0xFFFF
    967              {
    968                  return false;
    969              }
    970          
    971              /* no characters have to be escaped */
    972              if (escape_characters == 0)
   \   0000B4   E5..         MOV     A,?V0 + 4
   \   0000B6   45..         ORL     A,?V0 + 5
   \   0000B8   8A82         MOV     DPL,R2
   \   0000BA   8B83         MOV     DPH,R3
   \   0000BC   701E         JNZ     ??print_string_ptr_11
    973              {
    974                  output[0] = '\"';
   \   0000BE   7422         MOV     A,#0x22
   \   0000C0   F0           MOVX    @DPTR,A
    975                  memcpy(output + 1, input, output_length);
   \   0000C1                ; Setup parameters for call to function memcpy
   \   0000C1   78..         MOV     R0,#?V0 + 8
   \   0000C3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C6   AC..         MOV     R4,?V0 + 6
   \   0000C8   AD..         MOV     R5,?V0 + 7
   \   0000CA   8A82         MOV     DPL,R2
   \   0000CC   8B83         MOV     DPH,R3
   \   0000CE   A3           INC     DPTR
   \   0000CF   AA82         MOV     R2,DPL
   \   0000D1   AB83         MOV     R3,DPH
   \   0000D3   12....       LCALL   ??Subroutine165_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_287:
   \   0000D6   12....       LCALL   ?DEALLOC_XSTACK8
    976                  output[output_length + 1] = '\"';
   \   0000D9   02....       LJMP    ??print_string_ptr_12 & 0xFFFF
    977                  output[output_length + 2] = '\0';
    978          
    979                  return true;
    980              }
    981          
    982              output[0] = '\"';
   \                     ??print_string_ptr_11:
   \   0000DC   7422         MOV     A,#0x22
   \   0000DE   F0           MOVX    @DPTR,A
    983              output_pointer = output + 1;
   \   0000DF   A3           INC     DPTR
   \   0000E0   AE82         MOV     R6,DPL
   \   0000E2   AF83         MOV     R7,DPH
    984              /* copy the string */
    985              for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   \   0000E4   85....       MOV     ?V0 + 0,?V0 + 6
   \   0000E7   85....       MOV     ?V0 + 1,?V0 + 7
   \   0000EA   8039         SJMP    ??print_string_ptr_13
    986              {
    987                  if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
    988                  {
    989                      /* normal character, copy */
    990                      *output_pointer = *input_pointer;
    991                  }
    992                  else
    993                  {
    994                      /* character needs to be escaped */
    995                      *output_pointer++ = '\\';
    996                      switch (*input_pointer)
    997                      {
    998                          case '\\':
    999                              *output_pointer = '\\';
   1000                              break;
   1001                          case '\"':
   1002                              *output_pointer = '\"';
   1003                              break;
   1004                          case '\b':
   1005                              *output_pointer = 'b';
   1006                              break;
   1007                          case '\f':
   1008                              *output_pointer = 'f';
   1009                              break;
   1010                          case '\n':
   1011                              *output_pointer = 'n';
   1012                              break;
   1013                          case '\r':
   1014                              *output_pointer = 'r';
   1015                              break;
   1016                          case '\t':
   1017                              *output_pointer = 't';
   1018                              break;
   1019                          default:
   1020                              /* escape and print as unicode codepoint */
   1021                              sprintf((char*)output_pointer, "u%04x", *input_pointer);
   \                     ??print_string_ptr_14:
   \   0000EC                ; Setup parameters for call to function sprintf
   \   0000EC   E0           MOVX    A,@DPTR
   \   0000ED   F5..         MOV     ?V0 + 4,A
   \   0000EF   75..00       MOV     ?V0 + 5,#0x0
   \   0000F2   78..         MOV     R0,#?V0 + 4
   \   0000F4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F7   7C..         MOV     R4,#`?<Constant "u%04x">` & 0xff
   \   0000F9   7D..         MOV     R5,#(`?<Constant "u%04x">` >> 8) & 0xff
   \   0000FB   EE           MOV     A,R6
   \   0000FC   FA           MOV     R2,A
   \   0000FD   EF           MOV     A,R7
   \   0000FE   FB           MOV     R3,A
   \   0000FF   12....       LCALL   ??sprintf?relay
   \   000102   7402         MOV     A,#0x2
   \   000104   12....       LCALL   ?DEALLOC_XSTACK8
   1022                              output_pointer += 4;
   \   000107   EE           MOV     A,R6
   \   000108   2404         ADD     A,#0x4
   \   00010A   FE           MOV     R6,A
   \   00010B   EF           MOV     A,R7
   \   00010C   3400         ADDC    A,#0x0
   \   00010E   FF           MOV     R7,A
   1023                              break;
   \                     ??print_string_ptr_15:
   \   00010F   85..82       MOV     DPL,?V0 + 0
   \   000112   85..83       MOV     DPH,?V0 + 1
   \   000115   A3           INC     DPTR
   \   000116   8582..       MOV     ?V0 + 0,DPL
   \   000119   8583..       MOV     ?V0 + 1,DPH
   \   00011C   8E82         MOV     DPL,R6
   \   00011E   8F83         MOV     DPH,R7
   \   000120   A3           INC     DPTR
   \   000121   AE82         MOV     R6,DPL
   \   000123   AF83         MOV     R7,DPH
   \                     ??print_string_ptr_13:
   \   000125   85..82       MOV     DPL,?V0 + 0
   \   000128   85..83       MOV     DPH,?V0 + 1
   \   00012B   E0           MOVX    A,@DPTR
   \   00012C   607E         JZ      ??print_string_ptr_12
   \   00012E   C3           CLR     C
   \   00012F   9420         SUBB    A,#0x20
   \   000131   4012         JC      ??print_string_ptr_16
   \   000133   E0           MOVX    A,@DPTR
   \   000134   6422         XRL     A,#0x22
   \   000136   600D         JZ      ??print_string_ptr_16
   \   000138   E0           MOVX    A,@DPTR
   \   000139   645C         XRL     A,#0x5c
   \   00013B   6008         JZ      ??print_string_ptr_16
   \   00013D   E0           MOVX    A,@DPTR
   \   00013E   8E82         MOV     DPL,R6
   \   000140   8F83         MOV     DPH,R7
   \                     ??print_string_ptr_17:
   \   000142   F0           MOVX    @DPTR,A
   \   000143   80CA         SJMP    ??print_string_ptr_15
   \                     ??print_string_ptr_16:
   \   000145   8E82         MOV     DPL,R6
   \   000147   8F83         MOV     DPH,R7
   \   000149   745C         MOV     A,#0x5c
   \   00014B   F0           MOVX    @DPTR,A
   \   00014C   A3           INC     DPTR
   \   00014D   AE82         MOV     R6,DPL
   \   00014F   AF83         MOV     R7,DPH
   \   000151   85..82       MOV     DPL,?V0 + 0
   \   000154   85..83       MOV     DPH,?V0 + 1
   \   000157   E0           MOVX    A,@DPTR
   \   000158   24F8         ADD     A,#-0x8
   \   00015A   6028         JZ      ??print_string_ptr_18
   \   00015C   14           DEC     A
   \   00015D   6045         JZ      ??print_string_ptr_19
   \   00015F   14           DEC     A
   \   000160   6032         JZ      ??print_string_ptr_20
   \   000162   24FE         ADD     A,#-0x2
   \   000164   6026         JZ      ??print_string_ptr_21
   \   000166   14           DEC     A
   \   000167   6033         JZ      ??print_string_ptr_22
   \   000169   24EB         ADD     A,#-0x15
   \   00016B   600F         JZ      ??print_string_ptr_23
   \   00016D   24C6         ADD     A,#-0x3a
   \   00016F   6003         JZ      $+5
   \   000171   02....       LJMP    ??print_string_ptr_14 & 0xFFFF
   \   000174   8E82         MOV     DPL,R6
   \   000176   8F83         MOV     DPH,R7
   \   000178   745C         MOV     A,#0x5c
   \   00017A   80C6         SJMP    ??print_string_ptr_17
   \                     ??print_string_ptr_23:
   \   00017C   8E82         MOV     DPL,R6
   \   00017E   8F83         MOV     DPH,R7
   \   000180   7422         MOV     A,#0x22
   \   000182   80BE         SJMP    ??print_string_ptr_17
   \                     ??print_string_ptr_18:
   \   000184   8E82         MOV     DPL,R6
   \   000186   8F83         MOV     DPH,R7
   \   000188   7462         MOV     A,#0x62
   \   00018A   80B6         SJMP    ??print_string_ptr_17
   \                     ??print_string_ptr_21:
   \   00018C   8E82         MOV     DPL,R6
   \   00018E   8F83         MOV     DPH,R7
   \   000190   7466         MOV     A,#0x66
   \   000192   80AE         SJMP    ??print_string_ptr_17
   \                     ??print_string_ptr_20:
   \   000194   8E82         MOV     DPL,R6
   \   000196   8F83         MOV     DPH,R7
   \   000198   746E         MOV     A,#0x6e
   \   00019A   80A6         SJMP    ??print_string_ptr_17
   \                     ??print_string_ptr_22:
   \   00019C   8E82         MOV     DPL,R6
   \   00019E   8F83         MOV     DPH,R7
   \   0001A0   7472         MOV     A,#0x72
   \   0001A2   809E         SJMP    ??print_string_ptr_17
   \                     ??print_string_ptr_19:
   \   0001A4   8E82         MOV     DPL,R6
   \   0001A6   8F83         MOV     DPH,R7
   \   0001A8   7474         MOV     A,#0x74
   \   0001AA   8096         SJMP    ??print_string_ptr_17
   1024                      }
   1025                  }
   1026              }
   1027              output[output_length + 1] = '\"';
   \                     ??print_string_ptr_12:
   \   0001AC   E5..         MOV     A,?V0 + 2
   \   0001AE   25..         ADD     A,?V0 + 8
   \   0001B0   F8           MOV     R0,A
   \   0001B1   E5..         MOV     A,?V0 + 3
   \   0001B3   35..         ADDC    A,?V0 + 9
   \   0001B5   F9           MOV     R1,A
   \   0001B6   8882         MOV     DPL,R0
   \   0001B8   8983         MOV     DPH,R1
   \   0001BA   A3           INC     DPTR
   \   0001BB   7422         MOV     A,#0x22
   \   0001BD   F0           MOVX    @DPTR,A
   1028              output[output_length + 2] = '\0';
   \   0001BE   8882         MOV     DPL,R0
   \   0001C0   8983         MOV     DPH,R1
   \   0001C2   A3           INC     DPTR
   \   0001C3   A3           INC     DPTR
   \   0001C4   E4           CLR     A
   \   0001C5   F0           MOVX    @DPTR,A
   1029          
   1030              return true;
   \   0001C6   7A01         MOV     R2,#0x1
   \   0001C8   FB           MOV     R3,A
   \                     ??print_string_ptr_3:
   \   0001C9                REQUIRE ?Subroutine6
   \   0001C9                ; // Fall through to label ?Subroutine6
   1031          }
   1032          
   1033          /* Invoke print_string_ptr (which is useful) on an item. */
   1034          static cJSON_bool print_string(const cJSON * const item, printbuffer * const p)
   1035          {
   1036              return print_string_ptr((unsigned char*)item->valuestring, p);
   1037          }
   1038          
   1039          /* Predeclare these prototypes. */
   1040          static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer);
   1041          static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer);
   1042          static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer);
   1043          static cJSON_bool print_array(const cJSON * const item, printbuffer * const output_buffer);
   1044          static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
   1045          static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);
   1046          
   1047          /* Utility to jump whitespace and cr/lf */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1048          static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
   \                     buffer_skip_whitespace:
   1049          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1050              if ((buffer == NULL) || (buffer->content == NULL))
   \   000004   EA           MOV     A,R2
   \   000005   4B           ORL     A,R3
   \   000006   6009         JZ      ??buffer_skip_whitespace_0
   \   000008   8A82         MOV     DPL,R2
   \   00000A   8B83         MOV     DPH,R3
   \   00000C   12....       LCALL   ??Subroutine205_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_464:
   \   00000F   7007         JNZ     ??buffer_skip_whitespace_1
   1051              {
   1052                  return NULL;
   \                     ??buffer_skip_whitespace_0:
   \   000011   7A00         MOV     R2,#0x0
   \   000013   7B00         MOV     R3,#0x0
   1053              }
   \                     ??buffer_skip_whitespace_2:
   \   000015   02....       LJMP    ??Subroutine209_0 & 0xFFFF
   \                     ??buffer_skip_whitespace_1:
   \   000018   8A82         MOV     DPL,R2
   \   00001A   8B83         MOV     DPH,R3
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   C082         PUSH    DPL
   \   000022   C083         PUSH    DPH
   \   000024   8A82         MOV     DPL,R2
   \   000026   8B83         MOV     DPH,R3
   \   000028   12....       LCALL   ??Subroutine229_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_619:
   \   00002B   D083         POP     DPH
   \   00002D   D082         POP     DPL
   \   00002F   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000032   4019         JC      ??CrossCallReturnLabel_239
   1054          
   1055              if (cannot_access_at_index(buffer, 0))
   1056              {
   1057                  return buffer;
   \                     ??buffer_skip_whitespace_3:
   \   000034   80DF         SJMP    ??buffer_skip_whitespace_2
   1058              }
   1059          
   1060              while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
   1061              {
   1062                 buffer->offset++;
   \                     ??buffer_skip_whitespace_4:
   \   000036   E0           MOVX    A,@DPTR
   \   000037   28           ADD     A,R0
   \   000038   FC           MOV     R4,A
   \   000039   A3           INC     DPTR
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   39           ADDC    A,R1
   \   00003C   8C82         MOV     DPL,R4
   \   00003E   F583         MOV     DPH,A
   \   000040   E0           MOVX    A,@DPTR
   \   000041   C3           CLR     C
   \   000042   9421         SUBB    A,#0x21
   \   000044   50CF         JNC     ??buffer_skip_whitespace_2
   \   000046   8A82         MOV     DPL,R2
   \   000048   8B83         MOV     DPH,R3
   \   00004A   12....       LCALL   ??Subroutine157_0 & 0xFFFF
   1063              }
   \                     ??CrossCallReturnLabel_239:
   \   00004D   8A82         MOV     DPL,R2
   \   00004F   8B83         MOV     DPH,R3
   \   000051   A3           INC     DPTR
   \   000052   A3           INC     DPTR
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   C082         PUSH    DPL
   \   000057   C083         PUSH    DPH
   \   000059   8A82         MOV     DPL,R2
   \   00005B   8B83         MOV     DPH,R3
   \   00005D   12....       LCALL   ??Subroutine229_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_620:
   \   000060   D083         POP     DPH
   \   000062   D082         POP     DPL
   \   000064   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000067   8A82         MOV     DPL,R2
   \   000069   8B83         MOV     DPH,R3
   \   00006B   A3           INC     DPTR
   \   00006C   A3           INC     DPTR
   \   00006D   12....       LCALL   ??Subroutine229_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_621:
   \   000070   8A82         MOV     DPL,R2
   \   000072   8B83         MOV     DPH,R3
   \   000074   40C0         JC      ??buffer_skip_whitespace_4
   1064          
   1065              if (buffer->offset == buffer->length)
   \   000076   A3           INC     DPTR
   \   000077   A3           INC     DPTR
   \   000078   E0           MOVX    A,@DPTR
   \   000079   68           XRL     A,R0
   \   00007A   7003         JNZ     ??buffer_skip_whitespace_5
   \   00007C   A3           INC     DPTR
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   69           XRL     A,R1
   \                     ??buffer_skip_whitespace_5:
   \   00007F   7094         JNZ     ??buffer_skip_whitespace_2
   1066              {
   1067                  buffer->offset--;
   \   000081   8A82         MOV     DPL,R2
   \   000083   8B83         MOV     DPH,R3
   \   000085   12....       LCALL   ??Subroutine172_0 & 0xFFFF
   1068              }
   \                     ??CrossCallReturnLabel_310:
   \   000088   808B         SJMP    ??buffer_skip_whitespace_2
   1069          
   1070              return buffer;
   1071          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine157_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004                REQUIRE ??Subroutine158_0
   \   000004                ; // Fall through to label ??Subroutine158_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine158_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2401         ADD     A,#0x1
   \   000003                REQUIRE ??Subroutine159_0
   \   000003                ; // Fall through to label ??Subroutine159_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine159_0:
   \   000000   12....       LCALL   ?Subroutine151 & 0xFFFF
   \                     ??CrossCallReturnLabel_247:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine172_0:
   \   000000   12....       LCALL   ?Subroutine139 & 0xFFFF
   \                     ??CrossCallReturnLabel_317:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine139:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   12....       LCALL   ?Subroutine152 & 0xFFFF
   \                     ??CrossCallReturnLabel_319:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine152:
   \   000000   24FF         ADD     A,#-0x1
   \   000002   F0           MOVX    @DPTR,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   34FF         ADDC    A,#-0x1
   \   000007   F0           MOVX    @DPTR,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine151:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   3400         ADDC    A,#0x0
   \   000005   F0           MOVX    @DPTR,A
   \   000006   22           RET
   1072          
   1073          /* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
   1074          static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
   1075          {
   1076              if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
   1077              {
   1078                  return NULL;
   1079              }
   1080          
   1081              if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
   1082              {
   1083                  buffer->offset += 3;
   1084              }
   1085          
   1086              return buffer;
   1087          }
   1088          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1089          CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
   \                     cJSON_ParseWithOpts:
   1090          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   740A         MOV     A,#0xa
   \   00000B   12....       LCALL   ?XSTACK_DISP0_8
   \   00000E   12....       LCALL   ??Subroutine176_0 & 0xFFFF
   1091              size_t buffer_length;
   1092          
   1093              if (NULL == value)
   \                     ??CrossCallReturnLabel_337:
   \   000011   7006         JNZ     ??cJSON_ParseWithOpts_0
   1094              {
   1095                  return NULL;
   \   000013   7A00         MOV     R2,#0x0
   \   000015   7B00         MOV     R3,#0x0
   \   000017   8025         SJMP    ??cJSON_ParseWithOpts_1
   1096              }
   1097          
   1098              /* Adding null character size due to require_null_terminated. */
   1099              buffer_length = strlen(value) + sizeof("");
   1100          
   1101              return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
   \                     ??cJSON_ParseWithOpts_0:
   \   000019                ; Setup parameters for call to function cJSON_ParseWithLengthOpts
   \   000019   78..         MOV     R0,#?V0 + 0
   \   00001B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001E   8C..         MOV     ?V0 + 0,R4
   \   000020   8D..         MOV     ?V0 + 1,R5
   \   000022   78..         MOV     R0,#?V0 + 0
   \   000024   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000027                ; Setup parameters for call to function strlen
   \   000027   12....       LCALL   ??strlen?relay
   \   00002A   EA           MOV     A,R2
   \   00002B   2401         ADD     A,#0x1
   \   00002D   FC           MOV     R4,A
   \   00002E   EB           MOV     A,R3
   \   00002F   3400         ADDC    A,#0x0
   \   000031   FD           MOV     R5,A
   \   000032   EE           MOV     A,R6
   \   000033   FA           MOV     R2,A
   \   000034   EF           MOV     A,R7
   \   000035   FB           MOV     R3,A
   \   000036   12....       LCALL   ??cJSON_ParseWithLengthOpts?relay
   \   000039   7404         MOV     A,#0x4
   \   00003B   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??cJSON_ParseWithOpts_1:
   \   00003E   80..         SJMP    ??Subroutine162_0
   1102          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine176_0:
   \   000000   12....       LCALL   ?Subroutine130 & 0xFFFF
   \                     ??CrossCallReturnLabel_539:
   \   000003   EE           MOV     A,R6
   \   000004   4F           ORL     A,R7
   \   000005   22           RET
   1103          
   1104          /* Parse an object - create a new root, and populate. */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1105          CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
   \                     cJSON_ParseWithLengthOpts:
   1106          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV     A,#-0xe
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 2,R2
   \   00000C   8B..         MOV     ?V0 + 3,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   F8           MOV     R0,A
   \   000010   ED           MOV     A,R5
   \   000011   F9           MOV     R1,A
   \   000012   741E         MOV     A,#0x1e
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   E0           MOVX    A,@DPTR
   \   000018   FE           MOV     R6,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   FF           MOV     R7,A
   \   00001C   7420         MOV     A,#0x20
   \   00001E   12....       LCALL   ?XSTACK_DISP0_8
   \   000021   12....       LCALL   ?Subroutine59 & 0xFFFF
   1107              parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
   \                     ??CrossCallReturnLabel_91:
   \   000024   85..82       MOV     DPL,?XSP + 0
   \   000027   85..83       MOV     DPH,?XSP + 1
   \   00002A   AC82         MOV     R4,DPL
   \   00002C   AD83         MOV     R5,DPH
   \   00002E   7583..       MOV     DPH,#(`?<Constant {(unsigned char const *)0, 0, 0, 0,` >> 8) & 0xff
   \   000031   7582..       MOV     DPL,#`?<Constant {(unsigned char const *)0, 0, 0, 0,` & 0xff
   \   000034   740E         MOV     A,#0xe
   \   000036   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   1108              cJSON *item = NULL;
   1109          
   1110              /* reset error position */
   1111              global_error.json = NULL;
   \   000039   90....       MOV     DPTR,#global_error
   \   00003C   F0           MOVX    @DPTR,A
   \   00003D   A3           INC     DPTR
   \   00003E   F0           MOVX    @DPTR,A
   1112              global_error.position = 0;
   \   00003F   A3           INC     DPTR
   \   000040   F0           MOVX    @DPTR,A
   \   000041   A3           INC     DPTR
   \   000042   F0           MOVX    @DPTR,A
   1113          
   1114              if (value == NULL || 0 == buffer_length)
   \   000043   EA           MOV     A,R2
   \   000044   45..         ORL     A,?V0 + 3
   \   000046   7003         JNZ     $+5
   \   000048   02....       LJMP    ??CrossCallReturnLabel_445 & 0xFFFF
   \   00004B   E8           MOV     A,R0
   \   00004C   49           ORL     A,R1
   \   00004D   7003         JNZ     $+5
   \   00004F   02....       LJMP    ??cJSON_ParseWithLengthOpts_0 & 0xFFFF
   1115              {
   1116                  goto fail;
   1117              }
   1118          
   1119              buffer.content = (const unsigned char*)value;
   \   000052   85..82       MOV     DPL,?XSP + 0
   \   000055   85..83       MOV     DPH,?XSP + 1
   \   000058   12....       LCALL   ??Subroutine186_0 & 0xFFFF
   1120              buffer.length = buffer_length;
   \                     ??CrossCallReturnLabel_373:
   \   00005B   7402         MOV     A,#0x2
   \   00005D   12....       LCALL   ?XSTACK_DISP0_8
   \   000060   12....       LCALL   ??Subroutine200_0 & 0xFFFF
   1121              buffer.offset = 0;
   \                     ??CrossCallReturnLabel_433:
   \   000063   7404         MOV     A,#0x4
   \   000065   12....       LCALL   ?XSTACK_DISP0_8
   \   000068   E4           CLR     A
   \   000069   F0           MOVX    @DPTR,A
   \   00006A   A3           INC     DPTR
   \   00006B   F0           MOVX    @DPTR,A
   1122              buffer.hooks = global_hooks;
   \   00006C   7408         MOV     A,#0x8
   \   00006E   12....       LCALL   ?XSTACK_DISP0_8
   \   000071   AC82         MOV     R4,DPL
   \   000073   AD83         MOV     R5,DPH
   \   000075   7583..       MOV     DPH,#(global_hooks >> 8) & 0xff
   \   000078   7582..       MOV     DPL,#global_hooks & 0xff
   \   00007B   7406         MOV     A,#0x6
   \   00007D   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   1123          
   1124              item = cJSON_New_Item(&global_hooks);
   \   000080                ; Setup parameters for call to function cJSON_New_Item
   \   000080   7A..         MOV     R2,#global_hooks & 0xff
   \   000082   7B..         MOV     R3,#(global_hooks >> 8) & 0xff
   \   000084   12....       LCALL   ??cJSON_New_Item?relay
   \   000087   8A..         MOV     ?V0 + 0,R2
   \   000089   8B..         MOV     ?V0 + 1,R3
   1125              if (item == NULL) /* memory fail */
   \   00008B   EA           MOV     A,R2
   \   00008C   45..         ORL     A,?V0 + 1
   \   00008E   7003         JNZ     $+5
   \   000090   02....       LJMP    ??cJSON_ParseWithLengthOpts_0 & 0xFFFF
   1126              {
   1127                  goto fail;
   1128              }
   1129          
   1130              if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
   \   000093   85..82       MOV     DPL,?XSP + 0
   \   000096   85..83       MOV     DPH,?XSP + 1
   \   000099   12....       LCALL   ??Subroutine205_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_465:
   \   00009C   6056         JZ      ??cJSON_ParseWithLengthOpts_1
   \   00009E   7404         MOV     A,#0x4
   \   0000A0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A3   12....       LCALL   ??Subroutine205_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_466:
   \   0000A6   704C         JNZ     ??cJSON_ParseWithLengthOpts_1
   \   0000A8   7402         MOV     A,#0x2
   \   0000AA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AD   C3           CLR     C
   \   0000AE   E0           MOVX    A,@DPTR
   \   0000AF   9405         SUBB    A,#0x5
   \   0000B1   A3           INC     DPTR
   \   0000B2   E0           MOVX    A,@DPTR
   \   0000B3   9400         SUBB    A,#0x0
   \   0000B5   4031         JC      ??CrossCallReturnLabel_236
   \   0000B7                ; Setup parameters for call to function strncmp
   \   0000B7   75..03       MOV     ?V0 + 6,#0x3
   \   0000BA   75..00       MOV     ?V0 + 7,#0x0
   \   0000BD   78..         MOV     R0,#?V0 + 6
   \   0000BF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C2   7C..         MOV     R4,#`?<Constant "\\357\\273\\277">` & 0xff
   \   0000C4   7D..         MOV     R5,#(`?<Constant "\\357\\273\\277">` >> 8) & 0xff
   \   0000C6   7402         MOV     A,#0x2
   \   0000C8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CB   12....       LCALL   ??Subroutine195_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_408:
   \   0000CE   12....       LCALL   ??strncmp?relay
   \   0000D1   7402         MOV     A,#0x2
   \   0000D3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D6   8B..         MOV     ?V0 + 7,R3
   \   0000D8   EA           MOV     A,R2
   \   0000D9   45..         ORL     A,?V0 + 7
   \   0000DB   700B         JNZ     ??CrossCallReturnLabel_236
   \   0000DD   7404         MOV     A,#0x4
   \   0000DF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E2   E0           MOVX    A,@DPTR
   \   0000E3   2403         ADD     A,#0x3
   \   0000E5   12....       LCALL   ??Subroutine159_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_236:
   \   0000E8   85..82       MOV     DPL,?XSP + 0
   \   0000EB   85..83       MOV     DPH,?XSP + 1
   \   0000EE   AA82         MOV     R2,DPL
   \   0000F0   AB83         MOV     R3,DPH
   \   0000F2   8004         SJMP    ??cJSON_ParseWithLengthOpts_2
   \                     ??cJSON_ParseWithLengthOpts_1:
   \   0000F4   7A00         MOV     R2,#0x0
   \   0000F6   7B00         MOV     R3,#0x0
   \                     ??cJSON_ParseWithLengthOpts_2:
   \   0000F8                ; Setup parameters for call to function parse_value
   \   0000F8                ; Setup parameters for call to function buffer_skip_whitespace
   \   0000F8   12....       LCALL   ??buffer_skip_whitespace?relay
   \   0000FB   EA           MOV     A,R2
   \   0000FC   FC           MOV     R4,A
   \   0000FD   EB           MOV     A,R3
   \   0000FE   FD           MOV     R5,A
   \   0000FF   AA..         MOV     R2,?V0 + 0
   \   000101   AB..         MOV     R3,?V0 + 1
   \   000103   12....       LCALL   ?Subroutine126 & 0xFFFF
   \                     ??CrossCallReturnLabel_195:
   \   000106   6052         JZ      ??cJSON_ParseWithLengthOpts_3
   1131              {
   1132                  /* parse failure. ep is set. */
   1133                  goto fail;
   1134              }
   1135          
   1136              /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
   1137              if (require_null_terminated)
   \   000108   E5..         MOV     A,?V0 + 4
   \   00010A   45..         ORL     A,?V0 + 5
   \   00010C   6034         JZ      ??cJSON_ParseWithLengthOpts_4
   1138              {
   1139                  buffer_skip_whitespace(&buffer);
   \   00010E                ; Setup parameters for call to function buffer_skip_whitespace
   \   00010E   85..82       MOV     DPL,?XSP + 0
   \   000111   85..83       MOV     DPH,?XSP + 1
   \   000114   AA82         MOV     R2,DPL
   \   000116   AB83         MOV     R3,DPH
   \   000118   12....       LCALL   ??buffer_skip_whitespace?relay
   1140                  if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
   \   00011B   7404         MOV     A,#0x4
   \   00011D   12....       LCALL   ?XSTACK_DISP0_8
   \   000120   C082         PUSH    DPL
   \   000122   C083         PUSH    DPH
   \   000124   7402         MOV     A,#0x2
   \   000126   12....       LCALL   ?XSTACK_DISP0_8
   \   000129   12....       LCALL   ??Subroutine230_0 & 0xFFFF
   1141                  {
   1142                      goto fail;
   1143                  }
   1144              }
   \                     ??CrossCallReturnLabel_614:
   \   00012C   D083         POP     DPH
   \   00012E   D082         POP     DPL
   \   000130   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000133   5025         JNC     ??cJSON_ParseWithLengthOpts_3
   \   000135   7404         MOV     A,#0x4
   \   000137   12....       LCALL   ?XSTACK_DISP0_8
   \   00013A   12....       LCALL   ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   00013D   12....       LCALL   ??Subroutine173_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_320:
   \   000140   7018         JNZ     ??cJSON_ParseWithLengthOpts_3
   1145              if (return_parse_end)
   \                     ??cJSON_ParseWithLengthOpts_4:
   \   000142   EE           MOV     A,R6
   \   000143   4F           ORL     A,R7
   \   000144   600E         JZ      ??CrossCallReturnLabel_434
   1146              {
   1147                  *return_parse_end = (const char*)buffer_at_offset(&buffer);
   \   000146   7404         MOV     A,#0x4
   \   000148   12....       LCALL   ?XSTACK_DISP0_8
   \   00014B   12....       LCALL   ?Subroutine51 & 0xFFFF
   1148              }
   \                     ??CrossCallReturnLabel_78:
   \   00014E   12....       LCALL   ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   000151   12....       LCALL   ??Subroutine200_0 & 0xFFFF
   1149          
   1150              return item;
   \                     ??CrossCallReturnLabel_434:
   \   000154   AA..         MOV     R2,?V0 + 0
   \   000156   AB..         MOV     R3,?V0 + 1
   \   000158   8065         SJMP    ??cJSON_ParseWithLengthOpts_5
   1151          
   1152          fail:
   1153              if (item != NULL)
   1154              {
   1155                  cJSON_Delete(item);
   \                     ??cJSON_ParseWithLengthOpts_3:
   \   00015A                ; Setup parameters for call to function cJSON_Delete
   \   00015A   AA..         MOV     R2,?V0 + 0
   \   00015C   AB..         MOV     R3,?V0 + 1
   \   00015E   12....       LCALL   ??cJSON_Delete?relay
   1156              }
   1157          
   1158              if (value != NULL)
   1159              {
   1160                  error local_error;
   1161                  local_error.json = (const unsigned char*)value;
   1162                  local_error.position = 0;
   \                     ??cJSON_ParseWithLengthOpts_0:
   \   000161   7800         MOV     R0,#0x0
   \   000163   7900         MOV     R1,#0x0
   1163          
   1164                  if (buffer.offset < buffer.length)
   \   000165   7404         MOV     A,#0x4
   \   000167   12....       LCALL   ?XSTACK_DISP0_8
   \   00016A   C082         PUSH    DPL
   \   00016C   C083         PUSH    DPH
   \   00016E   7402         MOV     A,#0x2
   \   000170   12....       LCALL   ?XSTACK_DISP0_8
   \   000173   12....       LCALL   ??Subroutine195_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_409:
   \   000176   D083         POP     DPH
   \   000178   D082         POP     DPL
   \   00017A   C3           CLR     C
   \   00017B   E0           MOVX    A,@DPTR
   \   00017C   9A           SUBB    A,R2
   \   00017D   A3           INC     DPTR
   \   00017E   E0           MOVX    A,@DPTR
   \   00017F   9B           SUBB    A,R3
   \   000180   500B         JNC     ??cJSON_ParseWithLengthOpts_6
   1165                  {
   1166                      local_error.position = buffer.offset;
   \   000182   7404         MOV     A,#0x4
   \   000184   12....       LCALL   ?XSTACK_DISP0_8
   \   000187   E0           MOVX    A,@DPTR
   \   000188   F8           MOV     R0,A
   \   000189   A3           INC     DPTR
   \   00018A   E0           MOVX    A,@DPTR
   \   00018B   8011         SJMP    ??cJSON_ParseWithLengthOpts_7
   1167                  }
   1168                  else if (buffer.length > 0)
   \                     ??cJSON_ParseWithLengthOpts_6:
   \   00018D   EA           MOV     A,R2
   \   00018E   4B           ORL     A,R3
   \   00018F   600E         JZ      ??cJSON_ParseWithLengthOpts_8
   1169                  {
   1170                      local_error.position = buffer.length - 1;
   \   000191   7402         MOV     A,#0x2
   \   000193   12....       LCALL   ?XSTACK_DISP0_8
   \   000196   E0           MOVX    A,@DPTR
   \   000197   24FF         ADD     A,#-0x1
   \   000199   F8           MOV     R0,A
   \   00019A   A3           INC     DPTR
   \   00019B   E0           MOVX    A,@DPTR
   \   00019C   34FF         ADDC    A,#-0x1
   \                     ??cJSON_ParseWithLengthOpts_7:
   \   00019E   F9           MOV     R1,A
   1171                  }
   1172          
   1173                  if (return_parse_end != NULL)
   \                     ??cJSON_ParseWithLengthOpts_8:
   \   00019F   EE           MOV     A,R6
   \   0001A0   4F           ORL     A,R7
   \   0001A1   600F         JZ      ??CrossCallReturnLabel_374
   1174                  {
   1175                      *return_parse_end = (const char*)local_error.json + local_error.position;
   \   0001A3   E5..         MOV     A,?V0 + 2
   \   0001A5   28           ADD     A,R0
   \   0001A6   FA           MOV     R2,A
   \   0001A7   E5..         MOV     A,?V0 + 3
   \   0001A9   39           ADDC    A,R1
   \   0001AA   FB           MOV     R3,A
   \   0001AB   8E82         MOV     DPL,R6
   \   0001AD   8F83         MOV     DPH,R7
   \   0001AF   12....       LCALL   ??Subroutine186_0 & 0xFFFF
   1176                  }
   1177          
   1178                  global_error = local_error;
   \                     ??CrossCallReturnLabel_374:
   \   0001B2   90....       MOV     DPTR,#global_error
   \   0001B5   12....       LCALL   ??Subroutine177_0 & 0xFFFF
   1179              }
   \                     ??CrossCallReturnLabel_338:
   \   0001B8   12....       LCALL   ??Subroutine199_0 & 0xFFFF
   1180          
   1181              return NULL;
   \                     ??CrossCallReturnLabel_445:
   \   0001BB   7A00         MOV     R2,#0x0
   \   0001BD   7B00         MOV     R3,#0x0
   \                     ??cJSON_ParseWithLengthOpts_5:
   \   0001BF   740E         MOV     A,#0xe
   \   0001C1   02....       LJMP    ?Subroutine2 & 0xFFFF
   1182          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   12....       LCALL   ??Subroutine206_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_633:
   \   000003   85..82       MOV     DPL,?XSP + 0
   \   000006   85..83       MOV     DPH,?XSP + 1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine126:
   \   000000   12....       LCALL   ??parse_value?relay
   \   000003   8B..         MOV     ?V0 + 7,R3
   \   000005   EA           MOV     A,R2
   \   000006   45..         ORL     A,?V0 + 7
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine173_0:
   \   000000   12....       LCALL   ?Subroutine150 & 0xFFFF
   \                     ??CrossCallReturnLabel_326:
   \   000003   8A82         MOV     DPL,R2
   \   000005   F583         MOV     DPH,A
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine177_0:
   \   000000   E5..         MOV     A,?V0 + 2
   \   000002   F0           MOVX    @DPTR,A
   \   000003   A3           INC     DPTR
   \   000004   E5..         MOV     A,?V0 + 3
   \   000006   F0           MOVX    @DPTR,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine186_0:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine190_0
   \   000003                ; // Fall through to label ??Subroutine190_0
   1183          
   1184          /* Default options for cJSON_Parse */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine160_0:
   \   000000   7402         MOV     A,#0x2
   \   000002                REQUIRE ??Subroutine161_0
   \   000002                ; // Fall through to label ??Subroutine161_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine161_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine162_0
   \   000003                ; // Fall through to label ??Subroutine162_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1185          CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
   \                     cJSON_Parse:
   1186          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1187              return cJSON_ParseWithOpts(value, 0, 0);
   \   000005                ; Setup parameters for call to function cJSON_ParseWithOpts
   \   000005   E4           CLR     A
   \   000006   F5..         MOV     ?V0 + 0,A
   \   000008   F5..         MOV     ?V0 + 1,A
   \   00000A   78..         MOV     R0,#?V0 + 0
   \   00000C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00000F   7C00         MOV     R4,#0x0
   \   000011   7D00         MOV     R5,#0x0
   \   000013   12....       LCALL   ??cJSON_ParseWithOpts?relay
   \   000016   02....       LJMP    ??Subroutine160_0 & 0xFFFF
   1188          }
   1189          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1190          CJSON_PUBLIC(cJSON *) cJSON_ParseWithLength(const char *value, size_t buffer_length)
   \                     cJSON_ParseWithLength:
   1191          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1192              return cJSON_ParseWithLengthOpts(value, buffer_length, 0, 0);
   \   000005                ; Setup parameters for call to function cJSON_ParseWithLengthOpts
   \   000005   E4           CLR     A
   \   000006   F5..         MOV     ?V0 + 0,A
   \   000008   F5..         MOV     ?V0 + 1,A
   \   00000A   78..         MOV     R0,#?V0 + 0
   \   00000C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00000F   78..         MOV     R0,#?V0 + 0
   \   000011   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000014   12....       LCALL   ??cJSON_ParseWithLengthOpts?relay
   \   000017   7404         MOV     A,#0x4
   \   000019   02....       LJMP    ??Subroutine161_0 & 0xFFFF
   1193          }
   1194          
   1195          #define cjson_min(a, b) (((a) < (b)) ? (a) : (b))
   1196          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1197          static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   \                     print:
   1198          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 18
   \   000005   74EE         MOV     A,#-0x12
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 4,R2
   \   00000C   8B..         MOV     ?V0 + 5,R3
   \   00000E   8C..         MOV     ?V0 + 2,R4
   \   000010   8D..         MOV     ?V0 + 3,R5
   \   000012   7422         MOV     A,#0x22
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   12....       LCALL   ??Subroutine212_0 & 0xFFFF
   1199              static const size_t default_buffer_size = 256;
   1200              printbuffer buffer[1];
   1201              unsigned char *printed = NULL;
   \                     ??CrossCallReturnLabel_523:
   \   00001A   7E00         MOV     R6,#0x0
   \   00001C   7F00         MOV     R7,#0x0
   1202          
   1203              memset(buffer, 0, sizeof(buffer));
   \   00001E                ; Setup parameters for call to function memset
   \   00001E   75..12       MOV     ?V0 + 6,#0x12
   \   000021   8E..         MOV     ?V0 + 7,R6
   \   000023   78..         MOV     R0,#?V0 + 6
   \   000025   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000028   7C00         MOV     R4,#0x0
   \   00002A   7D00         MOV     R5,#0x0
   \   00002C   7402         MOV     A,#0x2
   \   00002E   12....       LCALL   ?XSTACK_DISP0_8
   \   000031   AA82         MOV     R2,DPL
   \   000033   AB83         MOV     R3,DPH
   \   000035   12....       LCALL   ??memset?relay
   \   000038   7402         MOV     A,#0x2
   \   00003A   12....       LCALL   ?DEALLOC_XSTACK8
   1204          
   1205              /* create buffer */
   1206              buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   \   00003D                ; Setup parameters for indirect call
   \   00003D   7A00         MOV     R2,#0x0
   \   00003F   7B01         MOV     R3,#0x1
   \   000041   85..82       MOV     DPL,?V0 + 0
   \   000044   85..83       MOV     DPH,?V0 + 1
   \   000047   12....       LCALL   ??Subroutine164_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_261:
   \   00004A   12....       LCALL   ?CALL_IND
   \   00004D   85..82       MOV     DPL,?XSP + 0
   \   000050   85..83       MOV     DPH,?XSP + 1
   \   000053   12....       LCALL   ??Subroutine186_0 & 0xFFFF
   1207              buffer->length = default_buffer_size;
   \                     ??CrossCallReturnLabel_375:
   \   000056   7402         MOV     A,#0x2
   \   000058   12....       LCALL   ?XSTACK_DISP0_8
   \   00005B   E4           CLR     A
   \   00005C   F0           MOVX    @DPTR,A
   \   00005D   A3           INC     DPTR
   \   00005E   04           INC     A
   \   00005F   F0           MOVX    @DPTR,A
   1208              buffer->format = format;
   \   000060   740A         MOV     A,#0xa
   \   000062   12....       LCALL   ?XSTACK_DISP0_8
   \   000065   E5..         MOV     A,?V0 + 2
   \   000067   F0           MOVX    @DPTR,A
   \   000068   A3           INC     DPTR
   \   000069   E5..         MOV     A,?V0 + 3
   \   00006B   12....       LCALL   ??Subroutine163_0 & 0xFFFF
   1209              buffer->hooks = *hooks;
   \                     ??CrossCallReturnLabel_253:
   \   00006E   C082         PUSH    DPL
   \   000070   C083         PUSH    DPH
   \   000072   740C         MOV     A,#0xc
   \   000074   12....       LCALL   ?XSTACK_DISP0_8
   \   000077   AC82         MOV     R4,DPL
   \   000079   AD83         MOV     R5,DPH
   \   00007B   D083         POP     DPH
   \   00007D   D082         POP     DPL
   \   00007F   7406         MOV     A,#0x6
   \   000081   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   1210              if (buffer->buffer == NULL)
   \   000084   85..82       MOV     DPL,?XSP + 0
   \   000087   85..83       MOV     DPH,?XSP + 1
   \   00008A   12....       LCALL   ??Subroutine205_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_467:
   \   00008D   7003         JNZ     $+5
   \   00008F   02....       LJMP    ??print_0 & 0xFFFF
   1211              {
   1212                  goto fail;
   1213              }
   1214          
   1215              /* print the value */
   1216              if (!print_value(item, buffer))
   \   000092                ; Setup parameters for call to function print_value
   \   000092   85..82       MOV     DPL,?XSP + 0
   \   000095   85..83       MOV     DPH,?XSP + 1
   \   000098   AC82         MOV     R4,DPL
   \   00009A   AD83         MOV     R5,DPH
   \   00009C   AA..         MOV     R2,?V0 + 4
   \   00009E   AB..         MOV     R3,?V0 + 5
   \   0000A0   12....       LCALL   ??Subroutine174_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_329:
   \   0000A3   7003         JNZ     $+5
   \   0000A5   02....       LJMP    ??print_1 & 0xFFFF
   1217              {
   1218                  goto fail;
   1219              }
   1220              update_offset(buffer);
   \   0000A8                ; Setup parameters for call to function update_offset
   \   0000A8   85..82       MOV     DPL,?XSP + 0
   \   0000AB   85..83       MOV     DPH,?XSP + 1
   \   0000AE   AA82         MOV     R2,DPL
   \   0000B0   AB83         MOV     R3,DPH
   \   0000B2   12....       LCALL   ?Subroutine125 & 0xFFFF
   1221          
   1222              /* check if reallocate is available */
   1223              if (hooks->reallocate != NULL)
   \                     ??CrossCallReturnLabel_193:
   \   0000B5   12....       LCALL   ??Subroutine203_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_491:
   \   0000B8   6036         JZ      ??print_2
   1224              {
   1225                  printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
   \   0000BA                ; Setup parameters for indirect call
   \   0000BA   7404         MOV     A,#0x4
   \   0000BC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BF   12....       LCALL   ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   0000C2   85..82       MOV     DPL,?XSP + 0
   \   0000C5   85..83       MOV     DPH,?XSP + 1
   \   0000C8   12....       LCALL   ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   0000CB   A3           INC     DPTR
   \   0000CC   A3           INC     DPTR
   \   0000CD   A3           INC     DPTR
   \   0000CE   A3           INC     DPTR
   \   0000CF   12....       LCALL   ?Subroutine149 & 0xFFFF
   \                     ??CrossCallReturnLabel_607:
   \   0000D2   12....       LCALL   ?CALL_IND
   \   0000D5   8A..         MOV     ?V0 + 2,R2
   \   0000D7   8B..         MOV     ?V0 + 3,R3
   \   0000D9   AE..         MOV     R6,?V0 + 2
   \   0000DB   AF..         MOV     R7,?V0 + 3
   1226                  if (printed == NULL) {
   \   0000DD   EE           MOV     A,R6
   \   0000DE   4F           ORL     A,R7
   \   0000DF   7003         JNZ     $+5
   \   0000E1   02....       LJMP    ??print_1 & 0xFFFF
   1227                      goto fail;
   1228                  }
   1229                  buffer->buffer = NULL;
   \   0000E4   85..82       MOV     DPL,?XSP + 0
   \   0000E7   85..83       MOV     DPH,?XSP + 1
   \   0000EA   E4           CLR     A
   \   0000EB   F0           MOVX    @DPTR,A
   \   0000EC   A3           INC     DPTR
   \   0000ED   F0           MOVX    @DPTR,A
   \   0000EE   807D         SJMP    ??print_3
   1230              }
   1231              else /* otherwise copy the JSON over to a new buffer */
   1232              {
   1233                  printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
   \                     ??print_2:
   \   0000F0                ; Setup parameters for indirect call
   \   0000F0   7404         MOV     A,#0x4
   \   0000F2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F5   E0           MOVX    A,@DPTR
   \   0000F6   2401         ADD     A,#0x1
   \   0000F8   FA           MOV     R2,A
   \   0000F9   A3           INC     DPTR
   \   0000FA   E0           MOVX    A,@DPTR
   \   0000FB   12....       LCALL   ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_151:
   \   0000FE   12....       LCALL   ??Subroutine164_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_262:
   \   000101   12....       LCALL   ?CALL_IND
   \   000104   8A..         MOV     ?V0 + 2,R2
   \   000106   8B..         MOV     ?V0 + 3,R3
   \   000108   AE..         MOV     R6,?V0 + 2
   \   00010A   AF..         MOV     R7,?V0 + 3
   1234                  if (printed == NULL)
   \   00010C   EE           MOV     A,R6
   \   00010D   4F           ORL     A,R7
   \   00010E   6063         JZ      ??print_1
   1235                  {
   1236                      goto fail;
   1237                  }
   1238                  memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
   \   000110   7402         MOV     A,#0x2
   \   000112   12....       LCALL   ?XSTACK_DISP0_8
   \   000115   C082         PUSH    DPL
   \   000117   C083         PUSH    DPH
   \   000119   7404         MOV     A,#0x4
   \   00011B   12....       LCALL   ?XSTACK_DISP0_8
   \   00011E   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   000121   D083         POP     DPH
   \   000123   D082         POP     DPL
   \   000125   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000128   500C         JNC     ??print_4
   \   00012A   7402         MOV     A,#0x2
   \   00012C   12....       LCALL   ?XSTACK_DISP0_8
   \   00012F   E0           MOVX    A,@DPTR
   \   000130   F5..         MOV     ?V0 + 2,A
   \   000132   A3           INC     DPTR
   \   000133   E0           MOVX    A,@DPTR
   \   000134   800E         SJMP    ??print_5
   \                     ??print_4:
   \   000136   7404         MOV     A,#0x4
   \   000138   12....       LCALL   ?XSTACK_DISP0_8
   \   00013B   E0           MOVX    A,@DPTR
   \   00013C   2401         ADD     A,#0x1
   \   00013E   F5..         MOV     ?V0 + 2,A
   \   000140   A3           INC     DPTR
   \   000141   E0           MOVX    A,@DPTR
   \   000142   3400         ADDC    A,#0x0
   \                     ??print_5:
   \   000144   F5..         MOV     ?V0 + 3,A
   \   000146                ; Setup parameters for call to function memcpy
   \   000146   78..         MOV     R0,#?V0 + 2
   \   000148   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00014B   7402         MOV     A,#0x2
   \   00014D   12....       LCALL   ?XSTACK_DISP0_8
   \   000150   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000153   12....       LCALL   ?DEALLOC_XSTACK8
   1239                  printed[buffer->offset] = '\0'; /* just to be sure */
   \   000156   7404         MOV     A,#0x4
   \   000158   12....       LCALL   ?XSTACK_DISP0_8
   \   00015B   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   00015E   28           ADD     A,R0
   \   00015F   F582         MOV     DPL,A
   \   000161   EF           MOV     A,R7
   \   000162   39           ADDC    A,R1
   \   000163   F583         MOV     DPH,A
   \   000165   E4           CLR     A
   \   000166   F0           MOVX    @DPTR,A
   1240          
   1241                  /* free the buffer */
   1242                  hooks->deallocate(buffer->buffer);
   \   000167                ; Setup parameters for indirect call
   \   000167   12....       LCALL   ?Subroutine30 & 0xFFFF
   1243              }
   \                     ??CrossCallReturnLabel_35:
   \   00016A   12....       LCALL   ?CALL_IND
   1244          
   1245              return printed;
   \                     ??print_3:
   \   00016D   EE           MOV     A,R6
   \   00016E   FA           MOV     R2,A
   \   00016F   EF           MOV     A,R7
   \   000170   FB           MOV     R3,A
   \   000171   802B         SJMP    ??print_6
   1246          
   1247          fail:
   1248              if (buffer->buffer != NULL)
   \                     ??print_1:
   \   000173   85..82       MOV     DPL,?XSP + 0
   \   000176   85..83       MOV     DPH,?XSP + 1
   \   000179   12....       LCALL   ??Subroutine205_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_468:
   \   00017C   6006         JZ      ??print_7
   1249              {
   1250                  hooks->deallocate(buffer->buffer);
   \   00017E                ; Setup parameters for indirect call
   \   00017E   12....       LCALL   ?Subroutine30 & 0xFFFF
   1251              }
   \                     ??CrossCallReturnLabel_36:
   \   000181   12....       LCALL   ?CALL_IND
   1252          
   1253              if (printed != NULL)
   \                     ??print_7:
   \   000184   EE           MOV     A,R6
   \   000185   4F           ORL     A,R7
   \   000186   6012         JZ      ??print_0
   1254              {
   1255                  hooks->deallocate(printed);
   \   000188                ; Setup parameters for indirect call
   \   000188   EE           MOV     A,R6
   \   000189   FA           MOV     R2,A
   \   00018A   EF           MOV     A,R7
   \   00018B   FB           MOV     R3,A
   \   00018C   85..82       MOV     DPL,?V0 + 0
   \   00018F   85..83       MOV     DPH,?V0 + 1
   \   000192   A3           INC     DPTR
   \   000193   A3           INC     DPTR
   \   000194   12....       LCALL   ??Subroutine164_0 & 0xFFFF
   1256              }
   \                     ??CrossCallReturnLabel_263:
   \   000197   12....       LCALL   ?CALL_IND
   1257          
   1258              return NULL;
   \                     ??print_0:
   \   00019A   7A00         MOV     R2,#0x0
   \   00019C   7B00         MOV     R3,#0x0
   \                     ??print_6:
   \   00019E   7412         MOV     A,#0x12
   \   0001A0   02....       LJMP    ?Subroutine2 & 0xFFFF
   1259          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   12....       LCALL   ?Subroutine136 & 0xFFFF
   \                     ??CrossCallReturnLabel_210:
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   12....       LCALL   ?Subroutine129 & 0xFFFF
   \                     ??CrossCallReturnLabel_281:
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine125:
   \   000000   12....       LCALL   ??update_offset?relay
   \   000003   85..82       MOV     DPL,?V0 + 0
   \   000006   85..83       MOV     DPH,?V0 + 1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine174_0:
   \   000000   12....       LCALL   ??print_value?relay
   \   000003   8B..         MOV     ?V0 + 3,R3
   \   000005   EA           MOV     A,R2
   \   000006   45..         ORL     A,?V0 + 3
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2401         ADD     A,#0x1
   \   000003   FC           MOV     R4,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   3400         ADDC    A,#0x0
   \   000008   FD           MOV     R5,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine212_0:
   \   000000   12....       LCALL   ?Subroutine130 & 0xFFFF
   \                     ??CrossCallReturnLabel_540:
   \   000003   22           RET
   1260          
   1261          /* Render a cJSON item/entity/structure to text. */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1262          CJSON_PUBLIC(char *) cJSON_Print(const cJSON *item)
   \                     cJSON_Print:
   1263          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1264              return (char*)print(item, true, &global_hooks);
   \   000005                ; Setup parameters for call to function print
   \   000005   75....       MOV     ?V0 + 0,#global_hooks & 0xff
   \   000008   75....       MOV     ?V0 + 1,#(global_hooks >> 8) & 0xff
   \   00000B   78..         MOV     R0,#?V0 + 0
   \   00000D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000010   7C01         MOV     R4,#0x1
   \   000012                REQUIRE ?Subroutine12
   \   000012                ; // Fall through to label ?Subroutine12
   1265          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   7D00         MOV     R5,#0x0
   \   000002   12....       LCALL   ??print?relay
   \   000005   02....       LJMP    ??Subroutine160_0 & 0xFFFF
   1266          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1267          CJSON_PUBLIC(char *) cJSON_PrintUnformatted(const cJSON *item)
   \                     cJSON_PrintUnformatted:
   1268          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1269              return (char*)print(item, false, &global_hooks);
   \   000005                ; Setup parameters for call to function print
   \   000005   75....       MOV     ?V0 + 0,#global_hooks & 0xff
   \   000008   75....       MOV     ?V0 + 1,#(global_hooks >> 8) & 0xff
   \   00000B   78..         MOV     R0,#?V0 + 0
   \   00000D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000010   7C00         MOV     R4,#0x0
   \   000012   80..         SJMP    ?Subroutine12
   1270          }
   1271          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1272          CJSON_PUBLIC(char *) cJSON_PrintBuffered(const cJSON *item, int prebuffer, cJSON_bool fmt)
   \                     cJSON_PrintBuffered:
   1273          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 18
   \   000005   74EE         MOV     A,#-0x12
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   8C..         MOV     ?V0 + 0,R4
   \   000010   8D..         MOV     ?V0 + 1,R5
   \   000012   741E         MOV     A,#0x1e
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F5..         MOV     ?V0 + 2,A
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F5..         MOV     ?V0 + 3,A
   1274              printbuffer p = { 0, 0, 0, 0, 0, 0, { 0, 0, 0 } };
   \   00001E   85..82       MOV     DPL,?XSP + 0
   \   000021   85..83       MOV     DPH,?XSP + 1
   \   000024   AC82         MOV     R4,DPL
   \   000026   AD83         MOV     R5,DPH
   \   000028   7583..       MOV     DPH,#(`?<Constant {(unsigned char *)0, 0, 0, 0, 0, 0,` >> 8) & 0xff
   \   00002B   7582..       MOV     DPL,#`?<Constant {(unsigned char *)0, 0, 0, 0, 0, 0,` & 0xff
   \   00002E   7412         MOV     A,#0x12
   \   000030   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   1275          
   1276              if (prebuffer < 0)
   \   000033   C3           CLR     C
   \   000034   E5..         MOV     A,?V0 + 1
   \   000036   12....       LCALL   ??Subroutine208_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_510:
   \   000039   5006         JNC     ??cJSON_PrintBuffered_0
   1277              {
   1278                  return NULL;
   \                     ??cJSON_PrintBuffered_1:
   \   00003B   7A00         MOV     R2,#0x0
   \   00003D   7B00         MOV     R3,#0x0
   \   00003F   8074         SJMP    ??CrossCallReturnLabel_410
   1279              }
   1280          
   1281              p.buffer = (unsigned char*)global_hooks.allocate((size_t)prebuffer);
   \                     ??cJSON_PrintBuffered_0:
   \   000041                ; Setup parameters for indirect call
   \   000041   AA..         MOV     R2,?V0 + 0
   \   000043   AB..         MOV     R3,?V0 + 1
   \   000045   90....       MOV     DPTR,#global_hooks
   \   000048   12....       LCALL   ??Subroutine164_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_264:
   \   00004B   12....       LCALL   ?CALL_IND
   \   00004E   12....       LCALL   ?Subroutine106 & 0xFFFF
   1282              if (!p.buffer)
   \                     ??CrossCallReturnLabel_289:
   \   000051   12....       LCALL   ??Subroutine205_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_469:
   \   000054   60E5         JZ      ??cJSON_PrintBuffered_1
   1283              {
   1284                  return NULL;
   1285              }
   1286          
   1287              p.length = (size_t)prebuffer;
   \   000056   7402         MOV     A,#0x2
   \   000058   12....       LCALL   ?XSTACK_DISP0_8
   \   00005B   12....       LCALL   ??Subroutine211_0 & 0xFFFF
   1288              p.offset = 0;
   \                     ??CrossCallReturnLabel_516:
   \   00005E   7404         MOV     A,#0x4
   \   000060   12....       LCALL   ?XSTACK_DISP0_8
   \   000063   E4           CLR     A
   \   000064   F0           MOVX    @DPTR,A
   \   000065   A3           INC     DPTR
   \   000066   F0           MOVX    @DPTR,A
   1289              p.noalloc = false;
   \   000067   7408         MOV     A,#0x8
   \   000069   12....       LCALL   ?XSTACK_DISP0_8
   \   00006C   E4           CLR     A
   \   00006D   F0           MOVX    @DPTR,A
   \   00006E   A3           INC     DPTR
   \   00006F   F0           MOVX    @DPTR,A
   1290              p.format = fmt;
   \   000070   740A         MOV     A,#0xa
   \   000072   12....       LCALL   ?XSTACK_DISP0_8
   \   000075   12....       LCALL   ??Subroutine177_0 & 0xFFFF
   1291              p.hooks = global_hooks;
   \                     ??CrossCallReturnLabel_339:
   \   000078   740C         MOV     A,#0xc
   \   00007A   12....       LCALL   ?XSTACK_DISP0_8
   \   00007D   AC82         MOV     R4,DPL
   \   00007F   AD83         MOV     R5,DPH
   \   000081   7583..       MOV     DPH,#(global_hooks >> 8) & 0xff
   \   000084   7582..       MOV     DPL,#global_hooks & 0xff
   \   000087   7406         MOV     A,#0x6
   \   000089   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   1292          
   1293              if (!print_value(item, &p))
   \   00008C                ; Setup parameters for call to function print_value
   \   00008C   85..82       MOV     DPL,?XSP + 0
   \   00008F   85..83       MOV     DPH,?XSP + 1
   \   000092   AC82         MOV     R4,DPL
   \   000094   AD83         MOV     R5,DPH
   \   000096   EE           MOV     A,R6
   \   000097   FA           MOV     R2,A
   \   000098   EF           MOV     A,R7
   \   000099   FB           MOV     R3,A
   \   00009A   12....       LCALL   ??print_value?relay
   \   00009D   8B..         MOV     ?V0 + 1,R3
   \   00009F   EA           MOV     A,R2
   \   0000A0   45..         ORL     A,?V0 + 1
   \   0000A2   85..82       MOV     DPL,?XSP + 0
   \   0000A5   85..83       MOV     DPH,?XSP + 1
   \   0000A8   7008         JNZ     ??cJSON_PrintBuffered_2
   1294              {
   1295                  global_hooks.deallocate(p.buffer);
   \   0000AA                ; Setup parameters for indirect call
   \   0000AA   12....       LCALL   ?Subroutine23 & 0xFFFF
   1296                  return NULL;
   1297              }
   \                     ??CrossCallReturnLabel_25:
   \   0000AD   12....       LCALL   ?CALL_IND
   \   0000B0   8089         SJMP    ??cJSON_PrintBuffered_1
   1298          
   1299              return (char*)p.buffer;
   \                     ??cJSON_PrintBuffered_2:
   \   0000B2   12....       LCALL   ??Subroutine195_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_410:
   \   0000B5   7412         MOV     A,#0x12
   \   0000B7   02....       LJMP    ??Subroutine183_0 & 0xFFFF
   1300          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine106:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   EA           MOV     A,R2
   \   000007   F0           MOVX    @DPTR,A
   \   000008   A3           INC     DPTR
   \   000009   EB           MOV     A,R3
   \   00000A                REQUIRE ??Subroutine167_0
   \   00000A                ; // Fall through to label ??Subroutine167_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine183_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine184_0
   \   000003                ; // Fall through to label ??Subroutine184_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine184_0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine211_0:
   \   000000   E5..         MOV     A,?V0 + 0
   \   000002   F0           MOVX    @DPTR,A
   \   000003   A3           INC     DPTR
   \   000004   E5..         MOV     A,?V0 + 1
   \   000006   F0           MOVX    @DPTR,A
   \   000007   22           RET
   1301          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1302          CJSON_PUBLIC(cJSON_bool) cJSON_PrintPreallocated(cJSON *item, char *buffer, const int length, const cJSON_bool format)
   \                     cJSON_PrintPreallocated:
   1303          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 18
   \   000005   74EE         MOV     A,#-0x12
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EC           MOV     A,R4
   \   00000B   F8           MOV     R0,A
   \   00000C   ED           MOV     A,R5
   \   00000D   F9           MOV     R1,A
   \   00000E   741C         MOV     A,#0x1c
   \   000010   12....       LCALL   ?XSTACK_DISP0_8
   \   000013   E0           MOVX    A,@DPTR
   \   000014   FE           MOV     R6,A
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   FF           MOV     R7,A
   \   000018   741E         MOV     A,#0x1e
   \   00001A   12....       LCALL   ?XSTACK_DISP0_8
   \   00001D   12....       LCALL   ??Subroutine212_0 & 0xFFFF
   1304              printbuffer p = { 0, 0, 0, 0, 0, 0, { 0, 0, 0 } };
   \                     ??CrossCallReturnLabel_524:
   \   000020   85..82       MOV     DPL,?XSP + 0
   \   000023   85..83       MOV     DPH,?XSP + 1
   \   000026   AC82         MOV     R4,DPL
   \   000028   AD83         MOV     R5,DPH
   \   00002A   7583..       MOV     DPH,#(`?<Constant {(unsigned char *)0, 0, 0, 0, 0, 0,_1` >> 8) & 0xff
   \   00002D   7582..       MOV     DPL,#`?<Constant {(unsigned char *)0, 0, 0, 0, 0, 0,_1` & 0xff
   \   000030   7412         MOV     A,#0x12
   \   000032   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   1305          
   1306              if ((length < 0) || (buffer == NULL))
   \   000035   C3           CLR     C
   \   000036   EF           MOV     A,R7
   \   000037   12....       LCALL   ??Subroutine208_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_511:
   \   00003A   4004         JC      ??cJSON_PrintPreallocated_0
   \   00003C   E8           MOV     A,R0
   \   00003D   49           ORL     A,R1
   \   00003E   7006         JNZ     ??cJSON_PrintPreallocated_1
   1307              {
   1308                  return false;
   \                     ??cJSON_PrintPreallocated_0:
   \   000040   7A00         MOV     R2,#0x0
   \   000042   7B00         MOV     R3,#0x0
   \   000044   804F         SJMP    ??cJSON_PrintPreallocated_2
   1309              }
   1310          
   1311              p.buffer = (unsigned char*)buffer;
   \                     ??cJSON_PrintPreallocated_1:
   \   000046   85..82       MOV     DPL,?XSP + 0
   \   000049   85..83       MOV     DPH,?XSP + 1
   \   00004C   12....       LCALL   ??Subroutine200_0 & 0xFFFF
   1312              p.length = (size_t)length;
   \                     ??CrossCallReturnLabel_435:
   \   00004F   7402         MOV     A,#0x2
   \   000051   12....       LCALL   ?XSTACK_DISP0_8
   \   000054   EE           MOV     A,R6
   \   000055   F0           MOVX    @DPTR,A
   \   000056   A3           INC     DPTR
   \   000057   EF           MOV     A,R7
   \   000058   F0           MOVX    @DPTR,A
   1313              p.offset = 0;
   \   000059   7404         MOV     A,#0x4
   \   00005B   12....       LCALL   ?XSTACK_DISP0_8
   \   00005E   E4           CLR     A
   \   00005F   F0           MOVX    @DPTR,A
   \   000060   A3           INC     DPTR
   \   000061   F0           MOVX    @DPTR,A
   1314              p.noalloc = true;
   \   000062   7408         MOV     A,#0x8
   \   000064   12....       LCALL   ?XSTACK_DISP0_8
   \   000067   7401         MOV     A,#0x1
   \   000069   12....       LCALL   ??Subroutine217_0 & 0xFFFF
   1315              p.format = format;
   \                     ??CrossCallReturnLabel_561:
   \   00006C   740A         MOV     A,#0xa
   \   00006E   12....       LCALL   ?XSTACK_DISP0_8
   \   000071   12....       LCALL   ??Subroutine211_0 & 0xFFFF
   1316              p.hooks = global_hooks;
   \                     ??CrossCallReturnLabel_517:
   \   000074   740C         MOV     A,#0xc
   \   000076   12....       LCALL   ?XSTACK_DISP0_8
   \   000079   AC82         MOV     R4,DPL
   \   00007B   AD83         MOV     R5,DPH
   \   00007D   7583..       MOV     DPH,#(global_hooks >> 8) & 0xff
   \   000080   7582..       MOV     DPL,#global_hooks & 0xff
   \   000083   7406         MOV     A,#0x6
   \   000085   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   1317          
   1318              return print_value(item, &p);
   \   000088                ; Setup parameters for call to function print_value
   \   000088   85..82       MOV     DPL,?XSP + 0
   \   00008B   85..83       MOV     DPH,?XSP + 1
   \   00008E   AC82         MOV     R4,DPL
   \   000090   AD83         MOV     R5,DPH
   \   000092   12....       LCALL   ??print_value?relay
   \                     ??cJSON_PrintPreallocated_2:
   \   000095   7412         MOV     A,#0x12
   \   000097   02....       LJMP    ??Subroutine161_0 & 0xFFFF
   1319          }
   1320          
   1321          /* Parser core - when encountering text, process appropriately. */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1322          static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
   \                     parse_value:
   1323          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
   1324              if ((input_buffer == NULL) || (input_buffer->content == NULL))
   \   00000D   EE           MOV     A,R6
   \   00000E   4F           ORL     A,R7
   \   00000F   6009         JZ      ??parse_value_0
   \   000011   8E82         MOV     DPL,R6
   \   000013   8F83         MOV     DPH,R7
   \   000015   12....       LCALL   ??Subroutine205_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_470:
   \   000018   7007         JNZ     ??parse_value_1
   1325              {
   1326                  return false; /* no input */
   \                     ??parse_value_0:
   \   00001A   7A00         MOV     R2,#0x0
   \                     ??parse_value_2:
   \   00001C   7B00         MOV     R3,#0x0
   \   00001E   02....       LJMP    ??parse_value_3 & 0xFFFF
   1327              }
   \                     ??parse_value_1:
   \   000021   8E82         MOV     DPL,R6
   \   000023   8F83         MOV     DPH,R7
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   C082         PUSH    DPL
   \   000029   C083         PUSH    DPH
   \   00002B   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   00002E   D083         POP     DPH
   \   000030   D082         POP     DPL
   \   000032   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000035   4036         JC      ??parse_value_4
   \   000037                ; Setup parameters for call to function strncmp
   \   000037   75..04       MOV     ?V0 + 2,#0x4
   \   00003A   75..00       MOV     ?V0 + 3,#0x0
   \   00003D   78..         MOV     R0,#?V0 + 2
   \   00003F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000042   7C..         MOV     R4,#`?<Constant "null">` & 0xff
   \   000044   7D..         MOV     R5,#(`?<Constant "null">` >> 8) & 0xff
   \   000046   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000049   12....       LCALL   ?DEALLOC_XSTACK8
   \   00004C   8B..         MOV     ?V0 + 3,R3
   \   00004E   EA           MOV     A,R2
   \   00004F   45..         ORL     A,?V0 + 3
   \   000051   701A         JNZ     ??parse_value_4
   1328          
   1329              /* parse the different types of values */
   1330              /* null */
   1331              if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
   1332              {
   1333                  item->type = cJSON_NULL;
   \   000053   85..82       MOV     DPL,?V0 + 0
   \   000056   85..83       MOV     DPH,?V0 + 1
   \   000059   A3           INC     DPTR
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   7404         MOV     A,#0x4
   \                     ??parse_value_5:
   \   000061   12....       LCALL   ?Subroutine94 & 0xFFFF
   1334                  input_buffer->offset += 4;
   \                     ??CrossCallReturnLabel_343:
   \   000064   2404         ADD     A,#0x4
   \                     ??parse_value_6:
   \   000066   12....       LCALL   ??Subroutine159_0 & 0xFFFF
   1335                  return true;
   \                     ??CrossCallReturnLabel_237:
   \   000069   7A01         MOV     R2,#0x1
   \   00006B   80AF         SJMP    ??parse_value_2
   1336              }
   \                     ??parse_value_4:
   \   00006D   8E82         MOV     DPL,R6
   \   00006F   8F83         MOV     DPH,R7
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   C082         PUSH    DPL
   \   000075   C083         PUSH    DPH
   \   000077   8E82         MOV     DPL,R6
   \   000079   8F83         MOV     DPH,R7
   \   00007B   A3           INC     DPTR
   \   00007C   A3           INC     DPTR
   \   00007D   A3           INC     DPTR
   \   00007E   A3           INC     DPTR
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   2405         ADD     A,#0x5
   \   000082   F8           MOV     R0,A
   \   000083   A3           INC     DPTR
   \   000084   E0           MOVX    A,@DPTR
   \   000085   3400         ADDC    A,#0x0
   \   000087   F9           MOV     R1,A
   \   000088   D083         POP     DPH
   \   00008A   D082         POP     DPL
   \   00008C   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   00008F   4031         JC      ??parse_value_7
   \   000091                ; Setup parameters for call to function strncmp
   \   000091   75..05       MOV     ?V0 + 2,#0x5
   \   000094   75..00       MOV     ?V0 + 3,#0x0
   \   000097   78..         MOV     R0,#?V0 + 2
   \   000099   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009C   7C..         MOV     R4,#`?<Constant "false">` & 0xff
   \   00009E   7D..         MOV     R5,#(`?<Constant "false">` >> 8) & 0xff
   \   0000A0   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   0000A3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A6   8B..         MOV     ?V0 + 3,R3
   \   0000A8   EA           MOV     A,R2
   \   0000A9   45..         ORL     A,?V0 + 3
   \   0000AB   7015         JNZ     ??parse_value_7
   1337              /* false */
   1338              if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
   1339              {
   1340                  item->type = cJSON_False;
   \   0000AD   85..82       MOV     DPL,?V0 + 0
   \   0000B0   85..83       MOV     DPH,?V0 + 1
   \   0000B3   A3           INC     DPTR
   \   0000B4   A3           INC     DPTR
   \   0000B5   A3           INC     DPTR
   \   0000B6   A3           INC     DPTR
   \   0000B7   A3           INC     DPTR
   \   0000B8   A3           INC     DPTR
   \   0000B9   7401         MOV     A,#0x1
   \   0000BB   12....       LCALL   ?Subroutine94 & 0xFFFF
   1341                  input_buffer->offset += 5;
   1342                  return true;
   1343              }
   \                     ??CrossCallReturnLabel_344:
   \   0000BE   2405         ADD     A,#0x5
   \   0000C0   80A4         SJMP    ??parse_value_6
   \                     ??parse_value_7:
   \   0000C2   8E82         MOV     DPL,R6
   \   0000C4   8F83         MOV     DPH,R7
   \   0000C6   A3           INC     DPTR
   \   0000C7   A3           INC     DPTR
   \   0000C8   C082         PUSH    DPL
   \   0000CA   C083         PUSH    DPH
   \   0000CC   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   0000CF   D083         POP     DPH
   \   0000D1   D082         POP     DPL
   \   0000D3   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   0000D6   4038         JC      ??parse_value_8
   \   0000D8                ; Setup parameters for call to function strncmp
   \   0000D8   75..04       MOV     ?V0 + 2,#0x4
   \   0000DB   75..00       MOV     ?V0 + 3,#0x0
   \   0000DE   78..         MOV     R0,#?V0 + 2
   \   0000E0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E3   7C..         MOV     R4,#`?<Constant "true">` & 0xff
   \   0000E5   7D..         MOV     R5,#(`?<Constant "true">` >> 8) & 0xff
   \   0000E7   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   0000EA   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000ED   8B..         MOV     ?V0 + 3,R3
   \   0000EF   EA           MOV     A,R2
   \   0000F0   45..         ORL     A,?V0 + 3
   \   0000F2   701C         JNZ     ??parse_value_8
   1344              /* true */
   1345              if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
   1346              {
   1347                  item->type = cJSON_True;
   \   0000F4   85..82       MOV     DPL,?V0 + 0
   \   0000F7   85..83       MOV     DPH,?V0 + 1
   \   0000FA   A3           INC     DPTR
   \   0000FB   A3           INC     DPTR
   \   0000FC   A3           INC     DPTR
   \   0000FD   A3           INC     DPTR
   \   0000FE   A3           INC     DPTR
   \   0000FF   A3           INC     DPTR
   \   000100   7402         MOV     A,#0x2
   \   000102   F0           MOVX    @DPTR,A
   \   000103   A3           INC     DPTR
   \   000104   E4           CLR     A
   \   000105   12....       LCALL   ?Subroutine95 & 0xFFFF
   1348                  item->valueint = 1;
   1349                  input_buffer->offset += 4;
   1350                  return true;
   1351              }
   \                     ??CrossCallReturnLabel_155:
   \   000108   A3           INC     DPTR
   \   000109   A3           INC     DPTR
   \   00010A   A3           INC     DPTR
   \   00010B   A3           INC     DPTR
   \   00010C   04           INC     A
   \   00010D   02....       LJMP    ??parse_value_5 & 0xFFFF
   \                     ??parse_value_8:
   \   000110   8E82         MOV     DPL,R6
   \   000112   8F83         MOV     DPH,R7
   \   000114   A3           INC     DPTR
   \   000115   A3           INC     DPTR
   \   000116   A3           INC     DPTR
   \   000117   A3           INC     DPTR
   \   000118   C082         PUSH    DPL
   \   00011A   C083         PUSH    DPH
   \   00011C   12....       LCALL   ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_626:
   \   00011F   D083         POP     DPH
   \   000121   D082         POP     DPL
   \   000123   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000126   4003         JC      $+5
   \   000128   02....       LJMP    ??parse_value_0 & 0xFFFF
   \   00012B   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_299:
   \   00012E   6422         XRL     A,#0x22
   \   000130   700D         JNZ     ??parse_value_9
   1352              /* string */
   1353              if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
   1354              {
   1355                  return parse_string(item, input_buffer);
   \   000132                ; Setup parameters for call to function parse_string
   \   000132   EE           MOV     A,R6
   \   000133   FC           MOV     R4,A
   \   000134   EF           MOV     A,R7
   \   000135   FD           MOV     R5,A
   \   000136   AA..         MOV     R2,?V0 + 0
   \   000138   AB..         MOV     R3,?V0 + 1
   \   00013A   12....       LCALL   ??parse_string?relay
   \   00013D   8047         SJMP    ??parse_value_3
   1356              }
   \                     ??parse_value_9:
   \   00013F   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_293:
   \   000142   642D         XRL     A,#0x2d
   \   000144   600A         JZ      ??parse_value_10
   \   000146   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_294:
   \   000149   24D0         ADD     A,#-0x30
   \   00014B   C3           CLR     C
   \   00014C   940A         SUBB    A,#0xa
   \   00014E   500D         JNC     ??parse_value_11
   1357              /* number */
   1358              if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
   1359              {
   1360                  return parse_number(item, input_buffer);
   \                     ??parse_value_10:
   \   000150                ; Setup parameters for call to function parse_number
   \   000150   EE           MOV     A,R6
   \   000151   FC           MOV     R4,A
   \   000152   EF           MOV     A,R7
   \   000153   FD           MOV     R5,A
   \   000154   AA..         MOV     R2,?V0 + 0
   \   000156   AB..         MOV     R3,?V0 + 1
   \   000158   12....       LCALL   ??parse_number?relay
   \   00015B   8029         SJMP    ??parse_value_3
   1361              }
   \                     ??parse_value_11:
   \   00015D   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_295:
   \   000160   645B         XRL     A,#0x5b
   \   000162   700D         JNZ     ??parse_value_12
   1362              /* array */
   1363              if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
   1364              {
   1365                  return parse_array(item, input_buffer);
   \   000164                ; Setup parameters for call to function parse_array
   \   000164   EE           MOV     A,R6
   \   000165   FC           MOV     R4,A
   \   000166   EF           MOV     A,R7
   \   000167   FD           MOV     R5,A
   \   000168   AA..         MOV     R2,?V0 + 0
   \   00016A   AB..         MOV     R3,?V0 + 1
   \   00016C   12....       LCALL   ??parse_array?relay
   \   00016F   8015         SJMP    ??parse_value_3
   1366              }
   \                     ??parse_value_12:
   \   000171   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_296:
   \   000174   647B         XRL     A,#0x7b
   \   000176   6003         JZ      $+5
   \   000178   02....       LJMP    ??parse_value_0 & 0xFFFF
   1367              /* object */
   1368              if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
   1369              {
   1370                  return parse_object(item, input_buffer);
   \   00017B                ; Setup parameters for call to function parse_object
   \   00017B   EE           MOV     A,R6
   \   00017C   FC           MOV     R4,A
   \   00017D   EF           MOV     A,R7
   \   00017E   FD           MOV     R5,A
   \   00017F   AA..         MOV     R2,?V0 + 0
   \   000181   AB..         MOV     R3,?V0 + 1
   \   000183   12....       LCALL   ??parse_object?relay
   1371              }
   \                     ??parse_value_3:
   \   000186   02....       LJMP    ??Subroutine184_0 & 0xFFFF
   1372          
   1373              return false;
   1374          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   2404         ADD     A,#0x4
   \   00000B   F8           MOV     R0,A
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   3400         ADDC    A,#0x0
   \   000010   F9           MOV     R1,A
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004                REQUIRE ??Subroutine168_0
   \   000004                ; // Fall through to label ??Subroutine168_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine168_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   28           ADD     A,R0
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   39           ADDC    A,R1
   \   000005   8A82         MOV     DPL,R2
   \   000007   F583         MOV     DPH,A
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   12....       LCALL   ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_303:
   \   00000C   FB           MOV     R3,A
   \   00000D   12....       LCALL   ??strncmp?relay
   \   000010   7402         MOV     A,#0x2
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009                REQUIRE ??Subroutine169_0
   \   000009                ; // Fall through to label ??Subroutine169_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine169_0:
   \   000000   12....       LCALL   ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_304:
   \   000003   8A82         MOV     DPL,R2
   \   000005   F583         MOV     DPH,A
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine134:
   \   000000   F8           MOV     R0,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   F9           MOV     R1,A
   \   000004   8E82         MOV     DPL,R6
   \   000006   8F83         MOV     DPH,R7
   \   000008   12....       LCALL   ?Subroutine150 & 0xFFFF
   \                     ??CrossCallReturnLabel_325:
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine94:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine179_0
   \   000002                ; // Fall through to label ??Subroutine179_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004                REQUIRE ??Subroutine229_0
   \   000004                ; // Fall through to label ??Subroutine229_0
   1375          
   1376          /* Render a value to text. */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1377          static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
   \                     print_value:
   1378          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
   1379              unsigned char *output = NULL;
   1380          
   1381              if ((item == NULL) || (output_buffer == NULL))
   \   00000D   EA           MOV     A,R2
   \   00000E   45..         ORL     A,?V0 + 1
   \   000010   6004         JZ      ??print_value_0
   \   000012   EE           MOV     A,R6
   \   000013   4F           ORL     A,R7
   \   000014   7007         JNZ     ??print_value_1
   1382              {
   1383                  return false;
   \                     ??print_value_0:
   \   000016   7A00         MOV     R2,#0x0
   \                     ??print_value_2:
   \   000018   7B00         MOV     R3,#0x0
   \   00001A   02....       LJMP    ??print_value_3 & 0xFFFF
   1384              }
   1385          
   1386              switch ((item->type) & 0xFF)
   \                     ??print_value_1:
   \   00001D   8A82         MOV     DPL,R2
   \   00001F   8B83         MOV     DPH,R3
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   14           DEC     A
   \   000029   602D         JZ      ??print_value_4
   \   00002B   14           DEC     A
   \   00002C   6037         JZ      ??print_value_5
   \   00002E   24FE         ADD     A,#-0x2
   \   000030   6016         JZ      ??print_value_6
   \   000032   24FC         ADD     A,#-0x4
   \   000034   603A         JZ      ??print_value_7
   \   000036   24F8         ADD     A,#-0x8
   \   000038   606D         JZ      ??print_value_8
   \   00003A   24F0         ADD     A,#-0x10
   \   00003C   607A         JZ      ??print_value_9
   \   00003E   24E0         ADD     A,#-0x20
   \   000040   607B         JZ      ??print_value_10
   \   000042   24C0         ADD     A,#-0x40
   \   000044   602F         JZ      ??print_value_11
   \   000046   80CE         SJMP    ??print_value_0
   1387              {
   1388                  case cJSON_NULL:
   1389                      output = ensure(output_buffer, 5);
   \                     ??print_value_6:
   \   000048                ; Setup parameters for call to function ensure
   \   000048   12....       LCALL   ?Subroutine116 & 0xFFFF
   1390                      if (output == NULL)
   \                     ??CrossCallReturnLabel_305:
   \   00004B   60C9         JZ      ??print_value_0
   1391                      {
   1392                          return false;
   1393                      }
   1394                      strcpy((char*)output, "null");
   \   00004D                ; Setup parameters for call to function strcpy
   \   00004D   7C..         MOV     R4,#`?<Constant "null">` & 0xff
   \   00004F   7D..         MOV     R5,#(`?<Constant "null">` >> 8) & 0xff
   \                     ??print_value_12:
   \   000051   12....       LCALL   ??strcpy?relay
   1395                      return true;
   \                     ??print_value_13:
   \   000054   7A01         MOV     R2,#0x1
   \   000056   80C0         SJMP    ??print_value_2
   1396          
   1397                  case cJSON_False:
   1398                      output = ensure(output_buffer, 6);
   \                     ??print_value_4:
   \   000058                ; Setup parameters for call to function ensure
   \   000058   7C06         MOV     R4,#0x6
   \   00005A   12....       LCALL   ??Subroutine170_0 & 0xFFFF
   1399                      if (output == NULL)
   \                     ??CrossCallReturnLabel_307:
   \   00005D   60B7         JZ      ??print_value_0
   1400                      {
   1401                          return false;
   1402                      }
   1403                      strcpy((char*)output, "false");
   \   00005F                ; Setup parameters for call to function strcpy
   \   00005F   7C..         MOV     R4,#`?<Constant "false">` & 0xff
   \   000061   7D..         MOV     R5,#(`?<Constant "false">` >> 8) & 0xff
   \   000063   80EC         SJMP    ??print_value_12
   1404                      return true;
   1405          
   1406                  case cJSON_True:
   1407                      output = ensure(output_buffer, 5);
   \                     ??print_value_5:
   \   000065                ; Setup parameters for call to function ensure
   \   000065   12....       LCALL   ?Subroutine116 & 0xFFFF
   1408                      if (output == NULL)
   \                     ??CrossCallReturnLabel_306:
   \   000068   60AC         JZ      ??print_value_0
   1409                      {
   1410                          return false;
   1411                      }
   1412                      strcpy((char*)output, "true");
   \   00006A                ; Setup parameters for call to function strcpy
   \   00006A   7C..         MOV     R4,#`?<Constant "true">` & 0xff
   \   00006C   7D..         MOV     R5,#(`?<Constant "true">` >> 8) & 0xff
   \   00006E   80E1         SJMP    ??print_value_12
   1413                      return true;
   1414          
   1415                  case cJSON_Number:
   1416                      return print_number(item, output_buffer);
   \                     ??print_value_7:
   \   000070                ; Setup parameters for call to function print_number
   \   000070   12....       LCALL   ??print_number?relay
   \   000073   804B         SJMP    ??print_value_3
   1417          
   1418                  case cJSON_Raw:
   1419                  {
   1420                      size_t raw_length = 0;
   1421                      if (item->valuestring == NULL)
   \                     ??print_value_11:
   \   000075   8A82         MOV     DPL,R2
   \   000077   8B83         MOV     DPH,R3
   \   000079   12....       LCALL   ??Subroutine202_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_499:
   \   00007C   6098         JZ      ??print_value_0
   1422                      {
   1423                          return false;
   1424                      }
   1425          
   1426                      raw_length = strlen(item->valuestring) + sizeof("");
   \   00007E                ; Setup parameters for call to function strlen
   \   00007E   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   000081   12....       LCALL   ?Subroutine93 & 0xFFFF
   1427                      output = ensure(output_buffer, raw_length);
   \                     ??CrossCallReturnLabel_153:
   \   000084                ; Setup parameters for call to function ensure
   \   000084   AC..         MOV     R4,?V0 + 2
   \   000086   FD           MOV     R5,A
   \   000087   12....       LCALL   ??Subroutine171_0 & 0xFFFF
   1428                      if (output == NULL)
   \                     ??CrossCallReturnLabel_309:
   \   00008A   608A         JZ      ??print_value_0
   1429                      {
   1430                          return false;
   1431                      }
   1432                      memcpy(output, item->valuestring, raw_length);
   \   00008C                ; Setup parameters for call to function memcpy
   \   00008C   78..         MOV     R0,#?V0 + 2
   \   00008E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000091   85..82       MOV     DPL,?V0 + 0
   \   000094   85..83       MOV     DPH,?V0 + 1
   \   000097   A3           INC     DPTR
   \   000098   A3           INC     DPTR
   \   000099   A3           INC     DPTR
   \   00009A   A3           INC     DPTR
   \   00009B   A3           INC     DPTR
   \   00009C   A3           INC     DPTR
   \   00009D   A3           INC     DPTR
   \   00009E   A3           INC     DPTR
   \   00009F   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   0000A2   12....       LCALL   ?DEALLOC_XSTACK8
   1433                      return true;
   \   0000A5   80AD         SJMP    ??print_value_13
   1434                  }
   1435          
   1436                  case cJSON_String:
   1437                      return print_string(item, output_buffer);
   \                     ??print_value_8:
   \   0000A7                ; Setup parameters for call to function print_string_ptr
   \   0000A7   8A82         MOV     DPL,R2
   \   0000A9   8B83         MOV     DPH,R3
   \   0000AB   A3           INC     DPTR
   \   0000AC   A3           INC     DPTR
   \   0000AD   A3           INC     DPTR
   \   0000AE   A3           INC     DPTR
   \   0000AF   A3           INC     DPTR
   \   0000B0   A3           INC     DPTR
   \   0000B1   A3           INC     DPTR
   \   0000B2   A3           INC     DPTR
   \   0000B3   12....       LCALL   ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   0000B6   8008         SJMP    ??print_value_3
   1438          
   1439                  case cJSON_Array:
   1440                      return print_array(item, output_buffer);
   \                     ??print_value_9:
   \   0000B8                ; Setup parameters for call to function print_array
   \   0000B8   12....       LCALL   ??print_array?relay
   \   0000BB   8003         SJMP    ??print_value_3
   1441          
   1442                  case cJSON_Object:
   1443                      return print_object(item, output_buffer);
   \                     ??print_value_10:
   \   0000BD                ; Setup parameters for call to function print_object
   \   0000BD   12....       LCALL   ??print_object?relay
   1444          
   1445                  default:
   1446                      return false;
   1447              }
   \                     ??print_value_3:
   \   0000C0   02....       LJMP    ??Subroutine192_0 & 0xFFFF
   1448          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine116:
   \   000000   7C05         MOV     R4,#0x5
   \   000002                REQUIRE ??Subroutine170_0
   \   000002                ; // Fall through to label ??Subroutine170_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine170_0:
   \   000000   7D00         MOV     R5,#0x0
   \   000002                REQUIRE ??Subroutine171_0
   \   000002                ; // Fall through to label ??Subroutine171_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   12....       LCALL   ??Subroutine216_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_553:
   \   000003   12....       LCALL   ??print_string_ptr?relay
   \   000006   22           RET
   1449          
   1450          /* Build an array from input text. */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine156_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine157_0
   \   000002                ; // Fall through to label ??Subroutine157_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1451          static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
   \                     parse_array:
   1452          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 4,R2
   \   000007   8B..         MOV     ?V0 + 5,R3
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
   1453              cJSON *head = NULL; /* head of the linked list */
   \   00000D   7E00         MOV     R6,#0x0
   \   00000F   7F00         MOV     R7,#0x0
   1454              cJSON *current_item = NULL;
   \   000011   8E..         MOV     ?V0 + 2,R6
   \   000013   8E..         MOV     ?V0 + 3,R6
   1455          
   1456              if (input_buffer->depth >= CJSON_NESTING_LIMIT)
   \   000015   8C82         MOV     DPL,R4
   \   000017   8D83         MOV     DPH,R5
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   C3           CLR     C
   \   000020   E0           MOVX    A,@DPTR
   \   000021   94E8         SUBB    A,#-0x18
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   9403         SUBB    A,#0x3
   \   000027   4005         JC      ??parse_array_0
   1457              {
   1458                  return false; /* to deeply nested */
   \                     ??parse_array_1:
   \   000029   7A00         MOV     R2,#0x0
   1459              }
   \                     ??parse_array_2:
   \   00002B   02....       LJMP    ?Subroutine11 & 0xFFFF
   1460              input_buffer->depth++;
   \                     ??parse_array_0:
   \   00002E   8C82         MOV     DPL,R4
   \   000030   8D83         MOV     DPH,R5
   \   000032   12....       LCALL   ??Subroutine156_0 & 0xFFFF
   1461          
   1462              if (buffer_at_offset(input_buffer)[0] != '[')
   \                     ??CrossCallReturnLabel_241:
   \   000035   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_235:
   \   000038   12....       LCALL   ??Subroutine173_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_321:
   \   00003B   645B         XRL     A,#0x5b
   \   00003D   70EA         JNZ     ??parse_array_1
   1463              {
   1464                  /* not an array */
   1465                  goto fail;
   1466              }
   1467          
   1468              input_buffer->offset++;
   \   00003F   8C82         MOV     DPL,R4
   \   000041   8D83         MOV     DPH,R5
   \   000043   12....       LCALL   ?Subroutine35 & 0xFFFF
   1469              buffer_skip_whitespace(input_buffer);
   1470              if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
   \                     ??CrossCallReturnLabel_47:
   \   000046   E5..         MOV     A,?V0 + 0
   \   000048   45..         ORL     A,?V0 + 1
   \   00004A   6057         JZ      ??parse_array_3
   \   00004C   85..82       MOV     DPL,?V0 + 0
   \   00004F   85..83       MOV     DPH,?V0 + 1
   \   000052   A3           INC     DPTR
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   A3           INC     DPTR
   \   000056   C082         PUSH    DPL
   \   000058   C083         PUSH    DPH
   \   00005A   85..82       MOV     DPL,?V0 + 0
   \   00005D   85..83       MOV     DPH,?V0 + 1
   \   000060   12....       LCALL   ??Subroutine229_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_622:
   \   000063   D083         POP     DPH
   \   000065   D082         POP     DPL
   \   000067   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   00006A   5037         JNC     ??parse_array_3
   \   00006C   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_322:
   \   00006F   645D         XRL     A,#0x5d
   \   000071   7003         JNZ     $+5
   \   000073   02....       LJMP    ??parse_array_4 & 0xFFFF
   1471              {
   1472                  /* empty array */
   1473                  goto success;
   1474              }
   1475          
   1476              /* check if we skipped to the end of the buffer */
   1477              if (cannot_access_at_index(input_buffer, 0))
   1478              {
   1479                  input_buffer->offset--;
   1480                  goto fail;
   1481              }
   1482          
   1483              /* step back to character in front of the first element */
   1484              input_buffer->offset--;
   \   000076   12....       LCALL   ?Subroutine61 & 0xFFFF
   1485              /* loop through the comma separated array elements */
   1486              do
   1487              {
   1488                  /* allocate next item */
   1489                  cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
   \                     ??CrossCallReturnLabel_314:
   \   000079                ; Setup parameters for call to function cJSON_New_Item
   \   000079   E5..         MOV     A,?V0 + 0
   \   00007B   2408         ADD     A,#0x8
   \   00007D   FA           MOV     R2,A
   \   00007E   E5..         MOV     A,?V0 + 1
   \   000080   3400         ADDC    A,#0x0
   \   000082   FB           MOV     R3,A
   \   000083   12....       LCALL   ??cJSON_New_Item?relay
   \   000086   8A..         MOV     ?V0 + 6,R2
   \   000088   8B..         MOV     ?V0 + 7,R3
   \   00008A   A8..         MOV     R0,?V0 + 6
   \   00008C   A9..         MOV     R1,?V0 + 7
   1490                  if (new_item == NULL)
   \   00008E   E8           MOV     A,R0
   \   00008F   49           ORL     A,R1
   \   000090   7003         JNZ     $+5
   \   000092   02....       LJMP    ??parse_array_5 & 0xFFFF
   1491                  {
   1492                      goto fail; /* allocation failure */
   1493                  }
   1494          
   1495                  /* attach next item to list */
   1496                  if (head == NULL)
   \   000095   EE           MOV     A,R6
   \   000096   4F           ORL     A,R7
   \   000097   700F         JNZ     ??parse_array_6
   1497                  {
   1498                      /* start the linked list */
   1499                      current_item = head = new_item;
   \   000099   E8           MOV     A,R0
   \   00009A   FE           MOV     R6,A
   \   00009B   E9           MOV     A,R1
   \   00009C   FF           MOV     R7,A
   \   00009D   8E..         MOV     ?V0 + 2,R6
   \   00009F   8F..         MOV     ?V0 + 3,R7
   \   0000A1   8019         SJMP    ??parse_array_7
   1500                  }
   \                     ??parse_array_3:
   \   0000A3   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_315:
   \   0000A6   8081         SJMP    ??parse_array_1
   1501                  else
   1502                  {
   1503                      /* add to the end and advance */
   1504                      current_item->next = new_item;
   \                     ??parse_array_6:
   \   0000A8   85..82       MOV     DPL,?V0 + 2
   \   0000AB   85..83       MOV     DPH,?V0 + 3
   \   0000AE   12....       LCALL   ??Subroutine200_0 & 0xFFFF
   1505                      new_item->prev = current_item;
   \                     ??CrossCallReturnLabel_436:
   \   0000B1   8882         MOV     DPL,R0
   \   0000B3   8983         MOV     DPH,R1
   \   0000B5   12....       LCALL   ?Subroutine103 & 0xFFFF
   1506                      current_item = new_item;
   \                     ??CrossCallReturnLabel_341:
   \   0000B8   88..         MOV     ?V0 + 2,R0
   \   0000BA   89..         MOV     ?V0 + 3,R1
   1507                  }
   1508          
   1509                  /* parse next value */
   1510                  input_buffer->offset++;
   \                     ??parse_array_7:
   \   0000BC   85..82       MOV     DPL,?V0 + 0
   \   0000BF   85..83       MOV     DPH,?V0 + 1
   \   0000C2   12....       LCALL   ?Subroutine35 & 0xFFFF
   1511                  buffer_skip_whitespace(input_buffer);
   1512                  if (!parse_value(current_item, input_buffer))
   \                     ??CrossCallReturnLabel_48:
   \   0000C5                ; Setup parameters for call to function parse_value
   \   0000C5   AC..         MOV     R4,?V0 + 0
   \   0000C7   AD..         MOV     R5,?V0 + 1
   \   0000C9   AA..         MOV     R2,?V0 + 2
   \   0000CB   AB..         MOV     R3,?V0 + 3
   \   0000CD   12....       LCALL   ?Subroutine126 & 0xFFFF
   \                     ??CrossCallReturnLabel_196:
   \   0000D0   606E         JZ      ??parse_array_5
   1513                  {
   1514                      goto fail; /* failed to parse value */
   1515                  }
   1516                  buffer_skip_whitespace(input_buffer);
   \   0000D2                ; Setup parameters for call to function buffer_skip_whitespace
   \   0000D2   AA..         MOV     R2,?V0 + 0
   \   0000D4   AB..         MOV     R3,?V0 + 1
   \   0000D6   12....       LCALL   ??buffer_skip_whitespace?relay
   1517              }
   1518              while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
   \   0000D9   85..82       MOV     DPL,?V0 + 0
   \   0000DC   85..83       MOV     DPH,?V0 + 1
   \   0000DF   A3           INC     DPTR
   \   0000E0   A3           INC     DPTR
   \   0000E1   A3           INC     DPTR
   \   0000E2   A3           INC     DPTR
   \   0000E3   C082         PUSH    DPL
   \   0000E5   C083         PUSH    DPH
   \   0000E7   85..82       MOV     DPL,?V0 + 0
   \   0000EA   85..83       MOV     DPH,?V0 + 1
   \   0000ED   12....       LCALL   ??Subroutine229_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_623:
   \   0000F0   D083         POP     DPH
   \   0000F2   D082         POP     DPL
   \   0000F4   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   0000F7   5047         JNC     ??parse_array_5
   \   0000F9   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_323:
   \   0000FC   642C         XRL     A,#0x2c
   \   0000FE   7003         JNZ     $+5
   \   000100   02....       LJMP    ??CrossCallReturnLabel_314 & 0xFFFF
   \   000103   85..82       MOV     DPL,?V0 + 0
   \   000106   85..83       MOV     DPH,?V0 + 1
   \   000109   12....       LCALL   ??Subroutine168_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_292:
   \   00010C   645D         XRL     A,#0x5d
   \   00010E   7030         JNZ     ??parse_array_5
   1519          
   1520              if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
   1521              {
   1522                  goto fail; /* expected end of array */
   1523              }
   1524          
   1525          success:
   1526              input_buffer->depth--;
   \                     ??parse_array_4:
   \   000110   85..82       MOV     DPL,?V0 + 0
   \   000113   85..83       MOV     DPH,?V0 + 1
   \   000116   A3           INC     DPTR
   \   000117   A3           INC     DPTR
   \   000118   12....       LCALL   ??Subroutine172_0 & 0xFFFF
   1527          
   1528              if (head != NULL) {
   \                     ??CrossCallReturnLabel_311:
   \   00011B   EE           MOV     A,R6
   \   00011C   4F           ORL     A,R7
   \   00011D   6007         JZ      ??CrossCallReturnLabel_342
   1529                  head->prev = current_item;
   \   00011F   8E82         MOV     DPL,R6
   \   000121   8F83         MOV     DPH,R7
   \   000123   12....       LCALL   ?Subroutine103 & 0xFFFF
   1530              }
   1531          
   1532              item->type = cJSON_Array;
   \                     ??CrossCallReturnLabel_342:
   \   000126   85..82       MOV     DPL,?V0 + 4
   \   000129   85..83       MOV     DPH,?V0 + 5
   \   00012C   12....       LCALL   ?Subroutine101 & 0xFFFF
   1533              item->child = head;
   \                     ??CrossCallReturnLabel_568:
   \   00012F   85..82       MOV     DPL,?V0 + 4
   \   000132   85..83       MOV     DPH,?V0 + 5
   \   000135   A3           INC     DPTR
   \   000136   A3           INC     DPTR
   \   000137   12....       LCALL   ?Subroutine99 & 0xFFFF
   1534          
   1535              input_buffer->offset++;
   \                     ??CrossCallReturnLabel_249:
   \   00013A   12....       LCALL   ?Subroutine57 & 0xFFFF
   1536          
   1537              return true;
   \                     ??CrossCallReturnLabel_88:
   \   00013D   02....       LJMP    ??parse_array_2 & 0xFFFF
   1538          
   1539          fail:
   1540              if (head != NULL)
   \                     ??parse_array_5:
   \   000140   EE           MOV     A,R6
   \   000141   4F           ORL     A,R7
   \   000142   7003         JNZ     $+5
   \   000144   02....       LJMP    ??parse_array_1 & 0xFFFF
   1541              {
   1542                  cJSON_Delete(head);
   \   000147                ; Setup parameters for call to function cJSON_Delete
   \   000147   EE           MOV     A,R6
   \   000148   FA           MOV     R2,A
   \   000149   EF           MOV     A,R7
   \   00014A   FB           MOV     R3,A
   \   00014B   12....       LCALL   ??cJSON_Delete?relay
   \   00014E   02....       LJMP    ??parse_array_1 & 0xFFFF
   1543              }
   1544          
   1545              return false;
   1546          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   85..82       MOV     DPL,?V0 + 0
   \   000003   85..83       MOV     DPH,?V0 + 1
   \   000006                REQUIRE ??Subroutine172_0
   \   000006                ; // Fall through to label ??Subroutine172_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   12....       LCALL   ?Subroutine132 & 0xFFFF
   \                     ??CrossCallReturnLabel_208:
   \   000003                ; Setup parameters for call to function buffer_skip_whitespace
   \   000003                ; Setup parameters for call to function buffer_skip_whitespace
   \   000003   AA..         MOV     R2,?V0 + 0
   \   000005   AB..         MOV     R3,?V0 + 1
   \   000007   12....       LCALL   ??buffer_skip_whitespace?relay
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   85..82       MOV     DPL,?V0 + 0
   \   000003   85..83       MOV     DPH,?V0 + 1
   \   000006   12....       LCALL   ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_634:
   \   000009   85..82       MOV     DPL,?V0 + 0
   \   00000C   85..83       MOV     DPH,?V0 + 1
   \   00000F                REQUIRE ??Subroutine173_0
   \   00000F                ; // Fall through to label ??Subroutine173_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   7B00         MOV     R3,#0x0
   \   000002   02....       LJMP    ??Subroutine190_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine103:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine177_0
   \   000002                ; // Fall through to label ??Subroutine177_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   12....       LCALL   ?Subroutine132 & 0xFFFF
   \                     ??CrossCallReturnLabel_209:
   \   000003   7A01         MOV     R2,#0x1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine132:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   2401         ADD     A,#0x1
   \   000007   12....       LCALL   ?Subroutine151 & 0xFFFF
   \                     ??CrossCallReturnLabel_246:
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine135:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004                REQUIRE ??Subroutine206_0
   \   000004                ; // Fall through to label ??Subroutine206_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine101:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   7420         MOV     A,#0x20
   \   000008                REQUIRE ??Subroutine217_0
   \   000008                ; // Fall through to label ??Subroutine217_0
   1547          
   1548          /* Render an array to text */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004                REQUIRE ??Subroutine156_0
   \   000004                ; // Fall through to label ??Subroutine156_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1549          static cJSON_bool print_array(const cJSON * const item, printbuffer * const output_buffer)
   \                     print_array:
   1550          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine40 & 0xFFFF
   1551              unsigned char *output_pointer = NULL;
   1552              size_t length = 0;
   1553              cJSON *current_element = item->child;
   1554          
   1555              if (output_buffer == NULL)
   \                     ??CrossCallReturnLabel_335:
   \   000008   7004         JNZ     ??print_array_0
   1556              {
   1557                  return false;
   \                     ??print_array_1:
   \   00000A   7A00         MOV     R2,#0x0
   \   00000C   807B         SJMP    ??CrossCallReturnLabel_93
   1558              }
   1559          
   1560              /* Compose the output array. */
   1561              /* opening square bracket */
   1562              output_pointer = ensure(output_buffer, 1);
   \                     ??print_array_0:
   \   00000E                ; Setup parameters for call to function ensure
   \   00000E   7C01         MOV     R4,#0x1
   \   000010   7D00         MOV     R5,#0x0
   \   000012   EE           MOV     A,R6
   \   000013   FA           MOV     R2,A
   \   000014   EF           MOV     A,R7
   \   000015   FB           MOV     R3,A
   \   000016   12....       LCALL   ?Subroutine114 & 0xFFFF
   1563              if (output_pointer == NULL)
   \                     ??CrossCallReturnLabel_179:
   \   000019   60EF         JZ      ??print_array_1
   1564              {
   1565                  return false;
   1566              }
   1567          
   1568              *output_pointer = '[';
   \   00001B   8882         MOV     DPL,R0
   \   00001D   8983         MOV     DPH,R1
   \   00001F   745B         MOV     A,#0x5b
   \   000021   12....       LCALL   ?Subroutine146 & 0xFFFF
   1569              output_buffer->offset++;
   \                     ??CrossCallReturnLabel_221:
   \   000024   12....       LCALL   ??Subroutine157_0 & 0xFFFF
   1570              output_buffer->depth++;
   \                     ??CrossCallReturnLabel_240:
   \   000027   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_242:
   \   00002A   802A         SJMP    ??CrossCallReturnLabel_529
   1571          
   1572              while (current_element != NULL)
   1573              {
   1574                  if (!print_value(current_element, output_buffer))
   1575                  {
   1576                      return false;
   1577                  }
   1578                  update_offset(output_buffer);
   1579                  if (current_element->next)
   1580                  {
   1581                      length = (size_t) (output_buffer->format ? 2 : 1);
   \                     ??print_array_2:
   \   00002C   75..01       MOV     ?V0 + 2,#0x1
   1582                      output_pointer = ensure(output_buffer, length + 1);
   \                     ??print_array_3:
   \   00002F                ; Setup parameters for call to function ensure
   \   00002F   12....       LCALL   ?Subroutine86 & 0xFFFF
   1583                      if (output_pointer == NULL)
   \                     ??CrossCallReturnLabel_330:
   \   000032   60D6         JZ      ??print_array_1
   1584                      {
   1585                          return false;
   1586                      }
   1587                      *output_pointer++ = ',';
   \   000034   8882         MOV     DPL,R0
   \   000036   8983         MOV     DPH,R1
   \   000038   742C         MOV     A,#0x2c
   \   00003A   12....       LCALL   ?Subroutine21 & 0xFFFF
   1588                      if(output_buffer->format)
   \                     ??CrossCallReturnLabel_386:
   \   00003D   600B         JZ      ??print_array_4
   1589                      {
   1590                          *output_pointer++ = ' ';
   \   00003F   8882         MOV     DPL,R0
   \   000041   8983         MOV     DPH,R1
   \   000043   7420         MOV     A,#0x20
   \   000045   F0           MOVX    @DPTR,A
   \   000046   A3           INC     DPTR
   \   000047   08           INC     R0
   \   000048   A983         MOV     R1,DPH
   1591                      }
   1592                      *output_pointer = '\0';
   \                     ??print_array_4:
   \   00004A   8882         MOV     DPL,R0
   \   00004C   8983         MOV     DPH,R1
   \   00004E   E4           CLR     A
   \   00004F   F0           MOVX    @DPTR,A
   1593                      output_buffer->offset += length;
   \   000050   12....       LCALL   ?Subroutine41 & 0xFFFF
   1594                  }
   1595                  current_element = current_element->next;
   \                     ??CrossCallReturnLabel_58:
   \   000053   12....       LCALL   ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_529:
   \   000056   E5..         MOV     A,?V0 + 0
   \   000058   45..         ORL     A,?V0 + 1
   \   00005A   601B         JZ      ??print_array_5
   \   00005C                ; Setup parameters for call to function print_value
   \   00005C   12....       LCALL   ?Subroutine123 & 0xFFFF
   \                     ??CrossCallReturnLabel_327:
   \   00005F   60A9         JZ      ??print_array_1
   \   000061                ; Setup parameters for call to function update_offset
   \   000061   EE           MOV     A,R6
   \   000062   FA           MOV     R2,A
   \   000063   EF           MOV     A,R7
   \   000064   FB           MOV     R3,A
   \   000065   12....       LCALL   ?Subroutine125 & 0xFFFF
   \                     ??CrossCallReturnLabel_194:
   \   000068   12....       LCALL   ??Subroutine205_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_471:
   \   00006B   60E6         JZ      ??CrossCallReturnLabel_58
   \   00006D   12....       LCALL   ??Subroutine201_0 & 0xFFFF
   1596              }
   \                     ??CrossCallReturnLabel_503:
   \   000070   60BA         JZ      ??print_array_2
   \   000072   75..02       MOV     ?V0 + 2,#0x2
   \   000075   80B8         SJMP    ??print_array_3
   1597          
   1598              output_pointer = ensure(output_buffer, 2);
   \                     ??print_array_5:
   \   000077                ; Setup parameters for call to function ensure
   \   000077   7C02         MOV     R4,#0x2
   \   000079   7D00         MOV     R5,#0x0
   \   00007B   12....       LCALL   ?Subroutine115 & 0xFFFF
   1599              if (output_pointer == NULL)
   \                     ??CrossCallReturnLabel_181:
   \   00007E   608A         JZ      ??print_array_1
   1600              {
   1601                  return false;
   1602              }
   1603              *output_pointer++ = ']';
   \   000080   8882         MOV     DPL,R0
   \   000082   8983         MOV     DPH,R1
   \   000084   745D         MOV     A,#0x5d
   \   000086   12....       LCALL   ?Subroutine60 & 0xFFFF
   1604              *output_pointer = '\0';
   1605              output_buffer->depth--;
   1606          
   1607              return true;
   \                     ??CrossCallReturnLabel_93:
   \   000089   02....       LJMP    ?Subroutine4 & 0xFFFF
   1608          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine123:
   \   000000   EE           MOV     A,R6
   \   000001   FC           MOV     R4,A
   \   000002   EF           MOV     A,R7
   \   000003   FD           MOV     R5,A
   \   000004   AA..         MOV     R2,?V0 + 0
   \   000006   AB..         MOV     R3,?V0 + 1
   \   000008                REQUIRE ??Subroutine174_0
   \   000008                ; // Fall through to label ??Subroutine174_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine86:
   \   000000   E5..         MOV     A,?V0 + 2
   \   000002   2401         ADD     A,#0x1
   \   000004   FC           MOV     R4,A
   \   000005   E4           CLR     A
   \   000006                REQUIRE ??Subroutine175_0
   \   000006                ; // Fall through to label ??Subroutine175_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine175_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   FD           MOV     R5,A
   \   000003   12....       LCALL   ?Subroutine148 & 0xFFFF
   \                     ??CrossCallReturnLabel_333:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine148:
   \   000000   EE           MOV     A,R6
   \   000001   FA           MOV     R2,A
   \   000002   EF           MOV     A,R7
   \   000003   FB           MOV     R3,A
   \   000004   12....       LCALL   ??ensure?relay
   \   000007   8A..         MOV     ?V0 + 4,R2
   \   000009   8B..         MOV     ?V0 + 5,R3
   \   00000B   A8..         MOV     R0,?V0 + 4
   \   00000D   A9..         MOV     R1,?V0 + 5
   \   00000F   E8           MOV     A,R0
   \   000010   49           ORL     A,R1
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   EC           MOV     A,R4
   \   000001   FE           MOV     R6,A
   \   000002   ED           MOV     A,R5
   \   000003   FF           MOV     R7,A
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C                REQUIRE ??Subroutine176_0
   \   00000C                ; // Fall through to label ??Subroutine176_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine115:
   \   000000   EE           MOV     A,R6
   \   000001   FA           MOV     R2,A
   \   000002   EF           MOV     A,R7
   \   000003   FB           MOV     R3,A
   \   000004   12....       LCALL   ??ensure?relay
   \   000007   8A..         MOV     ?V0 + 0,R2
   \   000009   8B..         MOV     ?V0 + 1,R3
   \   00000B   A8..         MOV     R0,?V0 + 0
   \   00000D   A9..         MOV     R1,?V0 + 1
   \   00000F   E8           MOV     A,R0
   \   000010   49           ORL     A,R1
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine114:
   \   000000   12....       LCALL   ??ensure?relay
   \   000003   8A..         MOV     ?V0 + 2,R2
   \   000005   8B..         MOV     ?V0 + 3,R3
   \   000007   A8..         MOV     R0,?V0 + 2
   \   000009   A9..         MOV     R1,?V0 + 3
   \   00000B   E8           MOV     A,R0
   \   00000C   49           ORL     A,R1
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine144:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   A882         MOV     R0,DPL
   \   000004   A983         MOV     R1,DPH
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E4           CLR     A
   \   000003   12....       LCALL   ?Subroutine146 & 0xFFFF
   \                     ??CrossCallReturnLabel_222:
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   12....       LCALL   ?Subroutine139 & 0xFFFF
   \                     ??CrossCallReturnLabel_316:
   \   00000B   7A01         MOV     R2,#0x1
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   25..         ADD     A,?V0 + 2
   \   00000B   12....       LCALL   ?Subroutine151 & 0xFFFF
   \                     ??CrossCallReturnLabel_245:
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   12....       LCALL   ?Subroutine144 & 0xFFFF
   \                     ??CrossCallReturnLabel_218:
   \   000003                REQUIRE ??Subroutine187_0
   \   000003                ; // Fall through to label ??Subroutine187_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine187_0:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C                REQUIRE ??Subroutine188_0
   \   00000C                ; // Fall through to label ??Subroutine188_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine188_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine189_0
   \   000002                ; // Fall through to label ??Subroutine189_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine189_0:
   \   000000   12....       LCALL   ??Subroutine216_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_555:
   \   000003   EA           MOV     A,R2
   \   000004   4B           ORL     A,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7B00         MOV     R3,#0x0
   \   000002                REQUIRE ??Subroutine192_0
   \   000002                ; // Fall through to label ??Subroutine192_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine201_0:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006                REQUIRE ??Subroutine202_0
   \   000006                ; // Fall through to label ??Subroutine202_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   85..82       MOV     DPL,?V0 + 0
   \   000003   85..83       MOV     DPH,?V0 + 1
   \   000006                REQUIRE ??Subroutine212_0
   \   000006                ; // Fall through to label ??Subroutine212_0
   1609          
   1610          /* Build an object from the text. */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1611          static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
   \                     parse_object:
   1612          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 6,R2
   \   000007   8B..         MOV     ?V0 + 7,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
   1613              cJSON *head = NULL; /* linked list head */
   \   00000D   75..00       MOV     ?V0 + 2,#0x0
   \   000010   75..00       MOV     ?V0 + 3,#0x0
   1614              cJSON *current_item = NULL;
   \   000013   75..00       MOV     ?V0 + 0,#0x0
   \   000016   75..00       MOV     ?V0 + 1,#0x0
   1615          
   1616              if (input_buffer->depth >= CJSON_NESTING_LIMIT)
   \   000019   8E82         MOV     DPL,R6
   \   00001B   8F83         MOV     DPH,R7
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   C3           CLR     C
   \   000024   E0           MOVX    A,@DPTR
   \   000025   94E8         SUBB    A,#-0x18
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   9403         SUBB    A,#0x3
   \   00002B   4005         JC      ??parse_object_0
   1617              {
   1618                  return false; /* to deeply nested */
   \                     ??parse_object_1:
   \   00002D   7A00         MOV     R2,#0x0
   1619              }
   \                     ??parse_object_2:
   \   00002F   02....       LJMP    ?Subroutine11 & 0xFFFF
   1620              input_buffer->depth++;
   \                     ??parse_object_0:
   \   000032   12....       LCALL   ?Subroutine58 & 0xFFFF
   1621          
   1622              if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
   \                     ??CrossCallReturnLabel_243:
   \   000035   EE           MOV     A,R6
   \   000036   4F           ORL     A,R7
   \   000037   60F4         JZ      ??parse_object_1
   \   000039   8E82         MOV     DPL,R6
   \   00003B   8F83         MOV     DPH,R7
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   C082         PUSH    DPL
   \   000043   C083         PUSH    DPH
   \   000045   12....       LCALL   ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_627:
   \   000048   D083         POP     DPH
   \   00004A   D082         POP     DPL
   \   00004C   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   00004F   50DC         JNC     ??parse_object_1
   \   000051   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_300:
   \   000054   647B         XRL     A,#0x7b
   \   000056   70D5         JNZ     ??parse_object_1
   1623              {
   1624                  goto fail; /* not an object */
   1625              }
   1626          
   1627              input_buffer->offset++;
   \   000058   EE           MOV     A,R6
   \   000059   2404         ADD     A,#0x4
   \   00005B   F5..         MOV     ?V0 + 4,A
   \   00005D   EF           MOV     A,R7
   \   00005E   3400         ADDC    A,#0x0
   \   000060   F5..         MOV     ?V0 + 5,A
   \   000062   85..82       MOV     DPL,?V0 + 4
   \   000065   F583         MOV     DPH,A
   \   000067   12....       LCALL   ??Subroutine158_0 & 0xFFFF
   1628              buffer_skip_whitespace(input_buffer);
   \                     ??CrossCallReturnLabel_238:
   \   00006A                ; Setup parameters for call to function buffer_skip_whitespace
   \   00006A   EE           MOV     A,R6
   \   00006B   FA           MOV     R2,A
   \   00006C   EF           MOV     A,R7
   \   00006D   FB           MOV     R3,A
   \   00006E   12....       LCALL   ??buffer_skip_whitespace?relay
   1629              if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
   \   000071   85..82       MOV     DPL,?V0 + 4
   \   000074   85..83       MOV     DPH,?V0 + 5
   \   000077   C082         PUSH    DPL
   \   000079   C083         PUSH    DPH
   \   00007B   12....       LCALL   ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_628:
   \   00007E   D083         POP     DPH
   \   000080   D082         POP     DPL
   \   000082   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000085   8E82         MOV     DPL,R6
   \   000087   8F83         MOV     DPH,R7
   \   000089   A3           INC     DPTR
   \   00008A   A3           INC     DPTR
   \   00008B   A3           INC     DPTR
   \   00008C   A3           INC     DPTR
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   5037         JNC     ??parse_object_3
   \   000090   12....       LCALL   ??Subroutine169_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_298:
   \   000093   647D         XRL     A,#0x7d
   \   000095   7003         JNZ     $+5
   \   000097   02....       LJMP    ??parse_object_4 & 0xFFFF
   1630              {
   1631                  goto success; /* empty object */
   1632              }
   1633          
   1634              /* check if we skipped to the end of the buffer */
   1635              if (cannot_access_at_index(input_buffer, 0))
   1636              {
   1637                  input_buffer->offset--;
   1638                  goto fail;
   1639              }
   1640          
   1641              /* step back to character in front of the first element */
   1642              input_buffer->offset--;
   \   00009A   8E82         MOV     DPL,R6
   \   00009C   8F83         MOV     DPH,R7
   \   00009E   12....       LCALL   ??Subroutine172_0 & 0xFFFF
   1643              /* loop through the comma separated array elements */
   1644              do
   1645              {
   1646                  /* allocate next item */
   1647                  cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
   \                     ??CrossCallReturnLabel_312:
   \   0000A1                ; Setup parameters for call to function cJSON_New_Item
   \   0000A1   EE           MOV     A,R6
   \   0000A2   2408         ADD     A,#0x8
   \   0000A4   FA           MOV     R2,A
   \   0000A5   EF           MOV     A,R7
   \   0000A6   3400         ADDC    A,#0x0
   \   0000A8   FB           MOV     R3,A
   \   0000A9   12....       LCALL   ??cJSON_New_Item?relay
   \   0000AC   8A..         MOV     ?V0 + 4,R2
   \   0000AE   8B..         MOV     ?V0 + 5,R3
   \   0000B0   A8..         MOV     R0,?V0 + 4
   \   0000B2   A9..         MOV     R1,?V0 + 5
   1648                  if (new_item == NULL)
   \   0000B4   E8           MOV     A,R0
   \   0000B5   49           ORL     A,R1
   \   0000B6   7003         JNZ     $+5
   \   0000B8   02....       LJMP    ??parse_object_5 & 0xFFFF
   1649                  {
   1650                      goto fail; /* allocation failure */
   1651                  }
   1652          
   1653                  /* attach next item to list */
   1654                  if (head == NULL)
   \   0000BB   E5..         MOV     A,?V0 + 2
   \   0000BD   45..         ORL     A,?V0 + 3
   \   0000BF   700C         JNZ     ??parse_object_6
   1655                  {
   1656                      /* start the linked list */
   1657                      current_item = head = new_item;
   \   0000C1   88..         MOV     ?V0 + 2,R0
   \   0000C3   89..         MOV     ?V0 + 3,R1
   \   0000C5   8012         SJMP    ??CrossCallReturnLabel_521
   1658                  }
   \                     ??parse_object_3:
   \   0000C7   12....       LCALL   ?Subroutine152 & 0xFFFF
   \                     ??CrossCallReturnLabel_318:
   \   0000CA   02....       LJMP    ??parse_object_1 & 0xFFFF
   1659                  else
   1660                  {
   1661                      /* add to the end and advance */
   1662                      current_item->next = new_item;
   \                     ??parse_object_6:
   \   0000CD   85..82       MOV     DPL,?V0 + 0
   \   0000D0   85..83       MOV     DPH,?V0 + 1
   \   0000D3   12....       LCALL   ??Subroutine200_0 & 0xFFFF
   1663                      new_item->prev = current_item;
   \                     ??CrossCallReturnLabel_437:
   \   0000D6   12....       LCALL   ?Subroutine97 & 0xFFFF
   1664                      current_item = new_item;
   \                     ??CrossCallReturnLabel_521:
   \   0000D9   88..         MOV     ?V0 + 0,R0
   \   0000DB   89..         MOV     ?V0 + 1,R1
   1665                  }
   1666          
   1667                  /* parse the name of the child */
   1668                  input_buffer->offset++;
   \   0000DD   12....       LCALL   ?Subroutine29 & 0xFFFF
   1669                  buffer_skip_whitespace(input_buffer);
   1670                  if (!parse_string(current_item, input_buffer))
   \                     ??CrossCallReturnLabel_33:
   \   0000E0   12....       LCALL   ??parse_string?relay
   \   0000E3   8B..         MOV     ?V0 + 5,R3
   \   0000E5   EA           MOV     A,R2
   \   0000E6   45..         ORL     A,?V0 + 5
   \   0000E8   7003         JNZ     $+5
   \   0000EA   02....       LJMP    ??parse_object_5 & 0xFFFF
   1671                  {
   1672                      goto fail; /* failed to parse name */
   1673                  }
   1674                  buffer_skip_whitespace(input_buffer);
   \   0000ED                ; Setup parameters for call to function buffer_skip_whitespace
   \   0000ED   EE           MOV     A,R6
   \   0000EE   FA           MOV     R2,A
   \   0000EF   EF           MOV     A,R7
   \   0000F0   FB           MOV     R3,A
   \   0000F1   12....       LCALL   ??buffer_skip_whitespace?relay
   1675          
   1676                  /* swap valuestring and string, because we parsed the name */
   1677                  current_item->string = current_item->valuestring;
   \   0000F4   12....       LCALL   ?Subroutine113 & 0xFFFF
   \                     ??CrossCallReturnLabel_178:
   \   0000F7   8882         MOV     DPL,R0
   \   0000F9   8983         MOV     DPH,R1
   \   0000FB   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   0000FE   12....       LCALL   ??Subroutine186_0 & 0xFFFF
   1678                  current_item->valuestring = NULL;
   \                     ??CrossCallReturnLabel_376:
   \   000101   8882         MOV     DPL,R0
   \   000103   8983         MOV     DPH,R1
   \   000105   12....       LCALL   ?Subroutine102 & 0xFFFF
   1679          
   1680                  if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
   \                     ??CrossCallReturnLabel_161:
   \   000108   C082         PUSH    DPL
   \   00010A   C083         PUSH    DPH
   \   00010C   12....       LCALL   ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_629:
   \   00010F   D083         POP     DPH
   \   000111   D082         POP     DPL
   \   000113   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000116   507A         JNC     ??parse_object_5
   \   000118   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_301:
   \   00011B   643A         XRL     A,#0x3a
   \   00011D   7073         JNZ     ??parse_object_5
   1681                  {
   1682                      goto fail; /* invalid object */
   1683                  }
   1684          
   1685                  /* parse the value */
   1686                  input_buffer->offset++;
   \   00011F   12....       LCALL   ?Subroutine29 & 0xFFFF
   1687                  buffer_skip_whitespace(input_buffer);
   1688                  if (!parse_value(current_item, input_buffer))
   \                     ??CrossCallReturnLabel_34:
   \   000122   12....       LCALL   ??parse_value?relay
   \   000125   8B..         MOV     ?V0 + 5,R3
   \   000127   EA           MOV     A,R2
   \   000128   45..         ORL     A,?V0 + 5
   \   00012A   6066         JZ      ??parse_object_5
   1689                  {
   1690                      goto fail; /* failed to parse value */
   1691                  }
   1692                  buffer_skip_whitespace(input_buffer);
   \   00012C                ; Setup parameters for call to function buffer_skip_whitespace
   \   00012C   EE           MOV     A,R6
   \   00012D   FA           MOV     R2,A
   \   00012E   EF           MOV     A,R7
   \   00012F   FB           MOV     R3,A
   \   000130   12....       LCALL   ??buffer_skip_whitespace?relay
   1693              }
   1694              while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
   \   000133   8E82         MOV     DPL,R6
   \   000135   8F83         MOV     DPH,R7
   \   000137   A3           INC     DPTR
   \   000138   A3           INC     DPTR
   \   000139   A3           INC     DPTR
   \   00013A   A3           INC     DPTR
   \   00013B   C082         PUSH    DPL
   \   00013D   C083         PUSH    DPH
   \   00013F   12....       LCALL   ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_630:
   \   000142   D083         POP     DPH
   \   000144   D082         POP     DPL
   \   000146   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000149   5047         JNC     ??parse_object_5
   \   00014B   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_302:
   \   00014E   642C         XRL     A,#0x2c
   \   000150   7003         JNZ     $+5
   \   000152   02....       LJMP    ??CrossCallReturnLabel_312 & 0xFFFF
   \   000155   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_297:
   \   000158   647D         XRL     A,#0x7d
   \   00015A   7036         JNZ     ??parse_object_5
   1695          
   1696              if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
   1697              {
   1698                  goto fail; /* expected end of object */
   1699              }
   1700          
   1701          success:
   1702              input_buffer->depth--;
   \                     ??parse_object_4:
   \   00015C   8E82         MOV     DPL,R6
   \   00015E   8F83         MOV     DPH,R7
   \   000160   A3           INC     DPTR
   \   000161   A3           INC     DPTR
   \   000162   12....       LCALL   ??Subroutine172_0 & 0xFFFF
   1703          
   1704              if (head != NULL) {
   \                     ??CrossCallReturnLabel_313:
   \   000165   E5..         MOV     A,?V0 + 2
   \   000167   45..         ORL     A,?V0 + 3
   \   000169   6009         JZ      ??CrossCallReturnLabel_520
   1705                  head->prev = current_item;
   \   00016B   85..82       MOV     DPL,?V0 + 2
   \   00016E   85..83       MOV     DPH,?V0 + 3
   \   000171   12....       LCALL   ??Subroutine210_0 & 0xFFFF
   1706              }
   1707          
   1708              item->type = cJSON_Object;
   \                     ??CrossCallReturnLabel_520:
   \   000174   85..82       MOV     DPL,?V0 + 6
   \   000177   85..83       MOV     DPH,?V0 + 7
   \   00017A   A3           INC     DPTR
   \   00017B   A3           INC     DPTR
   \   00017C   A3           INC     DPTR
   \   00017D   A3           INC     DPTR
   \   00017E   A3           INC     DPTR
   \   00017F   A3           INC     DPTR
   \   000180   7440         MOV     A,#0x40
   \   000182   12....       LCALL   ?Subroutine100 & 0xFFFF
   1709              item->child = head;
   \                     ??CrossCallReturnLabel_160:
   \   000185   12....       LCALL   ??Subroutine177_0 & 0xFFFF
   1710          
   1711              input_buffer->offset++;
   \                     ??CrossCallReturnLabel_340:
   \   000188   8E82         MOV     DPL,R6
   \   00018A   8F83         MOV     DPH,R7
   \   00018C   12....       LCALL   ?Subroutine57 & 0xFFFF
   1712              return true;
   \                     ??CrossCallReturnLabel_89:
   \   00018F   02....       LJMP    ??parse_object_2 & 0xFFFF
   1713          
   1714          fail:
   1715              if (head != NULL)
   \                     ??parse_object_5:
   \   000192   E5..         MOV     A,?V0 + 2
   \   000194   45..         ORL     A,?V0 + 3
   \   000196   7003         JNZ     $+5
   \   000198   02....       LJMP    ??parse_object_1 & 0xFFFF
   1716              {
   1717                  cJSON_Delete(head);
   \   00019B                ; Setup parameters for call to function cJSON_Delete
   \   00019B   AA..         MOV     R2,?V0 + 2
   \   00019D   AB..         MOV     R3,?V0 + 3
   \   00019F   12....       LCALL   ??cJSON_Delete?relay
   \   0001A2   02....       LJMP    ??parse_object_1 & 0xFFFF
   1718              }
   1719          
   1720              return false;
   1721          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   12....       LCALL   ?Subroutine132 & 0xFFFF
   \                     ??CrossCallReturnLabel_207:
   \   000007                ; Setup parameters for call to function buffer_skip_whitespace
   \   000007                ; Setup parameters for call to function buffer_skip_whitespace
   \   000007   EE           MOV     A,R6
   \   000008   FA           MOV     R2,A
   \   000009   EF           MOV     A,R7
   \   00000A   FB           MOV     R3,A
   \   00000B   12....       LCALL   ??buffer_skip_whitespace?relay
   \   00000E                ; Setup parameters for call to function parse_string
   \   00000E                ; Setup parameters for call to function parse_value
   \   00000E   EE           MOV     A,R6
   \   00000F   FC           MOV     R4,A
   \   000010   EF           MOV     A,R7
   \   000011   FD           MOV     R5,A
   \   000012   AA..         MOV     R2,?V0 + 0
   \   000014   AB..         MOV     R3,?V0 + 1
   \   000016   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine102:
   \   000000   E4           CLR     A
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   12....       LCALL   ?Subroutine145 & 0xFFFF
   \                     ??CrossCallReturnLabel_348:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine97:
   \   000000   8882         MOV     DPL,R0
   \   000002   8983         MOV     DPH,R1
   \   000004                REQUIRE ??Subroutine210_0
   \   000004                ; // Fall through to label ??Subroutine210_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine210_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine211_0
   \   000002                ; // Fall through to label ??Subroutine211_0
   1722          
   1723          /* Render an object to text. */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1724          static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer)
   \                     print_object:
   1725          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine40 & 0xFFFF
   1726              unsigned char *output_pointer = NULL;
   1727              size_t length = 0;
   1728              cJSON *current_item = item->child;
   1729          
   1730              if (output_buffer == NULL)
   \                     ??CrossCallReturnLabel_336:
   \   000008   7005         JNZ     ??print_object_0
   1731              {
   1732                  return false;
   \                     ??print_object_1:
   \   00000A   7A00         MOV     R2,#0x0
   \   00000C   02....       LJMP    ??CrossCallReturnLabel_94 & 0xFFFF
   1733              }
   1734          
   1735              /* Compose the output: */
   1736              length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
   \                     ??print_object_0:
   \   00000F   12....       LCALL   ??Subroutine201_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_504:
   \   000012   6005         JZ      ??print_object_2
   \   000014   75..02       MOV     ?V0 + 2,#0x2
   \   000017   8003         SJMP    ??print_object_3
   \                     ??print_object_2:
   \   000019   75..01       MOV     ?V0 + 2,#0x1
   1737              output_pointer = ensure(output_buffer, length + 1);
   \                     ??print_object_3:
   \   00001C                ; Setup parameters for call to function ensure
   \   00001C   12....       LCALL   ?Subroutine86 & 0xFFFF
   1738              if (output_pointer == NULL)
   \                     ??CrossCallReturnLabel_331:
   \   00001F   60E9         JZ      ??print_object_1
   1739              {
   1740                  return false;
   1741              }
   1742          
   1743              *output_pointer++ = '{';
   \   000021   8882         MOV     DPL,R0
   \   000023   8983         MOV     DPH,R1
   \   000025   747B         MOV     A,#0x7b
   \   000027   12....       LCALL   ?Subroutine108 & 0xFFFF
   1744              output_buffer->depth++;
   \                     ??CrossCallReturnLabel_171:
   \   00002A   12....       LCALL   ?Subroutine58 & 0xFFFF
   1745              if (output_buffer->format)
   \                     ??CrossCallReturnLabel_244:
   \   00002D   12....       LCALL   ??Subroutine187_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_391:
   \   000030   6007         JZ      ??print_object_4
   1746              {
   1747                  *output_pointer++ = '\n';
   \   000032   8882         MOV     DPL,R0
   \   000034   8983         MOV     DPH,R1
   \   000036   740A         MOV     A,#0xa
   \   000038   F0           MOVX    @DPTR,A
   1748              }
   1749              output_buffer->offset += length;
   \                     ??print_object_4:
   \   000039   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   00003C   804B         SJMP    ??CrossCallReturnLabel_530
   1750          
   1751              while (current_item)
   1752              {
   1753                  if (output_buffer->format)
   1754                  {
   1755                      size_t i;
   1756                      output_pointer = ensure(output_buffer, output_buffer->depth);
   1757                      if (output_pointer == NULL)
   1758                      {
   1759                          return false;
   1760                      }
   1761                      for (i = 0; i < output_buffer->depth; i++)
   1762                      {
   1763                          *output_pointer++ = '\t';
   1764                      }
   1765                      output_buffer->offset += output_buffer->depth;
   1766                  }
   1767          
   1768                  /* print key */
   1769                  if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
   1770                  {
   1771                      return false;
   1772                  }
   1773                  update_offset(output_buffer);
   1774          
   1775                  length = (size_t) (output_buffer->format ? 2 : 1);
   1776                  output_pointer = ensure(output_buffer, length);
   1777                  if (output_pointer == NULL)
   1778                  {
   1779                      return false;
   1780                  }
   1781                  *output_pointer++ = ':';
   1782                  if (output_buffer->format)
   1783                  {
   1784                      *output_pointer++ = '\t';
   1785                  }
   1786                  output_buffer->offset += length;
   1787          
   1788                  /* print value */
   1789                  if (!print_value(current_item, output_buffer))
   1790                  {
   1791                      return false;
   1792                  }
   1793                  update_offset(output_buffer);
   \                     ??print_object_5:
   \   00003E   7800         MOV     R0,#0x0
   \                     ??print_object_6:
   \   000040   EA           MOV     A,R2
   \   000041   28           ADD     A,R0
   \   000042   F5..         MOV     ?V0 + 2,A
   \   000044   E4           CLR     A
   \   000045   3400         ADDC    A,#0x0
   \   000047   F5..         MOV     ?V0 + 3,A
   1794          
   1795                  /* print comma if not last */
   1796                  length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
   1797                  output_pointer = ensure(output_buffer, length + 1);
   \   000049                ; Setup parameters for call to function ensure
   \   000049   E5..         MOV     A,?V0 + 2
   \   00004B   2401         ADD     A,#0x1
   \   00004D   FC           MOV     R4,A
   \   00004E   E5..         MOV     A,?V0 + 3
   \   000050   12....       LCALL   ??Subroutine175_0 & 0xFFFF
   1798                  if (output_pointer == NULL)
   \                     ??CrossCallReturnLabel_332:
   \   000053   60B5         JZ      ??print_object_1
   1799                  {
   1800                      return false;
   1801                  }
   1802                  if (current_item->next)
   \   000055   85..82       MOV     DPL,?V0 + 0
   \   000058   85..83       MOV     DPH,?V0 + 1
   \   00005B   12....       LCALL   ??Subroutine189_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_389:
   \   00005E   6009         JZ      ??CrossCallReturnLabel_172
   1803                  {
   1804                      *output_pointer++ = ',';
   \   000060   8882         MOV     DPL,R0
   \   000062   8983         MOV     DPH,R1
   \   000064   742C         MOV     A,#0x2c
   \   000066   12....       LCALL   ?Subroutine108 & 0xFFFF
   1805                  }
   1806          
   1807                  if (output_buffer->format)
   \                     ??CrossCallReturnLabel_172:
   \   000069   12....       LCALL   ??Subroutine187_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_392:
   \   00006C   6009         JZ      ??CrossCallReturnLabel_173
   1808                  {
   1809                      *output_pointer++ = '\n';
   \   00006E   8882         MOV     DPL,R0
   \   000070   8983         MOV     DPH,R1
   \   000072   740A         MOV     A,#0xa
   \   000074   12....       LCALL   ?Subroutine108 & 0xFFFF
   1810                  }
   1811                  *output_pointer = '\0';
   \                     ??CrossCallReturnLabel_173:
   \   000077   8882         MOV     DPL,R0
   \   000079   8983         MOV     DPH,R1
   \   00007B   12....       LCALL   ??Subroutine179_0 & 0xFFFF
   1812                  output_buffer->offset += length;
   \                     ??CrossCallReturnLabel_346:
   \   00007E   25..         ADD     A,?V0 + 2
   \   000080   F0           MOVX    @DPTR,A
   \   000081   A3           INC     DPTR
   \   000082   E0           MOVX    A,@DPTR
   \   000083   35..         ADDC    A,?V0 + 3
   \   000085   F0           MOVX    @DPTR,A
   1813          
   1814                  current_item = current_item->next;
   \   000086   12....       LCALL   ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_530:
   \   000089   E5..         MOV     A,?V0 + 0
   \   00008B   45..         ORL     A,?V0 + 1
   \   00008D   8E82         MOV     DPL,R6
   \   00008F   8F83         MOV     DPH,R7
   \   000091   A3           INC     DPTR
   \   000092   A3           INC     DPTR
   \   000093   A3           INC     DPTR
   \   000094   A3           INC     DPTR
   \   000095   A3           INC     DPTR
   \   000096   A3           INC     DPTR
   \   000097   A3           INC     DPTR
   \   000098   A3           INC     DPTR
   \   000099   A3           INC     DPTR
   \   00009A   A3           INC     DPTR
   \   00009B   7003         JNZ     $+5
   \   00009D   02....       LJMP    ??print_object_7 & 0xFFFF
   \   0000A0   12....       LCALL   ??Subroutine205_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_472:
   \   0000A3   6035         JZ      ??CrossCallReturnLabel_85
   \   0000A5                ; Setup parameters for call to function ensure
   \   0000A5   8E82         MOV     DPL,R6
   \   0000A7   8F83         MOV     DPH,R7
   \   0000A9   A3           INC     DPTR
   \   0000AA   A3           INC     DPTR
   \   0000AB   A3           INC     DPTR
   \   0000AC   A3           INC     DPTR
   \   0000AD   A3           INC     DPTR
   \   0000AE   A3           INC     DPTR
   \   0000AF   12....       LCALL   ??Subroutine233_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_654:
   \   0000B2   12....       LCALL   ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_180:
   \   0000B5   7003         JNZ     $+5
   \   0000B7   02....       LJMP    ??print_object_1 & 0xFFFF
   \   0000BA   7C00         MOV     R4,#0x0
   \   0000BC   7D00         MOV     R5,#0x0
   \   0000BE   8003         SJMP    ??CrossCallReturnLabel_369
   \                     ??print_object_8:
   \   0000C0   12....       LCALL   ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_369:
   \   0000C3   8E82         MOV     DPL,R6
   \   0000C5   8F83         MOV     DPH,R7
   \   0000C7   A3           INC     DPTR
   \   0000C8   A3           INC     DPTR
   \   0000C9   A3           INC     DPTR
   \   0000CA   A3           INC     DPTR
   \   0000CB   12....       LCALL   ??Subroutine181_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_366:
   \   0000CE   40F0         JC      ??print_object_8
   \   0000D0   8E82         MOV     DPL,R6
   \   0000D2   8F83         MOV     DPH,R7
   \   0000D4   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   0000D7   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   0000DA                ; Setup parameters for call to function print_string_ptr
   \   0000DA   EE           MOV     A,R6
   \   0000DB   FC           MOV     R4,A
   \   0000DC   EF           MOV     A,R7
   \   0000DD   FD           MOV     R5,A
   \   0000DE   12....       LCALL   ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_356:
   \   0000E1   12....       LCALL   ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   0000E4   8B..         MOV     ?V0 + 3,R3
   \   0000E6   EA           MOV     A,R2
   \   0000E7   45..         ORL     A,?V0 + 3
   \   0000E9   7003         JNZ     $+5
   \   0000EB   02....       LJMP    ??print_object_1 & 0xFFFF
   \   0000EE                ; Setup parameters for call to function update_offset
   \   0000EE   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_455:
   \   0000F1   6005         JZ      ??print_object_9
   \   0000F3   75..02       MOV     ?V0 + 2,#0x2
   \   0000F6   8003         SJMP    ??print_object_10
   \                     ??print_object_9:
   \   0000F8   75..01       MOV     ?V0 + 2,#0x1
   \                     ??print_object_10:
   \   0000FB   75..00       MOV     ?V0 + 3,#0x0
   \   0000FE                ; Setup parameters for call to function ensure
   \   0000FE   AC..         MOV     R4,?V0 + 2
   \   000100   AD..         MOV     R5,?V0 + 3
   \   000102   12....       LCALL   ?Subroutine148 & 0xFFFF
   \                     ??CrossCallReturnLabel_334:
   \   000105   7003         JNZ     $+5
   \   000107   02....       LJMP    ??print_object_1 & 0xFFFF
   \   00010A   8882         MOV     DPL,R0
   \   00010C   8983         MOV     DPH,R1
   \   00010E   743A         MOV     A,#0x3a
   \   000110   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_387:
   \   000113   6007         JZ      ??print_object_11
   \   000115   8882         MOV     DPL,R0
   \   000117   8983         MOV     DPH,R1
   \   000119   7409         MOV     A,#0x9
   \   00011B   F0           MOVX    @DPTR,A
   \                     ??print_object_11:
   \   00011C   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   00011F                ; Setup parameters for call to function print_value
   \   00011F   12....       LCALL   ?Subroutine123 & 0xFFFF
   \                     ??CrossCallReturnLabel_328:
   \   000122   7003         JNZ     $+5
   \   000124   02....       LJMP    ??print_object_1 & 0xFFFF
   \   000127                ; Setup parameters for call to function update_offset
   \   000127   12....       LCALL   ?Subroutine14 & 0xFFFF
   1815              }
   \                     ??CrossCallReturnLabel_456:
   \   00012A   6004         JZ      ??print_object_12
   \   00012C   7A01         MOV     R2,#0x1
   \   00012E   8002         SJMP    ??print_object_13
   \                     ??print_object_12:
   \   000130   7A00         MOV     R2,#0x0
   \                     ??print_object_13:
   \   000132   85..82       MOV     DPL,?V0 + 0
   \   000135   85..83       MOV     DPH,?V0 + 1
   \   000138   12....       LCALL   ??Subroutine205_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_473:
   \   00013B   7003         JNZ     $+5
   \   00013D   02....       LJMP    ??print_object_5 & 0xFFFF
   \   000140   7801         MOV     R0,#0x1
   \   000142   02....       LJMP    ??print_object_6 & 0xFFFF
   1816          
   1817              output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
   \                     ??print_object_7:
   \   000145   12....       LCALL   ??Subroutine205_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_474:
   \   000148   600F         JZ      ??print_object_14
   \   00014A   8E82         MOV     DPL,R6
   \   00014C   8F83         MOV     DPH,R7
   \   00014E   A3           INC     DPTR
   \   00014F   A3           INC     DPTR
   \   000150   A3           INC     DPTR
   \   000151   A3           INC     DPTR
   \   000152   A3           INC     DPTR
   \   000153   A3           INC     DPTR
   \   000154   12....       LCALL   ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   000157   8004         SJMP    ??print_object_15
   \                     ??print_object_14:
   \   000159   7C02         MOV     R4,#0x2
   \   00015B   7D00         MOV     R5,#0x0
   \                     ??print_object_15:
   \   00015D                ; Setup parameters for call to function ensure
   \   00015D   12....       LCALL   ?Subroutine115 & 0xFFFF
   1818              if (output_pointer == NULL)
   \                     ??CrossCallReturnLabel_182:
   \   000160   7003         JNZ     $+5
   \   000162   02....       LJMP    ??print_object_1 & 0xFFFF
   1819              {
   1820                  return false;
   1821              }
   1822              if (output_buffer->format)
   \   000165   12....       LCALL   ??Subroutine187_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_393:
   \   000168   6023         JZ      ??print_object_16
   1823              {
   1824                  size_t i;
   1825                  for (i = 0; i < (output_buffer->depth - 1); i++)
   \   00016A   7C00         MOV     R4,#0x0
   \   00016C   7D00         MOV     R5,#0x0
   \   00016E   8003         SJMP    ??CrossCallReturnLabel_370
   1826                  {
   1827                      *output_pointer++ = '\t';
   \                     ??print_object_17:
   \   000170   12....       LCALL   ?Subroutine92 & 0xFFFF
   1828                  }
   \                     ??CrossCallReturnLabel_370:
   \   000173   8E82         MOV     DPL,R6
   \   000175   8F83         MOV     DPH,R7
   \   000177   A3           INC     DPTR
   \   000178   A3           INC     DPTR
   \   000179   A3           INC     DPTR
   \   00017A   A3           INC     DPTR
   \   00017B   A3           INC     DPTR
   \   00017C   A3           INC     DPTR
   \   00017D   E0           MOVX    A,@DPTR
   \   00017E   24FF         ADD     A,#-0x1
   \   000180   FA           MOV     R2,A
   \   000181   A3           INC     DPTR
   \   000182   E0           MOVX    A,@DPTR
   \   000183   34FF         ADDC    A,#-0x1
   \   000185   FB           MOV     R3,A
   \   000186   C3           CLR     C
   \   000187   EC           MOV     A,R4
   \   000188   9A           SUBB    A,R2
   \   000189   ED           MOV     A,R5
   \   00018A   9B           SUBB    A,R3
   \   00018B   40E3         JC      ??print_object_17
   1829              }
   1830              *output_pointer++ = '}';
   \                     ??print_object_16:
   \   00018D   8882         MOV     DPL,R0
   \   00018F   8983         MOV     DPH,R1
   \   000191   747D         MOV     A,#0x7d
   \   000193   12....       LCALL   ?Subroutine60 & 0xFFFF
   1831              *output_pointer = '\0';
   1832              output_buffer->depth--;
   1833          
   1834              return true;
   \                     ??CrossCallReturnLabel_94:
   \   000196   02....       LJMP    ?Subroutine4 & 0xFFFF
   1835          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine108:
   \   000000   12....       LCALL   ?Subroutine144 & 0xFFFF
   \                     ??CrossCallReturnLabel_220:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine88:
   \   000000   E5..         MOV     A,?V0 + 0
   \   000002   2410         ADD     A,#0x10
   \   000004   F582         MOV     DPL,A
   \   000006   E5..         MOV     A,?V0 + 1
   \   000008                REQUIRE ??Subroutine180_0
   \   000008                ; // Fall through to label ??Subroutine180_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine92:
   \   000000   8882         MOV     DPL,R0
   \   000002   8983         MOV     DPH,R1
   \   000004   7409         MOV     A,#0x9
   \   000006   12....       LCALL   ?Subroutine144 & 0xFFFF
   \                     ??CrossCallReturnLabel_219:
   \   000009                REQUIRE ??Subroutine182_0
   \   000009                ; // Fall through to label ??Subroutine182_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   EE           MOV     A,R6
   \   000001   FA           MOV     R2,A
   \   000002   EF           MOV     A,R7
   \   000003   FB           MOV     R3,A
   \   000004   12....       LCALL   ??update_offset?relay
   \   000007                REQUIRE ??Subroutine201_0
   \   000007                ; // Fall through to label ??Subroutine201_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   12....       LCALL   ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_635:
   \   000005   8E82         MOV     DPL,R6
   \   000007   8F83         MOV     DPH,R7
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine233_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   EE           MOV     A,R6
   \   000006   FA           MOV     R2,A
   \   000007   EF           MOV     A,R7
   \   000008   FB           MOV     R3,A
   \   000009   22           RET
   1836          
   1837          /* Get Array size/item / object item. */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1838          CJSON_PUBLIC(int) cJSON_GetArraySize(const cJSON *array)
   \                     cJSON_GetArraySize:
   1839          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1840              cJSON *child = NULL;
   1841              size_t size = 0;
   \   000004   7C00         MOV     R4,#0x0
   \   000006   7D00         MOV     R5,#0x0
   1842          
   1843              if (array == NULL)
   \   000008   EA           MOV     A,R2
   \   000009   4B           ORL     A,R3
   \   00000A   7006         JNZ     ??cJSON_GetArraySize_0
   1844              {
   1845                  return 0;
   \   00000C   7A00         MOV     R2,#0x0
   \   00000E   7B00         MOV     R3,#0x0
   \   000010   801E         SJMP    ??cJSON_GetArraySize_1
   1846              }
   1847          
   1848              child = array->child;
   \                     ??cJSON_GetArraySize_0:
   \   000012   8A82         MOV     DPL,R2
   \   000014   8B83         MOV     DPH,R3
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   8003         SJMP    ??CrossCallReturnLabel_372
   1849          
   1850              while(child != NULL)
   1851              {
   1852                  size++;
   \                     ??cJSON_GetArraySize_2:
   \   00001C   12....       LCALL   ??Subroutine182_0 & 0xFFFF
   1853                  child = child->next;
   1854              }
   \                     ??CrossCallReturnLabel_372:
   \   00001F   12....       LCALL   ??Subroutine230_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_615:
   \   000022   8882         MOV     DPL,R0
   \   000024   8983         MOV     DPH,R1
   \   000026   E582         MOV     A,DPL
   \   000028   4583         ORL     A,DPH
   \   00002A   70F0         JNZ     ??cJSON_GetArraySize_2
   1855          
   1856              /* FIXME: Can overflow here. Cannot be fixed without breaking the API */
   1857          
   1858              return (int)size;
   \   00002C   EC           MOV     A,R4
   \   00002D   FA           MOV     R2,A
   \   00002E   ED           MOV     A,R5
   \   00002F   FB           MOV     R3,A
   \                     ??cJSON_GetArraySize_1:
   \   000030   02....       LJMP    ??Subroutine209_0 & 0xFFFF
   1859          }
   1860          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1861          static cJSON* get_array_item(const cJSON *array, size_t index)
   \                     get_array_item:
   1862          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1863              cJSON *current_child = NULL;
   1864          
   1865              if (array == NULL)
   \   000004   EA           MOV     A,R2
   \   000005   4B           ORL     A,R3
   \   000006   7006         JNZ     ??get_array_item_0
   1866              {
   1867                  return NULL;
   \   000008   7A00         MOV     R2,#0x0
   \   00000A   7B00         MOV     R3,#0x0
   \   00000C   801F         SJMP    ??get_array_item_1
   1868              }
   1869          
   1870              current_child = array->child;
   \                     ??get_array_item_0:
   \   00000E   8A82         MOV     DPL,R2
   \   000010   8B83         MOV     DPH,R3
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   800C         SJMP    ??get_array_item_2
   1871              while ((current_child != NULL) && (index > 0))
   1872              {
   1873                  index--;
   \                     ??get_array_item_3:
   \   000018   EC           MOV     A,R4
   \   000019   24FF         ADD     A,#-0x1
   \   00001B   1C           DEC     R4
   \   00001C   ED           MOV     A,R5
   \   00001D   34FF         ADDC    A,#-0x1
   \   00001F   FD           MOV     R5,A
   1874                  current_child = current_child->next;
   \   000020   8A82         MOV     DPL,R2
   \   000022   8B83         MOV     DPH,R3
   1875              }
   \                     ??get_array_item_2:
   \   000024   12....       LCALL   ??Subroutine189_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_388:
   \   000027   6004         JZ      ??get_array_item_1
   \   000029   EC           MOV     A,R4
   \   00002A   4D           ORL     A,R5
   \   00002B   70EB         JNZ     ??get_array_item_3
   1876          
   1877              return current_child;
   \                     ??get_array_item_1:
   \   00002D   02....       LJMP    ??Subroutine209_0 & 0xFFFF
   1878          }
   1879          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1880          CJSON_PUBLIC(cJSON *) cJSON_GetArrayItem(const cJSON *array, int index)
   \                     cJSON_GetArrayItem:
   1881          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1882              if (index < 0)
   \   000004   12....       LCALL   ??Subroutine207_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_512:
   \   000007   5006         JNC     ??cJSON_GetArrayItem_0
   1883              {
   1884                  return NULL;
   \   000009   7A00         MOV     R2,#0x0
   \   00000B   7B00         MOV     R3,#0x0
   \   00000D   8003         SJMP    ??cJSON_GetArrayItem_1
   1885              }
   1886          
   1887              return get_array_item(array, (size_t)index);
   \                     ??cJSON_GetArrayItem_0:
   \   00000F                ; Setup parameters for call to function get_array_item
   \   00000F   12....       LCALL   ??get_array_item?relay
   \                     ??cJSON_GetArrayItem_1:
   \   000012   02....       LJMP    ??Subroutine209_0 & 0xFFFF
   1888          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine207_0:
   \   000000   C3           CLR     C
   \   000001   ED           MOV     A,R5
   \   000002                REQUIRE ??Subroutine208_0
   \   000002                ; // Fall through to label ??Subroutine208_0
   1889          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1890          static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
   \                     get_object_item:
   1891          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EC           MOV     A,R4
   \   000006   FE           MOV     R6,A
   \   000007   ED           MOV     A,R5
   \   000008   FF           MOV     R7,A
   \   000009   740C         MOV     A,#0xc
   \   00000B   12....       LCALL   ?XSTACK_DISP0_8
   \   00000E   12....       LCALL   ??Subroutine230_0 & 0xFFFF
   1892              cJSON *current_element = NULL;
   1893          
   1894              if ((object == NULL) || (name == NULL))
   \                     ??CrossCallReturnLabel_616:
   \   000011   EA           MOV     A,R2
   \   000012   4B           ORL     A,R3
   \   000013   6004         JZ      ??get_object_item_0
   \   000015   EE           MOV     A,R6
   \   000016   4F           ORL     A,R7
   \   000017   7006         JNZ     ??get_object_item_1
   1895              {
   1896                  return NULL;
   \                     ??get_object_item_0:
   \   000019   7A00         MOV     R2,#0x0
   \   00001B   7B00         MOV     R3,#0x0
   \   00001D   8051         SJMP    ??get_object_item_2
   1897              }
   1898          
   1899              current_element = object->child;
   \                     ??get_object_item_1:
   \   00001F   8A82         MOV     DPL,R2
   \   000021   8B83         MOV     DPH,R3
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   12....       LCALL   ??Subroutine212_0 & 0xFFFF
   1900              if (case_sensitive)
   \                     ??CrossCallReturnLabel_525:
   \   00002A   E8           MOV     A,R0
   \   00002B   49           ORL     A,R1
   \   00002C   6023         JZ      ??CrossCallReturnLabel_532
   1901              {
   1902                  while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
   \                     ??get_object_item_3:
   \   00002E   E5..         MOV     A,?V0 + 0
   \   000030   45..         ORL     A,?V0 + 1
   \   000032   60E5         JZ      ??get_object_item_0
   \   000034   12....       LCALL   ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_357:
   \   000037   12....       LCALL   ??Subroutine205_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_475:
   \   00003A   6028         JZ      ??get_object_item_4
   \   00003C                ; Setup parameters for call to function strcmp
   \   00003C   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_656:
   \   00003F   12....       LCALL   ??strcmp?relay
   \   000042   8B..         MOV     ?V0 + 3,R3
   \   000044   EA           MOV     A,R2
   \   000045   45..         ORL     A,?V0 + 3
   \   000047   601B         JZ      ??get_object_item_4
   1903                  {
   1904                      current_element = current_element->next;
   \   000049   12....       LCALL   ?Subroutine63 & 0xFFFF
   1905                  }
   1906              }
   \                     ??CrossCallReturnLabel_531:
   \   00004C   80E0         SJMP    ??get_object_item_3
   1907              else
   1908              {
   1909                  while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
   1910                  {
   1911                      current_element = current_element->next;
   \                     ??get_object_item_5:
   \   00004E   12....       LCALL   ?Subroutine63 & 0xFFFF
   1912                  }
   \                     ??CrossCallReturnLabel_532:
   \   000051   E5..         MOV     A,?V0 + 0
   \   000053   45..         ORL     A,?V0 + 1
   \   000055   60C2         JZ      ??get_object_item_0
   \   000057                ; Setup parameters for call to function case_insensitive_strcmp
   \   000057   12....       LCALL   ?Subroutine31 & 0xFFFF
   1913              }
   \                     ??CrossCallReturnLabel_657:
   \   00005A   12....       LCALL   ??case_insensitive_strcmp?relay
   \   00005D   8B..         MOV     ?V0 + 3,R3
   \   00005F   EA           MOV     A,R2
   \   000060   45..         ORL     A,?V0 + 3
   \   000062   70EA         JNZ     ??get_object_item_5
   \                     ??get_object_item_4:
   \   000064   12....       LCALL   ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_358:
   \   000067   12....       LCALL   ??Subroutine205_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_476:
   \   00006A   60AD         JZ      ??get_object_item_0
   1914          
   1915              if ((current_element == NULL) || (current_element->string == NULL)) {
   1916                  return NULL;
   1917              }
   1918          
   1919              return current_element;
   \   00006C   AA..         MOV     R2,?V0 + 0
   \   00006E   AB..         MOV     R3,?V0 + 1
   \                     ??get_object_item_2:
   \   000070   80..         SJMP    ??Subroutine184_0
   1920          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   E5..         MOV     A,?V0 + 0
   \   000002   2410         ADD     A,#0x10
   \   000004   F582         MOV     DPL,A
   \   000006   E5..         MOV     A,?V0 + 1
   \   000008                REQUIRE ??Subroutine232_0
   \   000008                ; // Fall through to label ??Subroutine232_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine232_0:
   \   000000   12....       LCALL   ??Subroutine178_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_653:
   \   000003                REQUIRE ??Subroutine233_0
   \   000003                ; // Fall through to label ??Subroutine233_0
   1921          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   78..         MOV     R0,#?V0 + 0
   \   000002   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000005   12....       LCALL   ??get_object_item?relay
   \   000008                REQUIRE ??Subroutine160_0
   \   000008                ; // Fall through to label ??Subroutine160_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1922          CJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string)
   \                     cJSON_GetObjectItem:
   1923          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1924              return get_object_item(object, string, false);
   \   000005                ; Setup parameters for call to function get_object_item
   \   000005   E4           CLR     A
   \   000006   F5..         MOV     ?V0 + 0,A
   \   000008   F5..         MOV     ?V0 + 1,A
   \   00000A   02....       LJMP    ?Subroutine1 & 0xFFFF
   1925          }
   1926          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1927          CJSON_PUBLIC(cJSON *) cJSON_GetObjectItemCaseSensitive(const cJSON * const object, const char * const string)
   \                     cJSON_GetObjectItemCaseSensitive:
   1928          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1929              return get_object_item(object, string, true);
   \   000005                ; Setup parameters for call to function get_object_item
   \   000005   75..01       MOV     ?V0 + 0,#0x1
   \   000008   75..00       MOV     ?V0 + 1,#0x0
   \   00000B   02....       LJMP    ?Subroutine1 & 0xFFFF
   1930          }
   1931          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1932          CJSON_PUBLIC(cJSON_bool) cJSON_HasObjectItem(const cJSON *object, const char *string)
   \                     cJSON_HasObjectItem:
   1933          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1934              return cJSON_GetObjectItem(object, string) ? 1 : 0;
   \   000005                ; Setup parameters for call to function cJSON_GetObjectItem
   \   000005   12....       LCALL   ??cJSON_GetObjectItem?relay
   \   000008   8B..         MOV     ?V0 + 1,R3
   \   00000A   EA           MOV     A,R2
   \   00000B   45..         ORL     A,?V0 + 1
   \   00000D   6004         JZ      ??cJSON_HasObjectItem_0
   \   00000F   7A01         MOV     R2,#0x1
   \   000011   8002         SJMP    ??cJSON_HasObjectItem_1
   \                     ??cJSON_HasObjectItem_0:
   \   000013   7A00         MOV     R2,#0x0
   \                     ??cJSON_HasObjectItem_1:
   \   000015                REQUIRE ?Subroutine10
   \   000015                ; // Fall through to label ?Subroutine10
   1935          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   7B00         MOV     R3,#0x0
   \   000002   02....       LJMP    ??Subroutine162_0 & 0xFFFF
   1936          
   1937          /* Utility for array list handling. */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1938          static void suffix_object(cJSON *prev, cJSON *item)
   \                     suffix_object:
   1939          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1940              prev->next = item;
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   EC           MOV     A,R4
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   A3           INC     DPTR
   \   00000B   ED           MOV     A,R5
   \   00000C   F0           MOVX    @DPTR,A
   1941              item->prev = prev;
   \   00000D   8C82         MOV     DPL,R4
   \   00000F   8D83         MOV     DPH,R5
   \   000011   12....       LCALL   ??Subroutine185_0 & 0xFFFF
   1942          }
   \                     ??CrossCallReturnLabel_380:
   \   000014   02....       LJMP    ??Subroutine209_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine185_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine186_0
   \   000002                ; // Fall through to label ??Subroutine186_0
   1943          
   1944          /* Utility for handling references. */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1945          static cJSON *create_reference(const cJSON *item, const internal_hooks * const hooks)
   \                     create_reference:
   1946          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FA           MOV     R2,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FB           MOV     R3,A
   1947              cJSON *reference = NULL;
   1948              if (item == NULL)
   \   00000D   E5..         MOV     A,?V0 + 0
   \   00000F   45..         ORL     A,?V0 + 1
   \   000011   7006         JNZ     ??create_reference_0
   1949              {
   1950                  return NULL;
   \                     ??create_reference_1:
   \   000013   7A00         MOV     R2,#0x0
   \   000015   7B00         MOV     R3,#0x0
   \   000017   803B         SJMP    ??create_reference_2
   1951              }
   1952          
   1953              reference = cJSON_New_Item(hooks);
   \                     ??create_reference_0:
   \   000019                ; Setup parameters for call to function cJSON_New_Item
   \   000019   12....       LCALL   ??Subroutine218_0 & 0xFFFF
   1954              if (reference == NULL)
   \                     ??CrossCallReturnLabel_572:
   \   00001C   60F5         JZ      ??create_reference_1
   1955              {
   1956                  return NULL;
   1957              }
   1958          
   1959              memcpy(reference, item, sizeof(cJSON));
   \   00001E                ; Setup parameters for call to function memcpy
   \   00001E   75..12       MOV     ?V0 + 2,#0x12
   \   000021   75..00       MOV     ?V0 + 3,#0x0
   \   000024   78..         MOV     R0,#?V0 + 2
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000029   AC..         MOV     R4,?V0 + 0
   \   00002B   AD..         MOV     R5,?V0 + 1
   \   00002D   12....       LCALL   ??Subroutine165_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_288:
   \   000030   12....       LCALL   ?DEALLOC_XSTACK8
   1960              reference->string = NULL;
   \   000033   12....       LCALL   ?Subroutine112 & 0xFFFF
   \                     ??CrossCallReturnLabel_645:
   \   000036   EF           MOV     A,R7
   \   000037   12....       LCALL   ??Subroutine180_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_353:
   \   00003A   12....       LCALL   ?Subroutine102 & 0xFFFF
   1961              reference->type |= cJSON_IsReference;
   \                     ??CrossCallReturnLabel_162:
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   E0           MOVX    A,@DPTR
   \   000041   4401         ORL     A,#0x1
   \   000043   12....       LCALL   ?Subroutine109 & 0xFFFF
   1962              reference->next = reference->prev = NULL;
   \                     ??CrossCallReturnLabel_174:
   \   000046   A3           INC     DPTR
   \   000047   E4           CLR     A
   \   000048   F0           MOVX    @DPTR,A
   \   000049   A3           INC     DPTR
   \   00004A   12....       LCALL   ?Subroutine146 & 0xFFFF
   \                     ??CrossCallReturnLabel_225:
   \   00004D   F0           MOVX    @DPTR,A
   \   00004E   A3           INC     DPTR
   \   00004F   F0           MOVX    @DPTR,A
   1963              return reference;
   \   000050   EE           MOV     A,R6
   \   000051   FA           MOV     R2,A
   \   000052   EF           MOV     A,R7
   \   000053   FB           MOV     R3,A
   \                     ??create_reference_2:
   \   000054   02....       LJMP    ??Subroutine184_0 & 0xFFFF
   1964          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine218_0:
   \   000000   12....       LCALL   ??cJSON_New_Item?relay
   \   000003   8A..         MOV     ?V0 + 2,R2
   \   000005   8B..         MOV     ?V0 + 3,R3
   \   000007   AE..         MOV     R6,?V0 + 2
   \   000009   AF..         MOV     R7,?V0 + 3
   \   00000B   EE           MOV     A,R6
   \   00000C   4F           ORL     A,R7
   \   00000D   22           RET
   1965          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1966          static cJSON_bool add_item_to_array(cJSON *array, cJSON *item)
   \                     add_item_to_array:
   1967          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
   1968              cJSON *child = NULL;
   1969          
   1970              if ((item == NULL) || (array == NULL) || (array == item))
   \   00000D   EE           MOV     A,R6
   \   00000E   4F           ORL     A,R7
   \   00000F   600F         JZ      ??add_item_to_array_0
   \   000011   EA           MOV     A,R2
   \   000012   45..         ORL     A,?V0 + 1
   \   000014   600A         JZ      ??add_item_to_array_0
   \   000016   EE           MOV     A,R6
   \   000017   65..         XRL     A,?V0 + 0
   \   000019   7003         JNZ     ??add_item_to_array_1
   \   00001B   EF           MOV     A,R7
   \   00001C   65..         XRL     A,?V0 + 1
   \                     ??add_item_to_array_1:
   \   00001E   7004         JNZ     ??add_item_to_array_2
   1971              {
   1972                  return false;
   \                     ??add_item_to_array_0:
   \   000020   7A00         MOV     R2,#0x0
   \   000022   8046         SJMP    ??add_item_to_array_3
   1973              }
   1974          
   1975              child = array->child;
   \                     ??add_item_to_array_2:
   \   000024   8A82         MOV     DPL,R2
   \   000026   8B83         MOV     DPH,R3
   \   000028   12....       LCALL   ??Subroutine203_0 & 0xFFFF
   1976              /*
   1977               * To find the last item in array quickly, we use prev in array
   1978               */
   1979              if (child == NULL)
   \                     ??CrossCallReturnLabel_457:
   \   00002B   701C         JNZ     ??add_item_to_array_4
   1980              {
   1981                  /* list is empty, start new one */
   1982                  array->child = item;
   \   00002D   8A82         MOV     DPL,R2
   \   00002F   8B83         MOV     DPH,R3
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   EE           MOV     A,R6
   \   000036   F0           MOVX    @DPTR,A
   \   000037   A3           INC     DPTR
   \   000038   EF           MOV     A,R7
   \   000039   12....       LCALL   ?Subroutine109 & 0xFFFF
   1983                  item->prev = item;
   1984                  item->next = NULL;
   1985              }
   \                     ??CrossCallReturnLabel_175:
   \   00003C   A3           INC     DPTR
   \   00003D   EE           MOV     A,R6
   \   00003E   F0           MOVX    @DPTR,A
   \   00003F   A3           INC     DPTR
   \   000040   EF           MOV     A,R7
   \   000041   12....       LCALL   ?Subroutine146 & 0xFFFF
   \                     ??CrossCallReturnLabel_224:
   \   000044   E4           CLR     A
   \   000045   F0           MOVX    @DPTR,A
   \   000046   A3           INC     DPTR
   \   000047   801E         SJMP    ??add_item_to_array_5
   1986              else
   1987              {
   1988                  /* append to the end */
   1989                  if (child->prev)
   \                     ??add_item_to_array_4:
   \   000049   8882         MOV     DPL,R0
   \   00004B   8983         MOV     DPH,R1
   \   00004D   12....       LCALL   ??Subroutine188_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_390:
   \   000050   6016         JZ      ??add_item_to_array_6
   1990                  {
   1991                      suffix_object(child->prev, item);
   \   000052                ; Setup parameters for call to function suffix_object
   \   000052   12....       LCALL   ??suffix_object?relay
   1992                      array->child->prev = item;
   \   000055   85..82       MOV     DPL,?V0 + 0
   \   000058   85..83       MOV     DPH,?V0 + 1
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   12....       LCALL   ?Subroutine71 & 0xFFFF
   1993                  }
   1994              }
   \                     ??CrossCallReturnLabel_110:
   \   000062   A3           INC     DPTR
   \   000063   EE           MOV     A,R6
   \   000064   F0           MOVX    @DPTR,A
   \   000065   A3           INC     DPTR
   \   000066   EF           MOV     A,R7
   \                     ??add_item_to_array_5:
   \   000067   F0           MOVX    @DPTR,A
   1995          
   1996              return true;
   \                     ??add_item_to_array_6:
   \   000068   7A01         MOV     R2,#0x1
   \                     ??add_item_to_array_3:
   \   00006A   02....       LJMP    ?Subroutine10 & 0xFFFF
   1997          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   12....       LCALL   ?Subroutine129 & 0xFFFF
   \                     ??CrossCallReturnLabel_283:
   \   000003   A3           INC     DPTR
   \   000004   22           RET
   1998          
   1999          /* Add item to array/object. */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2000          CJSON_PUBLIC(cJSON_bool) cJSON_AddItemToArray(cJSON *array, cJSON *item)
   \                     cJSON_AddItemToArray:
   2001          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2002              return add_item_to_array(array, item);
   \   000004                ; Setup parameters for call to function add_item_to_array
   \   000004   12....       LCALL   ??add_item_to_array?relay
   \   000007   02....       LJMP    ??Subroutine209_0 & 0xFFFF
   2003          }
   2004          
   2005          #if defined(__clang__) || (defined(__GNUC__)  && ((__GNUC__ > 4) || ((__GNUC__ == 4) && (__GNUC_MINOR__ > 5))))
   2006              #pragma GCC diagnostic push
   2007          #endif
   2008          #ifdef __GNUC__
   2009          #pragma GCC diagnostic ignored "-Wcast-qual"
   2010          #endif
   2011          /* helper function to cast away const */
   2012          static void* cast_away_const(const void* string)
   2013          {
   2014              return (void*)string;
   2015          }
   2016          #if defined(__clang__) || (defined(__GNUC__)  && ((__GNUC__ > 4) || ((__GNUC__ == 4) && (__GNUC_MINOR__ > 5))))
   2017              #pragma GCC diagnostic pop
   2018          #endif
   2019          
   2020          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2021          static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
   \                     add_item_to_object:
   2022          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   EC           MOV     A,R4
   \   00000A   FA           MOV     R2,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FB           MOV     R3,A
   \   00000D   7410         MOV     A,#0x10
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   12....       LCALL   ??Subroutine212_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_526:
   \   000015   7412         MOV     A,#0x12
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   00001D   7414         MOV     A,#0x14
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   12....       LCALL   ?Subroutine46 & 0xFFFF
   2023              char *new_key = NULL;
   2024              int new_type = cJSON_Invalid;
   2025          
   2026              if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
   \                     ??CrossCallReturnLabel_67:
   \   000025   4F           ORL     A,R7
   \   000026   6014         JZ      ??add_item_to_object_0
   \   000028   EA           MOV     A,R2
   \   000029   4B           ORL     A,R3
   \   00002A   6010         JZ      ??add_item_to_object_0
   \   00002C   E5..         MOV     A,?V0 + 0
   \   00002E   45..         ORL     A,?V0 + 1
   \   000030   600A         JZ      ??add_item_to_object_0
   \   000032   E5..         MOV     A,?V0 + 0
   \   000034   6E           XRL     A,R6
   \   000035   7003         JNZ     ??add_item_to_object_1
   \   000037   E5..         MOV     A,?V0 + 1
   \   000039   6F           XRL     A,R7
   \                     ??add_item_to_object_1:
   \   00003A   7007         JNZ     ??add_item_to_object_2
   2027              {
   2028                  return false;
   \                     ??add_item_to_object_0:
   \   00003C   7A00         MOV     R2,#0x0
   \   00003E   7B00         MOV     R3,#0x0
   \   000040   02....       LJMP    ??add_item_to_object_3 & 0xFFFF
   2029              }
   2030          
   2031              if (constant_key)
   \                     ??add_item_to_object_2:
   \   000043   E8           MOV     A,R0
   \   000044   49           ORL     A,R1
   \   000045   6019         JZ      ??add_item_to_object_4
   2032              {
   2033                  new_key = (char*)cast_away_const(string);
   \   000047   8A..         MOV     ?V0 + 2,R2
   \   000049   8B..         MOV     ?V0 + 3,R3
   2034                  new_type = item->type | cJSON_StringIsConst;
   \   00004B   85..82       MOV     DPL,?V0 + 0
   \   00004E   85..83       MOV     DPH,?V0 + 1
   \   000051   A3           INC     DPTR
   \   000052   A3           INC     DPTR
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   A3           INC     DPTR
   \   000056   A3           INC     DPTR
   \   000057   E0           MOVX    A,@DPTR
   \   000058   F5..         MOV     ?V0 + 4,A
   \   00005A   A3           INC     DPTR
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   4402         ORL     A,#0x2
   \   00005E   8023         SJMP    ??add_item_to_object_5
   2035              }
   2036              else
   2037              {
   2038                  new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
   \                     ??add_item_to_object_4:
   \   000060                ; Setup parameters for call to function cJSON_strdup
   \   000060   AC..         MOV     R4,?V0 + 6
   \   000062   AD..         MOV     R5,?V0 + 7
   \   000064   12....       LCALL   ??cJSON_strdup?relay
   \   000067   8A..         MOV     ?V0 + 2,R2
   \   000069   8B..         MOV     ?V0 + 3,R3
   2039                  if (new_key == NULL)
   \   00006B   EA           MOV     A,R2
   \   00006C   45..         ORL     A,?V0 + 3
   \   00006E   60CC         JZ      ??add_item_to_object_0
   2040                  {
   2041                      return false;
   2042                  }
   2043          
   2044                  new_type = item->type & ~cJSON_StringIsConst;
   \   000070   85..82       MOV     DPL,?V0 + 0
   \   000073   85..83       MOV     DPH,?V0 + 1
   \   000076   A3           INC     DPTR
   \   000077   A3           INC     DPTR
   \   000078   A3           INC     DPTR
   \   000079   A3           INC     DPTR
   \   00007A   A3           INC     DPTR
   \   00007B   A3           INC     DPTR
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   F5..         MOV     ?V0 + 4,A
   \   00007F   A3           INC     DPTR
   \   000080   E0           MOVX    A,@DPTR
   \   000081   54FD         ANL     A,#0xfd
   \                     ??add_item_to_object_5:
   \   000083   F5..         MOV     ?V0 + 5,A
   2045              }
   2046          
   2047              if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
   \   000085   85..82       MOV     DPL,?V0 + 0
   \   000088   85..83       MOV     DPH,?V0 + 1
   \   00008B   A3           INC     DPTR
   \   00008C   A3           INC     DPTR
   \   00008D   A3           INC     DPTR
   \   00008E   A3           INC     DPTR
   \   00008F   A3           INC     DPTR
   \   000090   A3           INC     DPTR
   \   000091   A3           INC     DPTR
   \   000092   E0           MOVX    A,@DPTR
   \   000093   5402         ANL     A,#0x2
   \   000095   701C         JNZ     ??add_item_to_object_6
   \   000097   12....       LCALL   ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_359:
   \   00009A   12....       LCALL   ??Subroutine205_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_477:
   \   00009D   6014         JZ      ??add_item_to_object_6
   2048              {
   2049                  hooks->deallocate(item->string);
   \   00009F                ; Setup parameters for indirect call
   \   00009F   12....       LCALL   ?Subroutine88 & 0xFFFF
   2050              }
   \                     ??CrossCallReturnLabel_360:
   \   0000A2   12....       LCALL   ??Subroutine195_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_411:
   \   0000A5   85..82       MOV     DPL,?V0 + 6
   \   0000A8   85..83       MOV     DPH,?V0 + 7
   \   0000AB   A3           INC     DPTR
   \   0000AC   A3           INC     DPTR
   \   0000AD   12....       LCALL   ??Subroutine164_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_265:
   \   0000B0   12....       LCALL   ?CALL_IND
   2051          
   2052              item->string = new_key;
   \                     ??add_item_to_object_6:
   \   0000B3   12....       LCALL   ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_361:
   \   0000B6   E5..         MOV     A,?V0 + 2
   \   0000B8   F0           MOVX    @DPTR,A
   \   0000B9   A3           INC     DPTR
   \   0000BA   E5..         MOV     A,?V0 + 3
   \   0000BC   12....       LCALL   ?Subroutine95 & 0xFFFF
   2053              item->type = new_type;
   \                     ??CrossCallReturnLabel_156:
   \   0000BF   E5..         MOV     A,?V0 + 4
   \   0000C1   F0           MOVX    @DPTR,A
   \   0000C2   A3           INC     DPTR
   \   0000C3   E5..         MOV     A,?V0 + 5
   \   0000C5   F0           MOVX    @DPTR,A
   2054          
   2055              return add_item_to_array(object, item);
   \   0000C6                ; Setup parameters for call to function add_item_to_array
   \   0000C6   AC..         MOV     R4,?V0 + 0
   \   0000C8   AD..         MOV     R5,?V0 + 1
   \   0000CA   EE           MOV     A,R6
   \   0000CB   FA           MOV     R2,A
   \   0000CC   EF           MOV     A,R7
   \   0000CD   FB           MOV     R3,A
   \   0000CE   12....       LCALL   ??add_item_to_array?relay
   \                     ??add_item_to_object_3:
   \   0000D1   80..         SJMP    ??Subroutine190_0
   2056          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 6,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 7,A
   \   000007   22           RET
   2057          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   78..         MOV     R0,#?V0 + 2
   \   000002   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000005   75....       MOV     ?V0 + 2,#global_hooks & 0xff
   \   000008   75....       MOV     ?V0 + 3,#(global_hooks >> 8) & 0xff
   \   00000B   78..         MOV     R0,#?V0 + 2
   \   00000D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000010   78..         MOV     R0,#?V0 + 0
   \   000012   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000015   12....       LCALL   ??Subroutine193_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_404:
   \   000018                REQUIRE ??Subroutine183_0
   \   000018                ; // Fall through to label ??Subroutine183_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2058          CJSON_PUBLIC(cJSON_bool) cJSON_AddItemToObject(cJSON *object, const char *string, cJSON *item)
   \                     cJSON_AddItemToObject:
   2059          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   740C         MOV     A,#0xc
   \   000007   12....       LCALL   ?XSTACK_DISP0_8
   \   00000A   12....       LCALL   ?Subroutine49 & 0xFFFF
   2060              return add_item_to_object(object, string, item, &global_hooks, false);
   \                     ??CrossCallReturnLabel_73:
   \   00000D   02....       LJMP    ?Subroutine7 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine193_0:
   \   000000   12....       LCALL   ??add_item_to_object?relay
   \   000003   7406         MOV     A,#0x6
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   12....       LCALL   ?Subroutine130 & 0xFFFF
   \                     ??CrossCallReturnLabel_537:
   \   000003                ; Setup parameters for call to function add_item_to_object
   \   000003                ; Setup parameters for call to function replace_item_in_object
   \   000003   E4           CLR     A
   \   000004   F5..         MOV     ?V0 + 2,A
   \   000006   F5..         MOV     ?V0 + 3,A
   \   000008   22           RET
   2061          }
   2062          
   2063          /* Add an item to an object with constant string as key */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2064          CJSON_PUBLIC(cJSON_bool) cJSON_AddItemToObjectCS(cJSON *object, const char *string, cJSON *item)
   \                     cJSON_AddItemToObjectCS:
   2065          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   740C         MOV     A,#0xc
   \   000007   12....       LCALL   ?XSTACK_DISP0_8
   \   00000A   12....       LCALL   ?Subroutine45 & 0xFFFF
   2066              return add_item_to_object(object, string, item, &global_hooks, true);
   \                     ??CrossCallReturnLabel_65:
   \   00000D   02....       LJMP    ?Subroutine7 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   12....       LCALL   ?Subroutine130 & 0xFFFF
   \                     ??CrossCallReturnLabel_536:
   \   000003                ; Setup parameters for call to function add_item_to_object
   \   000003                ; Setup parameters for call to function replace_item_in_object
   \   000003   75..01       MOV     ?V0 + 2,#0x1
   \   000006   75..00       MOV     ?V0 + 3,#0x0
   \   000009   22           RET
   2067          }
   2068          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2069          CJSON_PUBLIC(cJSON_bool) cJSON_AddItemReferenceToArray(cJSON *array, cJSON *item)
   \                     cJSON_AddItemReferenceToArray:
   2070          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   EC           MOV     A,R4
   \   00000A   FA           MOV     R2,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FB           MOV     R3,A
   2071              if (array == NULL)
   \   00000D   EE           MOV     A,R6
   \   00000E   4F           ORL     A,R7
   \   00000F   7006         JNZ     ??cJSON_AddItemReferenceToArray_0
   2072              {
   2073                  return false;
   \   000011   7A00         MOV     R2,#0x0
   \   000013   7B00         MOV     R3,#0x0
   \   000015   8012         SJMP    ??cJSON_AddItemReferenceToArray_1
   2074              }
   2075          
   2076              return add_item_to_array(array, create_reference(item, &global_hooks));
   \                     ??cJSON_AddItemReferenceToArray_0:
   \   000017                ; Setup parameters for call to function add_item_to_array
   \   000017                ; Setup parameters for call to function create_reference
   \   000017   7C..         MOV     R4,#global_hooks & 0xff
   \   000019   7D..         MOV     R5,#(global_hooks >> 8) & 0xff
   \   00001B   12....       LCALL   ??create_reference?relay
   \   00001E   EA           MOV     A,R2
   \   00001F   FC           MOV     R4,A
   \   000020   EB           MOV     A,R3
   \   000021   FD           MOV     R5,A
   \   000022   EE           MOV     A,R6
   \   000023   FA           MOV     R2,A
   \   000024   EF           MOV     A,R7
   \   000025   FB           MOV     R3,A
   \   000026   12....       LCALL   ??add_item_to_array?relay
   \                     ??cJSON_AddItemReferenceToArray_1:
   \   000029   80..         SJMP    ??Subroutine191_0
   2077          }
   2078          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2079          CJSON_PUBLIC(cJSON_bool) cJSON_AddItemReferenceToObject(cJSON *object, const char *string, cJSON *item)
   \                     cJSON_AddItemReferenceToObject:
   2080          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
   \   00000D   740C         MOV     A,#0xc
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   12....       LCALL   ??Subroutine195_0 & 0xFFFF
   2081              if ((object == NULL) || (string == NULL))
   \                     ??CrossCallReturnLabel_412:
   \   000015   EE           MOV     A,R6
   \   000016   4F           ORL     A,R7
   \   000017   6005         JZ      ??cJSON_AddItemReferenceToObject_0
   \   000019   EC           MOV     A,R4
   \   00001A   45..         ORL     A,?V0 + 1
   \   00001C   7006         JNZ     ??cJSON_AddItemReferenceToObject_1
   2082              {
   2083                  return false;
   \                     ??cJSON_AddItemReferenceToObject_0:
   \   00001E   7A00         MOV     R2,#0x0
   \   000020   7B00         MOV     R3,#0x0
   \   000022   802B         SJMP    ??cJSON_AddItemReferenceToObject_2
   2084              }
   2085          
   2086              return add_item_to_object(object, string, create_reference(item, &global_hooks), &global_hooks, false);
   \                     ??cJSON_AddItemReferenceToObject_1:
   \   000024                ; Setup parameters for call to function add_item_to_object
   \   000024   E4           CLR     A
   \   000025   F5..         MOV     ?V0 + 2,A
   \   000027   F5..         MOV     ?V0 + 3,A
   \   000029   78..         MOV     R0,#?V0 + 2
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   75....       MOV     ?V0 + 2,#global_hooks & 0xff
   \   000031   75....       MOV     ?V0 + 3,#(global_hooks >> 8) & 0xff
   \   000034   78..         MOV     R0,#?V0 + 2
   \   000036   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000039                ; Setup parameters for call to function create_reference
   \   000039   7C..         MOV     R4,#global_hooks & 0xff
   \   00003B   7D..         MOV     R5,#(global_hooks >> 8) & 0xff
   \   00003D   12....       LCALL   ??create_reference?relay
   \   000040   8A..         MOV     ?V0 + 2,R2
   \   000042   8B..         MOV     ?V0 + 3,R3
   \   000044   78..         MOV     R0,#?V0 + 2
   \   000046   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000049   12....       LCALL   ?Subroutine122 & 0xFFFF
   \                     ??CrossCallReturnLabel_394:
   \   00004C   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??cJSON_AddItemReferenceToObject_2:
   \   00004F   02....       LJMP    ??Subroutine184_0 & 0xFFFF
   2087          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine122:
   \   000000   AC..         MOV     R4,?V0 + 0
   \   000002   AD..         MOV     R5,?V0 + 1
   \   000004   EE           MOV     A,R6
   \   000005   FA           MOV     R2,A
   \   000006   EF           MOV     A,R7
   \   000007   FB           MOV     R3,A
   \   000008                REQUIRE ??Subroutine193_0
   \   000008                ; // Fall through to label ??Subroutine193_0
   2088          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2089          CJSON_PUBLIC(cJSON*) cJSON_AddNullToObject(cJSON * const object, const char * const name)
   \                     cJSON_AddNullToObject:
   2090          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
   2091              cJSON *null = cJSON_CreateNull();
   \   00000D                ; Setup parameters for call to function cJSON_CreateNull
   \   00000D   12....       LCALL   ??cJSON_CreateNull?relay
   \   000010   8A..         MOV     ?V0 + 2,R2
   \   000012   8B..         MOV     ?V0 + 3,R3
   2092              if (add_item_to_object(object, name, null, &global_hooks, false))
   \   000014                ; Setup parameters for call to function add_item_to_object
   \   000014   E4           CLR     A
   \   000015   F5..         MOV     ?V0 + 4,A
   \   000017   F5..         MOV     ?V0 + 5,A
   \   000019   78..         MOV     R0,#?V0 + 4
   \   00001B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001E   75....       MOV     ?V0 + 4,#global_hooks & 0xff
   \   000021   75....       MOV     ?V0 + 5,#(global_hooks >> 8) & 0xff
   \   000024   78..         MOV     R0,#?V0 + 4
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000029   78..         MOV     R0,#?V0 + 2
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   12....       LCALL   ?Subroutine122 & 0xFFFF
   \                     ??CrossCallReturnLabel_395:
   \   000031   12....       LCALL   ?DEALLOC_XSTACK8
   \   000034   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   000037   7003         JNZ     ??CrossCallReturnLabel_421
   2093              {
   2094                  return null;
   2095              }
   2096          
   2097              cJSON_Delete(null);
   \   000039                ; Setup parameters for call to function cJSON_Delete
   \   000039   12....       LCALL   ??Subroutine196_0 & 0xFFFF
   2098              return NULL;
   \                     ??CrossCallReturnLabel_421:
   \   00003C   80..         SJMP    ??Subroutine192_0
   2099          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine82:
   \   000000   8B..         MOV     ?V0 + 1,R3
   \   000002   EA           MOV     A,R2
   \   000003   45..         ORL     A,?V0 + 1
   \   000005   AA..         MOV     R2,?V0 + 2
   \   000007   AB..         MOV     R3,?V0 + 3
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine196_0:
   \   000000   12....       LCALL   ??cJSON_Delete?relay
   \   000003   7A00         MOV     R2,#0x0
   \   000005   7B00         MOV     R3,#0x0
   \   000007   22           RET
   2100          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2101          CJSON_PUBLIC(cJSON*) cJSON_AddTrueToObject(cJSON * const object, const char * const name)
   \                     cJSON_AddTrueToObject:
   2102          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
   2103              cJSON *true_item = cJSON_CreateTrue();
   \   00000D                ; Setup parameters for call to function cJSON_CreateTrue
   \   00000D   12....       LCALL   ??cJSON_CreateTrue?relay
   \   000010   8A..         MOV     ?V0 + 2,R2
   \   000012   8B..         MOV     ?V0 + 3,R3
   2104              if (add_item_to_object(object, name, true_item, &global_hooks, false))
   \   000014                ; Setup parameters for call to function add_item_to_object
   \   000014   E4           CLR     A
   \   000015   F5..         MOV     ?V0 + 4,A
   \   000017   F5..         MOV     ?V0 + 5,A
   \   000019   78..         MOV     R0,#?V0 + 4
   \   00001B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001E   75....       MOV     ?V0 + 4,#global_hooks & 0xff
   \   000021   75....       MOV     ?V0 + 5,#(global_hooks >> 8) & 0xff
   \   000024   78..         MOV     R0,#?V0 + 4
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000029   78..         MOV     R0,#?V0 + 2
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   12....       LCALL   ?Subroutine122 & 0xFFFF
   \                     ??CrossCallReturnLabel_396:
   \   000031   12....       LCALL   ?DEALLOC_XSTACK8
   \   000034   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   000037   7003         JNZ     ??CrossCallReturnLabel_422
   2105              {
   2106                  return true_item;
   2107              }
   2108          
   2109              cJSON_Delete(true_item);
   \   000039                ; Setup parameters for call to function cJSON_Delete
   \   000039   12....       LCALL   ??Subroutine196_0 & 0xFFFF
   2110              return NULL;
   \                     ??CrossCallReturnLabel_422:
   \   00003C   80..         SJMP    ??Subroutine192_0
   2111          }
   2112          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2113          CJSON_PUBLIC(cJSON*) cJSON_AddFalseToObject(cJSON * const object, const char * const name)
   \                     cJSON_AddFalseToObject:
   2114          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
   2115              cJSON *false_item = cJSON_CreateFalse();
   \   00000D                ; Setup parameters for call to function cJSON_CreateFalse
   \   00000D   12....       LCALL   ??cJSON_CreateFalse?relay
   \   000010   8A..         MOV     ?V0 + 2,R2
   \   000012   8B..         MOV     ?V0 + 3,R3
   2116              if (add_item_to_object(object, name, false_item, &global_hooks, false))
   \   000014                ; Setup parameters for call to function add_item_to_object
   \   000014   E4           CLR     A
   \   000015   F5..         MOV     ?V0 + 4,A
   \   000017   F5..         MOV     ?V0 + 5,A
   \   000019   78..         MOV     R0,#?V0 + 4
   \   00001B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001E   75....       MOV     ?V0 + 4,#global_hooks & 0xff
   \   000021   75....       MOV     ?V0 + 5,#(global_hooks >> 8) & 0xff
   \   000024   78..         MOV     R0,#?V0 + 4
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000029   78..         MOV     R0,#?V0 + 2
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   12....       LCALL   ?Subroutine122 & 0xFFFF
   \                     ??CrossCallReturnLabel_397:
   \   000031   12....       LCALL   ?DEALLOC_XSTACK8
   \   000034   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   000037   7003         JNZ     ??CrossCallReturnLabel_423
   2117              {
   2118                  return false_item;
   2119              }
   2120          
   2121              cJSON_Delete(false_item);
   \   000039                ; Setup parameters for call to function cJSON_Delete
   \   000039   12....       LCALL   ??Subroutine196_0 & 0xFFFF
   2122              return NULL;
   \                     ??CrossCallReturnLabel_423:
   \   00003C   80..         SJMP    ??Subroutine192_0
   2123          }
   2124          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2125          CJSON_PUBLIC(cJSON*) cJSON_AddBoolToObject(cJSON * const object, const char * const name, const cJSON_bool boolean)
   \                     cJSON_AddBoolToObject:
   2126          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
   \   00000D   740E         MOV     A,#0xe
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   12....       LCALL   ??Subroutine195_0 & 0xFFFF
   2127              cJSON *bool_item = cJSON_CreateBool(boolean);
   \                     ??CrossCallReturnLabel_413:
   \   000015                ; Setup parameters for call to function cJSON_CreateBool
   \   000015   12....       LCALL   ??cJSON_CreateBool?relay
   \   000018   8A..         MOV     ?V0 + 2,R2
   \   00001A   8B..         MOV     ?V0 + 3,R3
   2128              if (add_item_to_object(object, name, bool_item, &global_hooks, false))
   \   00001C                ; Setup parameters for call to function add_item_to_object
   \   00001C   E4           CLR     A
   \   00001D   F5..         MOV     ?V0 + 4,A
   \   00001F   F5..         MOV     ?V0 + 5,A
   \   000021   78..         MOV     R0,#?V0 + 4
   \   000023   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000026   75....       MOV     ?V0 + 4,#global_hooks & 0xff
   \   000029   75....       MOV     ?V0 + 5,#(global_hooks >> 8) & 0xff
   \   00002C   78..         MOV     R0,#?V0 + 4
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000031   78..         MOV     R0,#?V0 + 2
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000036   12....       LCALL   ?Subroutine122 & 0xFFFF
   \                     ??CrossCallReturnLabel_398:
   \   000039   12....       LCALL   ?DEALLOC_XSTACK8
   \   00003C   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   00003F   7003         JNZ     ??CrossCallReturnLabel_424
   2129              {
   2130                  return bool_item;
   2131              }
   2132          
   2133              cJSON_Delete(bool_item);
   \   000041                ; Setup parameters for call to function cJSON_Delete
   \   000041   12....       LCALL   ??Subroutine196_0 & 0xFFFF
   2134              return NULL;
   \                     ??CrossCallReturnLabel_424:
   \   000044   02....       LJMP    ??Subroutine192_0 & 0xFFFF
   2135          }
   2136          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2137          CJSON_PUBLIC(cJSON*) cJSON_AddNumberToObject(cJSON * const object, const char * const name, const double number)
   \                     cJSON_AddNumberToObject:
   2138          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
   \   00000D   7410         MOV     A,#0x10
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   78..         MOV     R0,#?V0 + 4
   \   000014   12....       LCALL   ?L_MOV_X
   2139              cJSON *number_item = cJSON_CreateNumber(number);
   \   000017                ; Setup parameters for call to function cJSON_CreateNumber
   \   000017   AA..         MOV     R2,?V0 + 4
   \   000019   AB..         MOV     R3,?V0 + 5
   \   00001B   AC..         MOV     R4,?V0 + 6
   \   00001D   AD..         MOV     R5,?V0 + 7
   \   00001F   12....       LCALL   ??cJSON_CreateNumber?relay
   \   000022   8A..         MOV     ?V0 + 2,R2
   \   000024   8B..         MOV     ?V0 + 3,R3
   2140              if (add_item_to_object(object, name, number_item, &global_hooks, false))
   \   000026                ; Setup parameters for call to function add_item_to_object
   \   000026   E4           CLR     A
   \   000027   F5..         MOV     ?V0 + 4,A
   \   000029   F5..         MOV     ?V0 + 5,A
   \   00002B   78..         MOV     R0,#?V0 + 4
   \   00002D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000030   75....       MOV     ?V0 + 4,#global_hooks & 0xff
   \   000033   75....       MOV     ?V0 + 5,#(global_hooks >> 8) & 0xff
   \   000036   78..         MOV     R0,#?V0 + 4
   \   000038   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003B   78..         MOV     R0,#?V0 + 2
   \   00003D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000040   12....       LCALL   ?Subroutine122 & 0xFFFF
   \                     ??CrossCallReturnLabel_399:
   \   000043   12....       LCALL   ?DEALLOC_XSTACK8
   \   000046   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   000049   7003         JNZ     ??CrossCallReturnLabel_425
   2141              {
   2142                  return number_item;
   2143              }
   2144          
   2145              cJSON_Delete(number_item);
   \   00004B                ; Setup parameters for call to function cJSON_Delete
   \   00004B   12....       LCALL   ??Subroutine196_0 & 0xFFFF
   2146              return NULL;
   \                     ??CrossCallReturnLabel_425:
   \   00004E   02....       LJMP    ??Subroutine190_0 & 0xFFFF
   2147          }
   2148          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2149          CJSON_PUBLIC(cJSON*) cJSON_AddStringToObject(cJSON * const object, const char * const name, const char * const string)
   \                     cJSON_AddStringToObject:
   2150          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
   \   00000D   740E         MOV     A,#0xe
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   12....       LCALL   ?Subroutine48 & 0xFFFF
   2151              cJSON *string_item = cJSON_CreateString(string);
   2152              if (add_item_to_object(object, name, string_item, &global_hooks, false))
   \                     ??CrossCallReturnLabel_71:
   \   000015                ; Setup parameters for call to function add_item_to_object
   \   000015   E4           CLR     A
   \   000016   F5..         MOV     ?V0 + 4,A
   \   000018   F5..         MOV     ?V0 + 5,A
   \   00001A   78..         MOV     R0,#?V0 + 4
   \   00001C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001F   75....       MOV     ?V0 + 4,#global_hooks & 0xff
   \   000022   75....       MOV     ?V0 + 5,#(global_hooks >> 8) & 0xff
   \   000025   78..         MOV     R0,#?V0 + 4
   \   000027   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002A   78..         MOV     R0,#?V0 + 2
   \   00002C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002F   12....       LCALL   ?Subroutine122 & 0xFFFF
   \                     ??CrossCallReturnLabel_400:
   \   000032   12....       LCALL   ?DEALLOC_XSTACK8
   \   000035   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   000038   7003         JNZ     ??CrossCallReturnLabel_426
   2153              {
   2154                  return string_item;
   2155              }
   2156          
   2157              cJSON_Delete(string_item);
   \   00003A                ; Setup parameters for call to function cJSON_Delete
   \   00003A   12....       LCALL   ??Subroutine196_0 & 0xFFFF
   2158              return NULL;
   \                     ??CrossCallReturnLabel_426:
   \   00003D   02....       LJMP    ??Subroutine192_0 & 0xFFFF
   2159          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   12....       LCALL   ??Subroutine216_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_551:
   \   000003                ; Setup parameters for call to function cJSON_CreateString
   \   000003   12....       LCALL   ??cJSON_CreateString?relay
   \   000006   8A..         MOV     ?V0 + 2,R2
   \   000008   8B..         MOV     ?V0 + 3,R3
   \   00000A   22           RET
   2160          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2161          CJSON_PUBLIC(cJSON*) cJSON_AddRawToObject(cJSON * const object, const char * const name, const char * const raw)
   \                     cJSON_AddRawToObject:
   2162          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
   \   00000D   740E         MOV     A,#0xe
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   12....       LCALL   ??Subroutine195_0 & 0xFFFF
   2163              cJSON *raw_item = cJSON_CreateRaw(raw);
   \                     ??CrossCallReturnLabel_414:
   \   000015                ; Setup parameters for call to function cJSON_CreateRaw
   \   000015   12....       LCALL   ??cJSON_CreateRaw?relay
   \   000018   8A..         MOV     ?V0 + 2,R2
   \   00001A   8B..         MOV     ?V0 + 3,R3
   2164              if (add_item_to_object(object, name, raw_item, &global_hooks, false))
   \   00001C                ; Setup parameters for call to function add_item_to_object
   \   00001C   E4           CLR     A
   \   00001D   F5..         MOV     ?V0 + 4,A
   \   00001F   F5..         MOV     ?V0 + 5,A
   \   000021   78..         MOV     R0,#?V0 + 4
   \   000023   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000026   75....       MOV     ?V0 + 4,#global_hooks & 0xff
   \   000029   75....       MOV     ?V0 + 5,#(global_hooks >> 8) & 0xff
   \   00002C   78..         MOV     R0,#?V0 + 4
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000031   78..         MOV     R0,#?V0 + 2
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000036   12....       LCALL   ?Subroutine122 & 0xFFFF
   \                     ??CrossCallReturnLabel_401:
   \   000039   12....       LCALL   ?DEALLOC_XSTACK8
   \   00003C   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   00003F   7003         JNZ     ??CrossCallReturnLabel_427
   2165              {
   2166                  return raw_item;
   2167              }
   2168          
   2169              cJSON_Delete(raw_item);
   \   000041                ; Setup parameters for call to function cJSON_Delete
   \   000041   12....       LCALL   ??Subroutine196_0 & 0xFFFF
   2170              return NULL;
   \                     ??CrossCallReturnLabel_427:
   \   000044   02....       LJMP    ??Subroutine192_0 & 0xFFFF
   2171          }
   2172          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2173          CJSON_PUBLIC(cJSON*) cJSON_AddObjectToObject(cJSON * const object, const char * const name)
   \                     cJSON_AddObjectToObject:
   2174          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
   2175              cJSON *object_item = cJSON_CreateObject();
   \   00000D                ; Setup parameters for call to function cJSON_CreateObject
   \   00000D   12....       LCALL   ??cJSON_CreateObject?relay
   \   000010   8A..         MOV     ?V0 + 2,R2
   \   000012   8B..         MOV     ?V0 + 3,R3
   2176              if (add_item_to_object(object, name, object_item, &global_hooks, false))
   \   000014                ; Setup parameters for call to function add_item_to_object
   \   000014   E4           CLR     A
   \   000015   F5..         MOV     ?V0 + 4,A
   \   000017   F5..         MOV     ?V0 + 5,A
   \   000019   78..         MOV     R0,#?V0 + 4
   \   00001B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001E   75....       MOV     ?V0 + 4,#global_hooks & 0xff
   \   000021   75....       MOV     ?V0 + 5,#(global_hooks >> 8) & 0xff
   \   000024   78..         MOV     R0,#?V0 + 4
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000029   78..         MOV     R0,#?V0 + 2
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   12....       LCALL   ?Subroutine122 & 0xFFFF
   \                     ??CrossCallReturnLabel_402:
   \   000031   12....       LCALL   ?DEALLOC_XSTACK8
   \   000034   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   000037   7003         JNZ     ??CrossCallReturnLabel_428
   2177              {
   2178                  return object_item;
   2179              }
   2180          
   2181              cJSON_Delete(object_item);
   \   000039                ; Setup parameters for call to function cJSON_Delete
   \   000039   12....       LCALL   ??Subroutine196_0 & 0xFFFF
   2182              return NULL;
   \                     ??CrossCallReturnLabel_428:
   \   00003C   02....       LJMP    ??Subroutine192_0 & 0xFFFF
   2183          }
   2184          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2185          CJSON_PUBLIC(cJSON*) cJSON_AddArrayToObject(cJSON * const object, const char * const name)
   \                     cJSON_AddArrayToObject:
   2186          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
   2187              cJSON *array = cJSON_CreateArray();
   \   00000D                ; Setup parameters for call to function cJSON_CreateArray
   \   00000D   12....       LCALL   ??cJSON_CreateArray?relay
   \   000010   8A..         MOV     ?V0 + 2,R2
   \   000012   8B..         MOV     ?V0 + 3,R3
   2188              if (add_item_to_object(object, name, array, &global_hooks, false))
   \   000014                ; Setup parameters for call to function add_item_to_object
   \   000014   E4           CLR     A
   \   000015   F5..         MOV     ?V0 + 4,A
   \   000017   F5..         MOV     ?V0 + 5,A
   \   000019   78..         MOV     R0,#?V0 + 4
   \   00001B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001E   75....       MOV     ?V0 + 4,#global_hooks & 0xff
   \   000021   75....       MOV     ?V0 + 5,#(global_hooks >> 8) & 0xff
   \   000024   78..         MOV     R0,#?V0 + 4
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000029   78..         MOV     R0,#?V0 + 2
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   12....       LCALL   ?Subroutine122 & 0xFFFF
   \                     ??CrossCallReturnLabel_403:
   \   000031   12....       LCALL   ?DEALLOC_XSTACK8
   \   000034   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   000037   7003         JNZ     ??CrossCallReturnLabel_429
   2189              {
   2190                  return array;
   2191              }
   2192          
   2193              cJSON_Delete(array);
   \   000039                ; Setup parameters for call to function cJSON_Delete
   \   000039   12....       LCALL   ??Subroutine196_0 & 0xFFFF
   2194              return NULL;
   \                     ??CrossCallReturnLabel_429:
   \   00003C   02....       LJMP    ??Subroutine192_0 & 0xFFFF
   2195          }
   2196          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2197          CJSON_PUBLIC(cJSON *) cJSON_DetachItemViaPointer(cJSON *parent, cJSON * const item)
   \                     cJSON_DetachItemViaPointer:
   2198          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   2199              if ((parent == NULL) || (item == NULL))
   \   000005   EA           MOV     A,R2
   \   000006   4B           ORL     A,R3
   \   000007   6004         JZ      ??cJSON_DetachItemViaPointer_0
   \   000009   EC           MOV     A,R4
   \   00000A   4D           ORL     A,R5
   \   00000B   7007         JNZ     ??cJSON_DetachItemViaPointer_1
   2200              {
   2201                  return NULL;
   \                     ??cJSON_DetachItemViaPointer_0:
   \   00000D   7A00         MOV     R2,#0x0
   \   00000F   7B00         MOV     R3,#0x0
   \   000011   02....       LJMP    ??cJSON_DetachItemViaPointer_2 & 0xFFFF
   2202              }
   2203          
   2204              if (item != parent->child)
   \                     ??cJSON_DetachItemViaPointer_1:
   \   000014   8A82         MOV     DPL,R2
   \   000016   8B83         MOV     DPH,R3
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   12....       LCALL   ??Subroutine229_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_624:
   \   00001D   EC           MOV     A,R4
   \   00001E   68           XRL     A,R0
   \   00001F   7002         JNZ     ??cJSON_DetachItemViaPointer_3
   \   000021   ED           MOV     A,R5
   \   000022   69           XRL     A,R1
   \                     ??cJSON_DetachItemViaPointer_3:
   \   000023   600F         JZ      ??CrossCallReturnLabel_438
   2205              {
   2206                  /* not the first element */
   2207                  item->prev->next = item->next;
   \   000025   8C82         MOV     DPL,R4
   \   000027   8D83         MOV     DPH,R5
   \   000029   12....       LCALL   ??Subroutine155_0 & 0xFFFF
   2208              }
   \                     ??CrossCallReturnLabel_232:
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   000031   12....       LCALL   ??Subroutine200_0 & 0xFFFF
   2209              if (item->next != NULL)
   \                     ??CrossCallReturnLabel_438:
   \   000034   8C82         MOV     DPL,R4
   \   000036   8D83         MOV     DPH,R5
   \   000038   12....       LCALL   ??Subroutine205_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_478:
   \   00003B   600D         JZ      ??CrossCallReturnLabel_446
   2210              {
   2211                  /* not the last element */
   2212                  item->next->prev = item->prev;
   \   00003D   8C82         MOV     DPL,R4
   \   00003F   8D83         MOV     DPH,R5
   \   000041   12....       LCALL   ??Subroutine154_0 & 0xFFFF
   2213              }
   \                     ??CrossCallReturnLabel_233:
   \   000044   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   000047   12....       LCALL   ??Subroutine198_0 & 0xFFFF
   2214          
   2215              if (item == parent->child)
   \                     ??CrossCallReturnLabel_446:
   \   00004A   8A82         MOV     DPL,R2
   \   00004C   8B83         MOV     DPH,R3
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   12....       LCALL   ??Subroutine229_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_625:
   \   000053   EC           MOV     A,R4
   \   000054   68           XRL     A,R0
   \   000055   7002         JNZ     ??cJSON_DetachItemViaPointer_4
   \   000057   ED           MOV     A,R5
   \   000058   69           XRL     A,R1
   \                     ??cJSON_DetachItemViaPointer_4:
   \   000059   8C82         MOV     DPL,R4
   \   00005B   8D83         MOV     DPH,R5
   \   00005D   7005         JNZ     ??cJSON_DetachItemViaPointer_5
   2216              {
   2217                  /* first element */
   2218                  parent->child = item->next;
   \   00005F   12....       LCALL   ?Subroutine50 & 0xFFFF
   2219              }
   \                     ??CrossCallReturnLabel_75:
   \   000062   8018         SJMP    ??cJSON_DetachItemViaPointer_6
   2220              else if (item->next == NULL)
   \                     ??cJSON_DetachItemViaPointer_5:
   \   000064   12....       LCALL   ??Subroutine205_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_479:
   \   000067   7016         JNZ     ??CrossCallReturnLabel_447
   2221              {
   2222                  /* last element */
   2223                  parent->child->prev = item->prev;
   \   000069   8C82         MOV     DPL,R4
   \   00006B   8D83         MOV     DPH,R5
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   12....       LCALL   ?Subroutine50 & 0xFFFF
   2224              }
   \                     ??CrossCallReturnLabel_76:
   \   000072   A3           INC     DPTR
   \   000073   A3           INC     DPTR
   \   000074   E0           MOVX    A,@DPTR
   \   000075   FA           MOV     R2,A
   \   000076   A3           INC     DPTR
   \   000077   E0           MOVX    A,@DPTR
   \   000078   F583         MOV     DPH,A
   \   00007A   8A82         MOV     DPL,R2
   \                     ??cJSON_DetachItemViaPointer_6:
   \   00007C   12....       LCALL   ??Subroutine198_0 & 0xFFFF
   2225          
   2226              /* make sure the detached item doesn't point anywhere anymore */
   2227              item->prev = NULL;
   \                     ??CrossCallReturnLabel_447:
   \   00007F   8C82         MOV     DPL,R4
   \   000081   8D83         MOV     DPH,R5
   \   000083   A3           INC     DPTR
   \   000084   A3           INC     DPTR
   \   000085   E4           CLR     A
   \   000086   F0           MOVX    @DPTR,A
   \   000087   A3           INC     DPTR
   \   000088   F0           MOVX    @DPTR,A
   2228              item->next = NULL;
   \   000089   8C82         MOV     DPL,R4
   \   00008B   8D83         MOV     DPH,R5
   \   00008D   F0           MOVX    @DPTR,A
   \   00008E   A3           INC     DPTR
   \   00008F   F0           MOVX    @DPTR,A
   2229          
   2230              return item;
   \   000090   EC           MOV     A,R4
   \   000091   FA           MOV     R2,A
   \   000092   ED           MOV     A,R5
   \   000093   FB           MOV     R3,A
   \                     ??cJSON_DetachItemViaPointer_2:
   \   000094   02....       LJMP    ??Subroutine191_0 & 0xFFFF
   2231          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FE           MOV     R6,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8E82         MOV     DPL,R6
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   12....       LCALL   ??Subroutine206_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_632:
   \   000003   8A82         MOV     DPL,R2
   \   000005   8B83         MOV     DPH,R3
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   22           RET
   2232          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2233          CJSON_PUBLIC(cJSON *) cJSON_DetachItemFromArray(cJSON *array, int which)
   \                     cJSON_DetachItemFromArray:
   2234          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   2235              if (which < 0)
   \   000009   12....       LCALL   ??Subroutine207_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_513:
   \   00000C   5006         JNC     ??cJSON_DetachItemFromArray_0
   2236              {
   2237                  return NULL;
   \   00000E   7A00         MOV     R2,#0x0
   \   000010   7B00         MOV     R3,#0x0
   \   000012   8006         SJMP    ??cJSON_DetachItemFromArray_1
   2238              }
   2239          
   2240              return cJSON_DetachItemViaPointer(array, get_array_item(array, (size_t)which));
   \                     ??cJSON_DetachItemFromArray_0:
   \   000014                ; Setup parameters for call to function cJSON_DetachItemViaPointer
   \   000014                ; Setup parameters for call to function get_array_item
   \   000014   12....       LCALL   ?Subroutine124 & 0xFFFF
   \                     ??CrossCallReturnLabel_191:
   \   000017   12....       LCALL   ??cJSON_DetachItemViaPointer?relay
   \                     ??cJSON_DetachItemFromArray_1:
   \   00001A   02....       LJMP    ??Subroutine191_0 & 0xFFFF
   2241          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine124:
   \   000000   12....       LCALL   ??get_array_item?relay
   \   000003   EA           MOV     A,R2
   \   000004   FC           MOV     R4,A
   \   000005   EB           MOV     A,R3
   \   000006   FD           MOV     R5,A
   \   000007   EE           MOV     A,R6
   \   000008   FA           MOV     R2,A
   \   000009   EF           MOV     A,R7
   \   00000A   FB           MOV     R3,A
   \   00000B   22           RET
   2242          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2243          CJSON_PUBLIC(void) cJSON_DeleteItemFromArray(cJSON *array, int which)
   \                     cJSON_DeleteItemFromArray:
   2244          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2245              cJSON_Delete(cJSON_DetachItemFromArray(array, which));
   \   000004                ; Setup parameters for call to function cJSON_Delete
   \   000004                ; Setup parameters for call to function cJSON_DetachItemFromArray
   \   000004   12....       LCALL   ??cJSON_DetachItemFromArray?relay
   \   000007                REQUIRE ?Subroutine8
   \   000007                ; // Fall through to label ?Subroutine8
   2246          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL   ??cJSON_Delete?relay
   \   000003   80..         SJMP    ??Subroutine209_0
   2247          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   EA           MOV     A,R2
   \   000001   FC           MOV     R4,A
   \   000002   EB           MOV     A,R3
   \   000003   FD           MOV     R5,A
   \   000004   EE           MOV     A,R6
   \   000005   FA           MOV     R2,A
   \   000006   EF           MOV     A,R7
   \   000007   FB           MOV     R3,A
   \   000008   12....       LCALL   ??cJSON_DetachItemViaPointer?relay
   \   00000B                REQUIRE ??Subroutine191_0
   \   00000B                ; // Fall through to label ??Subroutine191_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2248          CJSON_PUBLIC(cJSON *) cJSON_DetachItemFromObject(cJSON *object, const char *string)
   \                     cJSON_DetachItemFromObject:
   2249          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   2250              cJSON *to_detach = cJSON_GetObjectItem(object, string);
   2251          
   2252              return cJSON_DetachItemViaPointer(object, to_detach);
   \   000009                ; Setup parameters for call to function cJSON_DetachItemViaPointer
   \   000009                ; Setup parameters for call to function cJSON_GetObjectItem
   \   000009   12....       LCALL   ??cJSON_GetObjectItem?relay
   \   00000C   02....       LJMP    ?Subroutine3 & 0xFFFF
   2253          }
   2254          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2255          CJSON_PUBLIC(cJSON *) cJSON_DetachItemFromObjectCaseSensitive(cJSON *object, const char *string)
   \                     cJSON_DetachItemFromObjectCaseSensitive:
   2256          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   2257              cJSON *to_detach = cJSON_GetObjectItemCaseSensitive(object, string);
   2258          
   2259              return cJSON_DetachItemViaPointer(object, to_detach);
   \   000009                ; Setup parameters for call to function cJSON_DetachItemViaPointer
   \   000009                ; Setup parameters for call to function cJSON_GetObjectItemCaseSensitive
   \   000009   12....       LCALL   ??cJSON_GetObjectItemCaseSensitive?relay
   \   00000C   02....       LJMP    ?Subroutine3 & 0xFFFF
   2260          }
   2261          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2262          CJSON_PUBLIC(void) cJSON_DeleteItemFromObject(cJSON *object, const char *string)
   \                     cJSON_DeleteItemFromObject:
   2263          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2264              cJSON_Delete(cJSON_DetachItemFromObject(object, string));
   \   000004                ; Setup parameters for call to function cJSON_Delete
   \   000004                ; Setup parameters for call to function cJSON_DetachItemFromObject
   \   000004   12....       LCALL   ??cJSON_DetachItemFromObject?relay
   \   000007   80..         SJMP    ?Subroutine8
   2265          }
   2266          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2267          CJSON_PUBLIC(void) cJSON_DeleteItemFromObjectCaseSensitive(cJSON *object, const char *string)
   \                     cJSON_DeleteItemFromObjectCaseSensitive:
   2268          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2269              cJSON_Delete(cJSON_DetachItemFromObjectCaseSensitive(object, string));
   \   000004                ; Setup parameters for call to function cJSON_Delete
   \   000004                ; Setup parameters for call to function cJSON_DetachItemFromObjectCaseSensitive
   \   000004   12....       LCALL   ??cJSON_DetachItemFromObjectCaseSensitive?relay
   \   000007   80..         SJMP    ?Subroutine8
   2270          }
   2271          
   2272          /* Replace array/object items with new ones. */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2273          CJSON_PUBLIC(cJSON_bool) cJSON_InsertItemInArray(cJSON *array, int which, cJSON *newitem)
   \                     cJSON_InsertItemInArray:
   2274          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   740C         MOV     A,#0xc
   \   00000B   12....       LCALL   ?XSTACK_DISP0_8
   \   00000E   12....       LCALL   ?Subroutine37 & 0xFFFF
   2275              cJSON *after_inserted = NULL;
   2276          
   2277              if (which < 0)
   \                     ??CrossCallReturnLabel_52:
   \   000011   5004         JNC     ??cJSON_InsertItemInArray_0
   2278              {
   2279                  return false;
   \   000013   7A00         MOV     R2,#0x0
   \   000015   8070         SJMP    ??cJSON_InsertItemInArray_1
   2280              }
   2281          
   2282              after_inserted = get_array_item(array, (size_t)which);
   \                     ??cJSON_InsertItemInArray_0:
   \   000017                ; Setup parameters for call to function get_array_item
   \   000017   12....       LCALL   ??get_array_item?relay
   \   00001A   8A..         MOV     ?V0 + 2,R2
   \   00001C   8B..         MOV     ?V0 + 3,R3
   \   00001E   A8..         MOV     R0,?V0 + 2
   \   000020   A9..         MOV     R1,?V0 + 3
   2283              if (after_inserted == NULL)
   \   000022   E8           MOV     A,R0
   \   000023   49           ORL     A,R1
   \   000024   700D         JNZ     ??cJSON_InsertItemInArray_2
   2284              {
   2285                  return add_item_to_array(array, newitem);
   \   000026                ; Setup parameters for call to function add_item_to_array
   \   000026   AC..         MOV     R4,?V0 + 0
   \   000028   AD..         MOV     R5,?V0 + 1
   \   00002A   EE           MOV     A,R6
   \   00002B   FA           MOV     R2,A
   \   00002C   EF           MOV     A,R7
   \   00002D   FB           MOV     R3,A
   \   00002E   12....       LCALL   ??add_item_to_array?relay
   \   000031   8056         SJMP    ??cJSON_InsertItemInArray_3
   2286              }
   2287          
   2288              newitem->next = after_inserted;
   \                     ??cJSON_InsertItemInArray_2:
   \   000033   85..82       MOV     DPL,?V0 + 0
   \   000036   85..83       MOV     DPH,?V0 + 1
   \   000039   12....       LCALL   ??Subroutine200_0 & 0xFFFF
   2289              newitem->prev = after_inserted->prev;
   \                     ??CrossCallReturnLabel_439:
   \   00003C   E8           MOV     A,R0
   \   00003D   2402         ADD     A,#0x2
   \   00003F   0A           INC     R2
   \   000040   0A           INC     R2
   \   000041   E9           MOV     A,R1
   \   000042   3400         ADDC    A,#0x0
   \   000044   FB           MOV     R3,A
   \   000045   8A82         MOV     DPL,R2
   \   000047   8B83         MOV     DPH,R3
   \   000049   12....       LCALL   ??Subroutine214_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_541:
   \   00004C   85..82       MOV     DPL,?V0 + 0
   \   00004F   85..83       MOV     DPH,?V0 + 1
   \   000052   A3           INC     DPTR
   \   000053   A3           INC     DPTR
   \   000054   EC           MOV     A,R4
   \   000055   F0           MOVX    @DPTR,A
   \   000056   A3           INC     DPTR
   \   000057   ED           MOV     A,R5
   \   000058   12....       LCALL   ?Subroutine105 & 0xFFFF
   2290              after_inserted->prev = newitem;
   \                     ??CrossCallReturnLabel_168:
   \   00005B   12....       LCALL   ??Subroutine211_0 & 0xFFFF
   2291              if (after_inserted == array->child)
   \                     ??CrossCallReturnLabel_518:
   \   00005E   8E82         MOV     DPL,R6
   \   000060   8F83         MOV     DPH,R7
   \   000062   12....       LCALL   ??Subroutine194_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_416:
   \   000065   E8           MOV     A,R0
   \   000066   6A           XRL     A,R2
   \   000067   7002         JNZ     ??cJSON_InsertItemInArray_4
   \   000069   E9           MOV     A,R1
   \   00006A   6B           XRL     A,R3
   \                     ??cJSON_InsertItemInArray_4:
   \   00006B   700A         JNZ     ??cJSON_InsertItemInArray_5
   2292              {
   2293                  array->child = newitem;
   \   00006D   8E82         MOV     DPL,R6
   \   00006F   8F83         MOV     DPH,R7
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   A3           INC     DPTR
   \   000074   A3           INC     DPTR
   \   000075   800B         SJMP    ??CrossCallReturnLabel_266
   2294              }
   2295              else
   2296              {
   2297                  newitem->prev->next = newitem;
   \                     ??cJSON_InsertItemInArray_5:
   \   000077   85..82       MOV     DPL,?V0 + 0
   \   00007A   85..83       MOV     DPH,?V0 + 1
   \   00007D   A3           INC     DPTR
   \   00007E   A3           INC     DPTR
   \   00007F   12....       LCALL   ??Subroutine164_0 & 0xFFFF
   2298              }
   \                     ??CrossCallReturnLabel_266:
   \   000082   12....       LCALL   ??Subroutine211_0 & 0xFFFF
   2299              return true;
   \                     ??CrossCallReturnLabel_519:
   \   000085   7A01         MOV     R2,#0x1
   \                     ??cJSON_InsertItemInArray_1:
   \   000087   7B00         MOV     R3,#0x0
   \                     ??cJSON_InsertItemInArray_3:
   \   000089   02....       LJMP    ??Subroutine184_0 & 0xFFFF
   2300          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine214_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   12....       LCALL   ?Subroutine130 & 0xFFFF
   \                     ??CrossCallReturnLabel_534:
   \   000003   C3           CLR     C
   \   000004   ED           MOV     A,R5
   \   000005   9400         SUBB    A,#0x0
   \   000007   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000009   65D0         XRL     A,PSW
   \   00000B   33           RLC     A
   \   00000C   22           RET
   2301          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2302          CJSON_PUBLIC(cJSON_bool) cJSON_ReplaceItemViaPointer(cJSON * const parent, cJSON * const item, cJSON * replacement)
   \                     cJSON_ReplaceItemViaPointer:
   2303          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   EC           MOV     A,R4
   \   00000A   FA           MOV     R2,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FB           MOV     R3,A
   \   00000D   740B         MOV     A,#0xb
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   12....       LCALL   ?Subroutine46 & 0xFFFF
   2304              if ((parent == NULL) || (replacement == NULL) || (item == NULL))
   \                     ??CrossCallReturnLabel_68:
   \   000015   4F           ORL     A,R7
   \   000016   6008         JZ      ??cJSON_ReplaceItemViaPointer_0
   \   000018   E8           MOV     A,R0
   \   000019   49           ORL     A,R1
   \   00001A   6004         JZ      ??cJSON_ReplaceItemViaPointer_0
   \   00001C   EA           MOV     A,R2
   \   00001D   4B           ORL     A,R3
   \   00001E   7005         JNZ     ??cJSON_ReplaceItemViaPointer_1
   2305              {
   2306                  return false;
   \                     ??cJSON_ReplaceItemViaPointer_0:
   \   000020   7A00         MOV     R2,#0x0
   \   000022   02....       LJMP    ??cJSON_ReplaceItemViaPointer_2 & 0xFFFF
   2307              }
   2308          
   2309              if (replacement == item)
   \                     ??cJSON_ReplaceItemViaPointer_1:
   \   000025   EA           MOV     A,R2
   \   000026   68           XRL     A,R0
   \   000027   7002         JNZ     ??cJSON_ReplaceItemViaPointer_3
   \   000029   EB           MOV     A,R3
   \   00002A   69           XRL     A,R1
   \                     ??cJSON_ReplaceItemViaPointer_3:
   \   00002B   7003         JNZ     $+5
   \   00002D   02....       LJMP    ??cJSON_ReplaceItemViaPointer_4 & 0xFFFF
   2310              {
   2311                  return true;
   2312              }
   2313          
   2314              replacement->next = item->next;
   \   000030   8A82         MOV     DPL,R2
   \   000032   8B83         MOV     DPH,R3
   \   000034   12....       LCALL   ??Subroutine214_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_542:
   \   000037   8882         MOV     DPL,R0
   \   000039   8983         MOV     DPH,R1
   \   00003B   EC           MOV     A,R4
   \   00003C   F0           MOVX    @DPTR,A
   \   00003D   A3           INC     DPTR
   \   00003E   ED           MOV     A,R5
   \   00003F   12....       LCALL   ?Subroutine104 & 0xFFFF
   2315              replacement->prev = item->prev;
   \                     ??CrossCallReturnLabel_163:
   \   000042   12....       LCALL   ??Subroutine212_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_527:
   \   000045   12....       LCALL   ?Subroutine97 & 0xFFFF
   2316          
   2317              if (replacement->next != NULL)
   \                     ??CrossCallReturnLabel_522:
   \   000048   EC           MOV     A,R4
   \   000049   4D           ORL     A,R5
   \   00004A   600A         JZ      ??CrossCallReturnLabel_448
   2318              {
   2319                  replacement->next->prev = replacement;
   \   00004C   8882         MOV     DPL,R0
   \   00004E   8983         MOV     DPH,R1
   \   000050   12....       LCALL   ?Subroutine78 & 0xFFFF
   2320              }
   \                     ??CrossCallReturnLabel_120:
   \   000053   12....       LCALL   ??Subroutine198_0 & 0xFFFF
   2321              if (parent->child == item)
   \                     ??CrossCallReturnLabel_448:
   \   000056   8E82         MOV     DPL,R6
   \   000058   8F83         MOV     DPH,R7
   \   00005A   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_546:
   \   00005D   EA           MOV     A,R2
   \   00005E   6C           XRL     A,R4
   \   00005F   7002         JNZ     ??cJSON_ReplaceItemViaPointer_5
   \   000061   EB           MOV     A,R3
   \   000062   6D           XRL     A,R5
   \                     ??cJSON_ReplaceItemViaPointer_5:
   \   000063   7022         JNZ     ??cJSON_ReplaceItemViaPointer_6
   \   000065   8C82         MOV     DPL,R4
   \   000067   8D83         MOV     DPH,R5
   \   000069   A3           INC     DPTR
   \   00006A   A3           INC     DPTR
   \   00006B   12....       LCALL   ??Subroutine212_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_528:
   \   00006E   EC           MOV     A,R4
   \   00006F   65..         XRL     A,?V0 + 0
   \   000071   7003         JNZ     ??cJSON_ReplaceItemViaPointer_7
   \   000073   ED           MOV     A,R5
   \   000074   65..         XRL     A,?V0 + 1
   \                     ??cJSON_ReplaceItemViaPointer_7:
   \   000076   7007         JNZ     ??CrossCallReturnLabel_449
   2322              {
   2323                  if (parent->child->prev == parent->child)
   2324                  {
   2325                      replacement->prev = replacement;
   \   000078   8882         MOV     DPL,R0
   \   00007A   8983         MOV     DPH,R1
   \   00007C   12....       LCALL   ??Subroutine198_0 & 0xFFFF
   2326                  }
   2327                  parent->child = replacement;
   \                     ??CrossCallReturnLabel_449:
   \   00007F   8E82         MOV     DPL,R6
   \   000081   8F83         MOV     DPH,R7
   \   000083   A3           INC     DPTR
   \   000084   A3           INC     DPTR
   \   000085   8030         SJMP    ??CrossCallReturnLabel_121
   2328              }
   2329              else
   2330              {   /*
   2331                   * To find the last item in array quickly, we use prev in array.
   2332                   * We can't modify the last item's next pointer where this item was the parent's child
   2333                   */
   2334                  if (replacement->prev != NULL)
   \                     ??cJSON_ReplaceItemViaPointer_6:
   \   000087   8882         MOV     DPL,R0
   \   000089   8983         MOV     DPH,R1
   \   00008B   12....       LCALL   ??Subroutine213_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_545:
   \   00008E   EC           MOV     A,R4
   \   00008F   4D           ORL     A,R5
   \   000090   600F         JZ      ??CrossCallReturnLabel_440
   2335                  {
   2336                      replacement->prev->next = replacement;
   \   000092   8882         MOV     DPL,R0
   \   000094   8983         MOV     DPH,R1
   \   000096   A3           INC     DPTR
   \   000097   A3           INC     DPTR
   \   000098   A3           INC     DPTR
   \   000099   E0           MOVX    A,@DPTR
   \   00009A   F583         MOV     DPH,A
   \   00009C   8C82         MOV     DPL,R4
   \   00009E   12....       LCALL   ??Subroutine200_0 & 0xFFFF
   2337                  }
   2338                  if (replacement->next == NULL)
   \                     ??CrossCallReturnLabel_440:
   \   0000A1   8882         MOV     DPL,R0
   \   0000A3   8983         MOV     DPH,R1
   \   0000A5   12....       LCALL   ??Subroutine214_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_543:
   \   0000A8   EC           MOV     A,R4
   \   0000A9   4D           ORL     A,R5
   \   0000AA   700E         JNZ     ??CrossCallReturnLabel_450
   2339                  {
   2340                      parent->child->prev = replacement;
   \   0000AC   8E82         MOV     DPL,R6
   \   0000AE   8F83         MOV     DPH,R7
   \   0000B0   A3           INC     DPTR
   \   0000B1   A3           INC     DPTR
   \   0000B2   A3           INC     DPTR
   \   0000B3   A3           INC     DPTR
   \   0000B4   12....       LCALL   ?Subroutine78 & 0xFFFF
   2341                  }
   2342              }
   \                     ??CrossCallReturnLabel_121:
   \   0000B7   12....       LCALL   ??Subroutine198_0 & 0xFFFF
   2343          
   2344              item->next = NULL;
   \                     ??CrossCallReturnLabel_450:
   \   0000BA   8A82         MOV     DPL,R2
   \   0000BC   8B83         MOV     DPH,R3
   \   0000BE   E4           CLR     A
   \   0000BF   F0           MOVX    @DPTR,A
   \   0000C0   A3           INC     DPTR
   \   0000C1   12....       LCALL   ?Subroutine104 & 0xFFFF
   2345              item->prev = NULL;
   \                     ??CrossCallReturnLabel_164:
   \   0000C4   F0           MOVX    @DPTR,A
   \   0000C5   A3           INC     DPTR
   \   0000C6   F0           MOVX    @DPTR,A
   2346              cJSON_Delete(item);
   \   0000C7                ; Setup parameters for call to function cJSON_Delete
   \   0000C7   12....       LCALL   ??cJSON_Delete?relay
   2347          
   2348              return true;
   \                     ??cJSON_ReplaceItemViaPointer_4:
   \   0000CA   7A01         MOV     R2,#0x1
   \                     ??cJSON_ReplaceItemViaPointer_2:
   \   0000CC   7B00         MOV     R3,#0x0
   \   0000CE   7F03         MOV     R7,#0x3
   \   0000D0   02....       LJMP    ?BANKED_LEAVE_XDATA
   2349          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8C82         MOV     DPL,R4
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine213_0
   \   000002                ; // Fall through to label ??Subroutine213_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine213_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine214_0
   \   000002                ; // Fall through to label ??Subroutine214_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine104:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   22           RET
   2350          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2351          CJSON_PUBLIC(cJSON_bool) cJSON_ReplaceItemInArray(cJSON *array, int which, cJSON *newitem)
   \                     cJSON_ReplaceItemInArray:
   2352          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   740A         MOV     A,#0xa
   \   00000B   12....       LCALL   ?XSTACK_DISP0_8
   \   00000E   12....       LCALL   ?Subroutine37 & 0xFFFF
   2353              if (which < 0)
   \                     ??CrossCallReturnLabel_53:
   \   000011   5006         JNC     ??cJSON_ReplaceItemInArray_0
   2354              {
   2355                  return false;
   \   000013   7A00         MOV     R2,#0x0
   \   000015   7B00         MOV     R3,#0x0
   \   000017   8010         SJMP    ??cJSON_ReplaceItemInArray_1
   2356              }
   2357          
   2358              return cJSON_ReplaceItemViaPointer(array, get_array_item(array, (size_t)which), newitem);
   \                     ??cJSON_ReplaceItemInArray_0:
   \   000019                ; Setup parameters for call to function cJSON_ReplaceItemViaPointer
   \   000019   78..         MOV     R0,#?V0 + 0
   \   00001B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001E                ; Setup parameters for call to function get_array_item
   \   00001E   12....       LCALL   ?Subroutine124 & 0xFFFF
   \                     ??CrossCallReturnLabel_192:
   \   000021   12....       LCALL   ??cJSON_ReplaceItemViaPointer?relay
   \   000024   7402         MOV     A,#0x2
   \   000026   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??cJSON_ReplaceItemInArray_1:
   \   000029   02....       LJMP    ??Subroutine162_0 & 0xFFFF
   2359          }
   2360          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2361          static cJSON_bool replace_item_in_object(cJSON *object, const char *string, cJSON *replacement, cJSON_bool case_sensitive)
   \                     replace_item_in_object:
   2362          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
   \   00000D   7410         MOV     A,#0x10
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   000015   7412         MOV     A,#0x12
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   12....       LCALL   ?Subroutine64 & 0xFFFF
   2363              if ((replacement == NULL) || (string == NULL))
   \                     ??CrossCallReturnLabel_98:
   \   00001D   E5..         MOV     A,?V0 + 4
   \   00001F   45..         ORL     A,?V0 + 5
   \   000021   6004         JZ      ??replace_item_in_object_0
   \   000023   EE           MOV     A,R6
   \   000024   4F           ORL     A,R7
   \   000025   7007         JNZ     ??replace_item_in_object_1
   2364              {
   2365                  return false;
   \                     ??replace_item_in_object_0:
   \   000027   7A00         MOV     R2,#0x0
   \   000029   7B00         MOV     R3,#0x0
   \   00002B   02....       LJMP    ??replace_item_in_object_2 & 0xFFFF
   2366              }
   2367          
   2368              /* replace the name in the replacement */
   2369              if (!(replacement->type & cJSON_StringIsConst) && (replacement->string != NULL))
   \                     ??replace_item_in_object_1:
   \   00002E   85..82       MOV     DPL,?V0 + 4
   \   000031   85..83       MOV     DPH,?V0 + 5
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   A3           INC     DPTR
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   A3           INC     DPTR
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   5402         ANL     A,#0x2
   \   00003E   701C         JNZ     ??CrossCallReturnLabel_105
   \   000040   E5..         MOV     A,?V0 + 4
   \   000042   12....       LCALL   ??Subroutine231_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_640:
   \   000045   E5..         MOV     A,?V0 + 5
   \   000047   12....       LCALL   ??Subroutine180_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_354:
   \   00004A   12....       LCALL   ??Subroutine205_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_480:
   \   00004D   600D         JZ      ??CrossCallReturnLabel_105
   2370              {
   2371                  cJSON_free(replacement->string);
   \   00004F                ; Setup parameters for call to function cJSON_free
   \   00004F   E5..         MOV     A,?V0 + 4
   \   000051   12....       LCALL   ??Subroutine231_0 & 0xFFFF
   2372              }
   \                     ??CrossCallReturnLabel_641:
   \   000054   E5..         MOV     A,?V0 + 5
   \   000056   12....       LCALL   ??Subroutine180_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_355:
   \   000059   12....       LCALL   ?Subroutine67 & 0xFFFF
   2373              replacement->string = (char*)cJSON_strdup((const unsigned char*)string, &global_hooks);
   \                     ??CrossCallReturnLabel_105:
   \   00005C   E5..         MOV     A,?V0 + 4
   \   00005E   2410         ADD     A,#0x10
   \   000060   F8           MOV     R0,A
   \   000061   E5..         MOV     A,?V0 + 5
   \   000063   12....       LCALL   ?Subroutine141 & 0xFFFF
   \                     ??CrossCallReturnLabel_216:
   \   000066   EE           MOV     A,R6
   \   000067   FA           MOV     R2,A
   \   000068   EF           MOV     A,R7
   \   000069   FB           MOV     R3,A
   \   00006A   12....       LCALL   ?Subroutine147 & 0xFFFF
   \                     ??CrossCallReturnLabel_226:
   \   00006D   12....       LCALL   ??Subroutine186_0 & 0xFFFF
   2374              if (replacement->string == NULL)
   \                     ??CrossCallReturnLabel_377:
   \   000070   85..82       MOV     DPL,?V0 + 2
   \   000073   85..83       MOV     DPH,?V0 + 3
   \   000076   12....       LCALL   ??Subroutine205_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_481:
   \   000079   60AC         JZ      ??replace_item_in_object_0
   2375              {
   2376                  return false;
   2377              }
   2378          
   2379              replacement->type &= ~cJSON_StringIsConst;
   \   00007B   85..82       MOV     DPL,?V0 + 4
   \   00007E   85..83       MOV     DPH,?V0 + 5
   \   000081   A3           INC     DPTR
   \   000082   A3           INC     DPTR
   \   000083   A3           INC     DPTR
   \   000084   A3           INC     DPTR
   \   000085   A3           INC     DPTR
   \   000086   A3           INC     DPTR
   \   000087   A3           INC     DPTR
   \   000088   E0           MOVX    A,@DPTR
   \   000089   54FD         ANL     A,#0xfd
   \   00008B   F0           MOVX    @DPTR,A
   2380          
   2381              return cJSON_ReplaceItemViaPointer(object, get_object_item(object, string, case_sensitive), replacement);
   \   00008C                ; Setup parameters for call to function cJSON_ReplaceItemViaPointer
   \   00008C   78..         MOV     R0,#?V0 + 4
   \   00008E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000091                ; Setup parameters for call to function get_object_item
   \   000091   78..         MOV     R0,#?V0 + 6
   \   000093   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000096   EE           MOV     A,R6
   \   000097   FC           MOV     R4,A
   \   000098   EF           MOV     A,R7
   \   000099   FD           MOV     R5,A
   \   00009A   AA..         MOV     R2,?V0 + 0
   \   00009C   AB..         MOV     R3,?V0 + 1
   \   00009E   12....       LCALL   ??get_object_item?relay
   \   0000A1   7402         MOV     A,#0x2
   \   0000A3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A6   EA           MOV     A,R2
   \   0000A7   FC           MOV     R4,A
   \   0000A8   EB           MOV     A,R3
   \   0000A9   FD           MOV     R5,A
   \   0000AA   AA..         MOV     R2,?V0 + 0
   \   0000AC   AB..         MOV     R3,?V0 + 1
   \   0000AE   12....       LCALL   ??cJSON_ReplaceItemViaPointer?relay
   \   0000B1   7402         MOV     A,#0x2
   \   0000B3   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??replace_item_in_object_2:
   \   0000B6   02....       LJMP    ??Subroutine190_0 & 0xFFFF
   2382          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine147:
   \   000000   12....       LCALL   ??cJSON_strdup?relay
   \   000003   85..82       MOV     DPL,?V0 + 2
   \   000006   85..83       MOV     DPH,?V0 + 3
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine141:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F9           MOV     R1,A
   \   000003   88..         MOV     ?V0 + 2,R0
   \   000005   89..         MOV     ?V0 + 3,R1
   \   000007                ; Setup parameters for call to function cJSON_strdup
   \   000007                ; Setup parameters for call to function cJSON_strdup
   \   000007                ; Setup parameters for call to function cJSON_strdup
   \   000007   7C..         MOV     R4,#global_hooks & 0xff
   \   000009   7D..         MOV     R5,#(global_hooks >> 8) & 0xff
   \   00000B   22           RET
   2383          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2384          CJSON_PUBLIC(cJSON_bool) cJSON_ReplaceItemInObject(cJSON *object, const char *string, cJSON *newitem)
   \                     cJSON_ReplaceItemInObject:
   2385          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   740C         MOV     A,#0xc
   \   000007   12....       LCALL   ?XSTACK_DISP0_8
   \   00000A   12....       LCALL   ?Subroutine49 & 0xFFFF
   2386              return replace_item_in_object(object, string, newitem, false);
   \                     ??CrossCallReturnLabel_74:
   \   00000D                REQUIRE ?Subroutine13
   \   00000D                ; // Fall through to label ?Subroutine13

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   78..         MOV     R0,#?V0 + 2
   \   000002   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000005   78..         MOV     R0,#?V0 + 0
   \   000007   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00000A   12....       LCALL   ??replace_item_in_object?relay
   \   00000D   7404         MOV     A,#0x4
   \   00000F   02....       LJMP    ??Subroutine183_0 & 0xFFFF
   2387          }
   2388          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2389          CJSON_PUBLIC(cJSON_bool) cJSON_ReplaceItemInObjectCaseSensitive(cJSON *object, const char *string, cJSON *newitem)
   \                     cJSON_ReplaceItemInObjectCaseSensitive:
   2390          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   740C         MOV     A,#0xc
   \   000007   12....       LCALL   ?XSTACK_DISP0_8
   \   00000A   12....       LCALL   ?Subroutine45 & 0xFFFF
   2391              return replace_item_in_object(object, string, newitem, true);
   \                     ??CrossCallReturnLabel_66:
   \   00000D   80..         SJMP    ?Subroutine13
   2392          }
   2393          
   2394          /* Create basic types: */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2395          CJSON_PUBLIC(cJSON *) cJSON_CreateNull(void)
   \                     cJSON_CreateNull:
   2396          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2397              cJSON *item = cJSON_New_Item(&global_hooks);
   \   000005                ; Setup parameters for call to function cJSON_New_Item
   \   000005   12....       LCALL   ??Subroutine219_0 & 0xFFFF
   2398              if(item)
   \                     ??CrossCallReturnLabel_577:
   \   000008   600F         JZ      ??CrossCallReturnLabel_562
   2399              {
   2400                  item->type = cJSON_NULL;
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   7404         MOV     A,#0x4
   \   000016   12....       LCALL   ??Subroutine217_0 & 0xFFFF
   2401              }
   2402          
   2403              return item;
   \                     ??CrossCallReturnLabel_562:
   \   000019   02....       LJMP    ??Subroutine162_0 & 0xFFFF
   2404          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine219_0:
   \   000000   7A..         MOV     R2,#global_hooks & 0xff
   \   000002   7B..         MOV     R3,#(global_hooks >> 8) & 0xff
   \   000004   12....       LCALL   ??cJSON_New_Item?relay
   \   000007   EA           MOV     A,R2
   \   000008   4B           ORL     A,R3
   \   000009   22           RET
   2405          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2406          CJSON_PUBLIC(cJSON *) cJSON_CreateTrue(void)
   \                     cJSON_CreateTrue:
   2407          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2408              cJSON *item = cJSON_New_Item(&global_hooks);
   \   000005                ; Setup parameters for call to function cJSON_New_Item
   \   000005   12....       LCALL   ??Subroutine219_0 & 0xFFFF
   2409              if(item)
   \                     ??CrossCallReturnLabel_578:
   \   000008   600F         JZ      ??CrossCallReturnLabel_563
   2410              {
   2411                  item->type = cJSON_True;
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   7402         MOV     A,#0x2
   \   000016   12....       LCALL   ??Subroutine217_0 & 0xFFFF
   2412              }
   2413          
   2414              return item;
   \                     ??CrossCallReturnLabel_563:
   \   000019   02....       LJMP    ??Subroutine162_0 & 0xFFFF
   2415          }
   2416          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2417          CJSON_PUBLIC(cJSON *) cJSON_CreateFalse(void)
   \                     cJSON_CreateFalse:
   2418          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2419              cJSON *item = cJSON_New_Item(&global_hooks);
   \   000005                ; Setup parameters for call to function cJSON_New_Item
   \   000005   12....       LCALL   ??Subroutine219_0 & 0xFFFF
   2420              if(item)
   \                     ??CrossCallReturnLabel_579:
   \   000008   600F         JZ      ??CrossCallReturnLabel_564
   2421              {
   2422                  item->type = cJSON_False;
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   7401         MOV     A,#0x1
   \   000016   12....       LCALL   ??Subroutine217_0 & 0xFFFF
   2423              }
   2424          
   2425              return item;
   \                     ??CrossCallReturnLabel_564:
   \   000019   02....       LJMP    ??Subroutine162_0 & 0xFFFF
   2426          }
   2427          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2428          CJSON_PUBLIC(cJSON *) cJSON_CreateBool(cJSON_bool boolean)
   \                     cJSON_CreateBool:
   2429          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine119 & 0xFFFF
   2430              cJSON *item = cJSON_New_Item(&global_hooks);
   2431              if(item)
   \                     ??CrossCallReturnLabel_573:
   \   000008   6018         JZ      ??CrossCallReturnLabel_565
   2432              {
   2433                  item->type = boolean ? cJSON_True : cJSON_False;
   \   00000A   EE           MOV     A,R6
   \   00000B   4F           ORL     A,R7
   \   00000C   6004         JZ      ??cJSON_CreateBool_0
   \   00000E   7802         MOV     R0,#0x2
   \   000010   8002         SJMP    ??cJSON_CreateBool_1
   \                     ??cJSON_CreateBool_0:
   \   000012   7801         MOV     R0,#0x1
   \                     ??cJSON_CreateBool_1:
   \   000014   8A82         MOV     DPL,R2
   \   000016   8B83         MOV     DPH,R3
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   E8           MOV     A,R0
   \   00001F   12....       LCALL   ??Subroutine217_0 & 0xFFFF
   2434              }
   2435          
   2436              return item;
   \                     ??CrossCallReturnLabel_565:
   \   000022   02....       LJMP    ??Subroutine162_0 & 0xFFFF
   2437          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine119:
   \   000000   EA           MOV     A,R2
   \   000001   FE           MOV     R6,A
   \   000002   EB           MOV     A,R3
   \   000003   FF           MOV     R7,A
   \   000004                ; Setup parameters for call to function cJSON_New_Item
   \   000004                ; Setup parameters for call to function cJSON_New_Item
   \   000004                ; Setup parameters for call to function cJSON_New_Item
   \   000004                ; Setup parameters for call to function cJSON_New_Item
   \   000004                REQUIRE ??Subroutine219_0
   \   000004                ; // Fall through to label ??Subroutine219_0
   2438          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2439          CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)
   \                     cJSON_CreateNumber:
   2440          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   8C..         MOV     ?V0 + 2,R4
   \   00000B   8D..         MOV     ?V0 + 3,R5
   2441              cJSON *item = cJSON_New_Item(&global_hooks);
   \   00000D                ; Setup parameters for call to function cJSON_New_Item
   \   00000D   12....       LCALL   ??Subroutine219_0 & 0xFFFF
   2442              if(item)
   \                     ??CrossCallReturnLabel_580:
   \   000010   607E         JZ      ??cJSON_CreateNumber_0
   2443              {
   2444                  item->type = cJSON_Number;
   \   000012   8A82         MOV     DPL,R2
   \   000014   8B83         MOV     DPH,R3
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   7408         MOV     A,#0x8
   \   00001E   12....       LCALL   ??Subroutine217_0 & 0xFFFF
   2445                  item->valuedouble = num;
   \                     ??CrossCallReturnLabel_566:
   \   000021   12....       LCALL   ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_146:
   \   000024   78..         MOV     R0,#?V0 + 0
   \   000026   12....       LCALL   ?L_MOV_TO_X
   2446          
   2447                  /* use saturation in case of overflow */
   2448                  if (num >= INT_MAX)
   \   000029   90....       MOV     DPTR,#__Constant_46fffe00
   \   00002C   78..         MOV     R0,#?V0 + 4
   \   00002E   12....       LCALL   ?L_MOV_X
   \   000031   78..         MOV     R0,#?V0 + 0
   \   000033   79..         MOV     R1,#?V0 + 4
   \   000035   12....       LCALL   ?FLT_GE
   \   000038   5016         JNC     ??cJSON_CreateNumber_1
   2449                  {
   2450                      item->valueint = INT_MAX;
   \   00003A   8A82         MOV     DPL,R2
   \   00003C   8B83         MOV     DPH,R3
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   74FF         MOV     A,#-0x1
   \   00004A   F0           MOVX    @DPTR,A
   \   00004B   A3           INC     DPTR
   \   00004C   747F         MOV     A,#0x7f
   \   00004E   803F         SJMP    ??cJSON_CreateNumber_2
   2451                  }
   2452                  else if (num <= (double)INT_MIN)
   \                     ??cJSON_CreateNumber_1:
   \   000050   90....       MOV     DPTR,#__Constant_c6fffffe
   \   000053   78..         MOV     R0,#?V0 + 4
   \   000055   12....       LCALL   ?L_MOV_X
   \   000058   78..         MOV     R0,#?V0 + 0
   \   00005A   79..         MOV     R1,#?V0 + 4
   \   00005C   12....       LCALL   ?FLT_LT
   \   00005F   5015         JNC     ??cJSON_CreateNumber_3
   2453                  {
   2454                      item->valueint = INT_MIN;
   \   000061   8A82         MOV     DPL,R2
   \   000063   8B83         MOV     DPH,R3
   \   000065   A3           INC     DPTR
   \   000066   A3           INC     DPTR
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   A3           INC     DPTR
   \   00006A   A3           INC     DPTR
   \   00006B   A3           INC     DPTR
   \   00006C   A3           INC     DPTR
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   E4           CLR     A
   \   000070   F0           MOVX    @DPTR,A
   \   000071   A3           INC     DPTR
   \   000072   7480         MOV     A,#-0x80
   \   000074   8019         SJMP    ??cJSON_CreateNumber_2
   2455                  }
   2456                  else
   2457                  {
   2458                      item->valueint = (int)num;
   \                     ??cJSON_CreateNumber_3:
   \   000076   78..         MOV     R0,#?V0 + 0
   \   000078   12....       LCALL   ?FLT_TO_L
   \   00007B   8A82         MOV     DPL,R2
   \   00007D   8B83         MOV     DPH,R3
   \   00007F   A3           INC     DPTR
   \   000080   A3           INC     DPTR
   \   000081   A3           INC     DPTR
   \   000082   A3           INC     DPTR
   \   000083   A3           INC     DPTR
   \   000084   A3           INC     DPTR
   \   000085   A3           INC     DPTR
   \   000086   A3           INC     DPTR
   \   000087   A3           INC     DPTR
   \   000088   A3           INC     DPTR
   \   000089   E5..         MOV     A,?V0 + 0
   \   00008B   F0           MOVX    @DPTR,A
   \   00008C   A3           INC     DPTR
   \   00008D   E5..         MOV     A,?V0 + 1
   \                     ??cJSON_CreateNumber_2:
   \   00008F   F0           MOVX    @DPTR,A
   2459                  }
   2460              }
   2461          
   2462              return item;
   \                     ??cJSON_CreateNumber_0:
   \   000090   02....       LJMP    ??Subroutine190_0 & 0xFFFF
   2463          }
   2464          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine110:
   \   000000   EE           MOV     A,R6
   \   000001   FA           MOV     R2,A
   \   000002   EF           MOV     A,R7
   \   000003   FB           MOV     R3,A
   \   000004                REQUIRE ??Subroutine196_0
   \   000004                ; // Fall through to label ??Subroutine196_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2465          CJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string)
   \                     cJSON_CreateString:
   2466          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine118 & 0xFFFF
   2467              cJSON *item = cJSON_New_Item(&global_hooks);
   2468              if(item)
   \                     ??CrossCallReturnLabel_570:
   \   000008   6019         JZ      ??cJSON_CreateString_0
   2469              {
   2470                  item->type = cJSON_String;
   \   00000A   8E82         MOV     DPL,R6
   \   00000C   8F83         MOV     DPH,R7
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   7410         MOV     A,#0x10
   \   000016   12....       LCALL   ?Subroutine87 & 0xFFFF
   2471                  item->valuestring = (char*)cJSON_strdup((const unsigned char*)string, &global_hooks);
   2472                  if(!item->valuestring)
   \                     ??CrossCallReturnLabel_148:
   \   000019   12....       LCALL   ??Subroutine205_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_482:
   \   00001C   7005         JNZ     ??cJSON_CreateString_0
   2473                  {
   2474                      cJSON_Delete(item);
   \   00001E                ; Setup parameters for call to function cJSON_Delete
   \   00001E   12....       LCALL   ?Subroutine110 & 0xFFFF
   2475                      return NULL;
   2476                  }
   2477              }
   \                     ??CrossCallReturnLabel_419:
   \   000021   8004         SJMP    ??cJSON_CreateString_1
   2478          
   2479              return item;
   \                     ??cJSON_CreateString_0:
   \   000023   EE           MOV     A,R6
   \   000024   FA           MOV     R2,A
   \   000025   EF           MOV     A,R7
   \   000026   FB           MOV     R3,A
   \                     ??cJSON_CreateString_1:
   \   000027   02....       LJMP    ??Subroutine184_0 & 0xFFFF
   2480          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine118:
   \   000000   8A..         MOV     ?V0 + 0,R2
   \   000002   8B..         MOV     ?V0 + 1,R3
   \   000004                ; Setup parameters for call to function cJSON_New_Item
   \   000004                ; Setup parameters for call to function cJSON_New_Item
   \   000004   7A..         MOV     R2,#global_hooks & 0xff
   \   000006   7B..         MOV     R3,#(global_hooks >> 8) & 0xff
   \   000008                REQUIRE ??Subroutine218_0
   \   000008                ; // Fall through to label ??Subroutine218_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine87:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E4           CLR     A
   \   000003   F0           MOVX    @DPTR,A
   \   000004   EE           MOV     A,R6
   \   000005   2408         ADD     A,#0x8
   \   000007   F8           MOV     R0,A
   \   000008   EF           MOV     A,R7
   \   000009   12....       LCALL   ?Subroutine141 & 0xFFFF
   \                     ??CrossCallReturnLabel_217:
   \   00000C   AA..         MOV     R2,?V0 + 0
   \   00000E   AB..         MOV     R3,?V0 + 1
   \   000010   12....       LCALL   ?Subroutine147 & 0xFFFF
   \                     ??CrossCallReturnLabel_227:
   \   000013   EA           MOV     A,R2
   \   000014   F0           MOVX    @DPTR,A
   \   000015   A3           INC     DPTR
   \   000016   EB           MOV     A,R3
   \   000017   F0           MOVX    @DPTR,A
   \   000018   85..82       MOV     DPL,?V0 + 2
   \   00001B   85..83       MOV     DPH,?V0 + 3
   \   00001E   22           RET
   2481          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2482          CJSON_PUBLIC(cJSON *) cJSON_CreateStringReference(const char *string)
   \                     cJSON_CreateStringReference:
   2483          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine119 & 0xFFFF
   2484              cJSON *item = cJSON_New_Item(&global_hooks);
   2485              if (item != NULL)
   \                     ??CrossCallReturnLabel_574:
   \   000008   601E         JZ      ??cJSON_CreateStringReference_0
   2486              {
   2487                  item->type = cJSON_String | cJSON_IsReference;
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   7410         MOV     A,#0x10
   \   000016   F0           MOVX    @DPTR,A
   \   000017   A3           INC     DPTR
   \   000018   7401         MOV     A,#0x1
   \   00001A   12....       LCALL   ?Subroutine104 & 0xFFFF
   2488                  item->valuestring = (char*)cast_away_const(string);
   2489              }
   \                     ??CrossCallReturnLabel_165:
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   EE           MOV     A,R6
   \   000024   F0           MOVX    @DPTR,A
   \   000025   A3           INC     DPTR
   \   000026   EF           MOV     A,R7
   \   000027   F0           MOVX    @DPTR,A
   2490          
   2491              return item;
   \                     ??cJSON_CreateStringReference_0:
   \   000028   02....       LJMP    ??Subroutine162_0 & 0xFFFF
   2492          }
   2493          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2494          CJSON_PUBLIC(cJSON *) cJSON_CreateObjectReference(const cJSON *child)
   \                     cJSON_CreateObjectReference:
   2495          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine119 & 0xFFFF
   2496              cJSON *item = cJSON_New_Item(&global_hooks);
   2497              if (item != NULL) {
   \                     ??CrossCallReturnLabel_575:
   \   000008   600F         JZ      ??CrossCallReturnLabel_157
   2498                  item->type = cJSON_Object | cJSON_IsReference;
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   7440         MOV     A,#0x40
   \   000016   12....       LCALL   ?Subroutine96 & 0xFFFF
   2499                  item->child = (cJSON*)cast_away_const(child);
   2500              }
   2501          
   2502              return item;
   \                     ??CrossCallReturnLabel_157:
   \   000019   02....       LJMP    ??Subroutine162_0 & 0xFFFF
   2503          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine96:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   7401         MOV     A,#0x1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   EE           MOV     A,R6
   \   00000E   F0           MOVX    @DPTR,A
   \   00000F   A3           INC     DPTR
   \   000010   EF           MOV     A,R7
   \   000011   F0           MOVX    @DPTR,A
   \   000012   22           RET
   2504          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2505          CJSON_PUBLIC(cJSON *) cJSON_CreateArrayReference(const cJSON *child) {
   \                     cJSON_CreateArrayReference:
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine119 & 0xFFFF
   2506              cJSON *item = cJSON_New_Item(&global_hooks);
   2507              if (item != NULL) {
   \                     ??CrossCallReturnLabel_576:
   \   000008   600F         JZ      ??CrossCallReturnLabel_158
   2508                  item->type = cJSON_Array | cJSON_IsReference;
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   7420         MOV     A,#0x20
   \   000016   12....       LCALL   ?Subroutine96 & 0xFFFF
   2509                  item->child = (cJSON*)cast_away_const(child);
   2510              }
   2511          
   2512              return item;
   \                     ??CrossCallReturnLabel_158:
   \   000019   02....       LJMP    ??Subroutine162_0 & 0xFFFF
   2513          }
   2514          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2515          CJSON_PUBLIC(cJSON *) cJSON_CreateRaw(const char *raw)
   \                     cJSON_CreateRaw:
   2516          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine118 & 0xFFFF
   2517              cJSON *item = cJSON_New_Item(&global_hooks);
   2518              if(item)
   \                     ??CrossCallReturnLabel_571:
   \   000008   6019         JZ      ??cJSON_CreateRaw_0
   2519              {
   2520                  item->type = cJSON_Raw;
   \   00000A   8E82         MOV     DPL,R6
   \   00000C   8F83         MOV     DPH,R7
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   7480         MOV     A,#-0x80
   \   000016   12....       LCALL   ?Subroutine87 & 0xFFFF
   2521                  item->valuestring = (char*)cJSON_strdup((const unsigned char*)raw, &global_hooks);
   2522                  if(!item->valuestring)
   \                     ??CrossCallReturnLabel_149:
   \   000019   12....       LCALL   ??Subroutine205_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_483:
   \   00001C   7005         JNZ     ??cJSON_CreateRaw_0
   2523                  {
   2524                      cJSON_Delete(item);
   \   00001E                ; Setup parameters for call to function cJSON_Delete
   \   00001E   12....       LCALL   ?Subroutine110 & 0xFFFF
   2525                      return NULL;
   2526                  }
   2527              }
   \                     ??CrossCallReturnLabel_420:
   \   000021   8004         SJMP    ??cJSON_CreateRaw_1
   2528          
   2529              return item;
   \                     ??cJSON_CreateRaw_0:
   \   000023   EE           MOV     A,R6
   \   000024   FA           MOV     R2,A
   \   000025   EF           MOV     A,R7
   \   000026   FB           MOV     R3,A
   \                     ??cJSON_CreateRaw_1:
   \   000027   02....       LJMP    ??Subroutine184_0 & 0xFFFF
   2530          }
   2531          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2532          CJSON_PUBLIC(cJSON *) cJSON_CreateArray(void)
   \                     cJSON_CreateArray:
   2533          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2534              cJSON *item = cJSON_New_Item(&global_hooks);
   \   000005                ; Setup parameters for call to function cJSON_New_Item
   \   000005   12....       LCALL   ??Subroutine219_0 & 0xFFFF
   2535              if(item)
   \                     ??CrossCallReturnLabel_581:
   \   000008   6007         JZ      ??CrossCallReturnLabel_569
   2536              {
   2537                  item->type=cJSON_Array;
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   12....       LCALL   ?Subroutine101 & 0xFFFF
   2538              }
   2539          
   2540              return item;
   \                     ??CrossCallReturnLabel_569:
   \   000011   02....       LJMP    ??Subroutine162_0 & 0xFFFF
   2541          }
   2542          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2543          CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
   \                     cJSON_CreateObject:
   2544          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2545              cJSON *item = cJSON_New_Item(&global_hooks);
   \   000005                ; Setup parameters for call to function cJSON_New_Item
   \   000005   12....       LCALL   ??Subroutine219_0 & 0xFFFF
   2546              if (item)
   \                     ??CrossCallReturnLabel_582:
   \   000008   600F         JZ      ??CrossCallReturnLabel_567
   2547              {
   2548                  item->type = cJSON_Object;
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   7440         MOV     A,#0x40
   \   000016   12....       LCALL   ??Subroutine217_0 & 0xFFFF
   2549              }
   2550          
   2551              return item;
   \                     ??CrossCallReturnLabel_567:
   \   000019   02....       LJMP    ??Subroutine162_0 & 0xFFFF
   2552          }
   2553          
   2554          /* Create Arrays: */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine107:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006                REQUIRE ??Subroutine185_0
   \   000006                ; // Fall through to label ??Subroutine185_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2555          CJSON_PUBLIC(cJSON *) cJSON_CreateIntArray(const int *numbers, int count)
   \                     cJSON_CreateIntArray:
   2556          {
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 12,R2
   \   000007   8B..         MOV     ?V0 + 13,R3
   \   000009   8C..         MOV     ?V0 + 6,R4
   \   00000B   8D..         MOV     ?V0 + 7,R5
   2557              size_t i = 0;
   2558              cJSON *n = NULL;
   \   00000D   75..00       MOV     ?V0 + 2,#0x0
   \   000010   75..00       MOV     ?V0 + 3,#0x0
   2559              cJSON *p = NULL;
   \   000013   75..00       MOV     ?V0 + 4,#0x0
   \   000016   75..00       MOV     ?V0 + 5,#0x0
   2560              cJSON *a = NULL;
   2561          
   2562              if ((count < 0) || (numbers == NULL))
   \   000019   12....       LCALL   ??Subroutine207_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_514:
   \   00001C   4005         JC      ??cJSON_CreateIntArray_0
   \   00001E   EA           MOV     A,R2
   \   00001F   45..         ORL     A,?V0 + 13
   \   000021   7006         JNZ     ??cJSON_CreateIntArray_1
   2563              {
   2564                  return NULL;
   \                     ??cJSON_CreateIntArray_0:
   \   000023   7A00         MOV     R2,#0x0
   \   000025   7B00         MOV     R3,#0x0
   \   000027   806B         SJMP    ??cJSON_CreateIntArray_2
   2565              }
   2566          
   2567              a = cJSON_CreateArray();
   \                     ??cJSON_CreateIntArray_1:
   \   000029                ; Setup parameters for call to function cJSON_CreateArray
   \   000029   12....       LCALL   ?Subroutine127 & 0xFFFF
   2568          
   2569              for(i = 0; a && (i < (size_t)count); i++)
   \                     ??CrossCallReturnLabel_197:
   \   00002C   6062         JZ      ??CrossCallReturnLabel_30
   \   00002E   800E         SJMP    ??CrossCallReturnLabel_583
   2570              {
   2571                  n = cJSON_CreateNumber(numbers[i]);
   2572                  if (!n)
   2573                  {
   2574                      cJSON_Delete(a);
   2575                      return NULL;
   2576                  }
   2577                  if(!i)
   2578                  {
   2579                      a->child = n;
   2580                  }
   2581                  else
   2582                  {
   2583                      suffix_object(p, n);
   \                     ??cJSON_CreateIntArray_3:
   \   000030                ; Setup parameters for call to function suffix_object
   \   000030   AC..         MOV     R4,?V0 + 2
   \   000032   AD..         MOV     R5,?V0 + 3
   \   000034   AA..         MOV     R2,?V0 + 4
   \   000036   AB..         MOV     R3,?V0 + 5
   \   000038   12....       LCALL   ??suffix_object?relay
   2584                  }
   2585                  p = n;
   \                     ??cJSON_CreateIntArray_4:
   \   00003B   12....       LCALL   ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_583:
   \   00003E   12....       LCALL   ?Subroutine120 & 0xFFFF
   \                     ??CrossCallReturnLabel_185:
   \   000041   5041         JNC     ??cJSON_CreateIntArray_5
   \   000043                ; Setup parameters for call to function cJSON_CreateNumber
   \   000043   E5..         MOV     A,?V0 + 0
   \   000045   C3           CLR     C
   \   000046   33           RLC     A
   \   000047   F8           MOV     R0,A
   \   000048   E5..         MOV     A,?V0 + 1
   \   00004A   33           RLC     A
   \   00004B   F9           MOV     R1,A
   \   00004C   E5..         MOV     A,?V0 + 12
   \   00004E   28           ADD     A,R0
   \   00004F   F582         MOV     DPL,A
   \   000051   E5..         MOV     A,?V0 + 13
   \   000053   39           ADDC    A,R1
   \   000054   F583         MOV     DPH,A
   \   000056   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   000059   12....       LCALL   ?L_TO_FLT
   \   00005C   AA..         MOV     R2,?V0 + 8
   \   00005E   AB..         MOV     R3,?V0 + 9
   \   000060   AC..         MOV     R4,?V0 + 10
   \   000062   AD..         MOV     R5,?V0 + 11
   \   000064   12....       LCALL   ??cJSON_CreateNumber?relay
   \   000067   8A..         MOV     ?V0 + 2,R2
   \   000069   8B..         MOV     ?V0 + 3,R3
   \   00006B   EA           MOV     A,R2
   \   00006C   45..         ORL     A,?V0 + 3
   \   00006E   7009         JNZ     ??cJSON_CreateIntArray_6
   \   000070                ; Setup parameters for call to function cJSON_Delete
   \   000070   EE           MOV     A,R6
   \   000071   FA           MOV     R2,A
   \   000072   EF           MOV     A,R7
   \   000073   FB           MOV     R3,A
   \   000074   12....       LCALL   ??cJSON_Delete?relay
   \   000077   80AA         SJMP    ??cJSON_CreateIntArray_0
   \                     ??cJSON_CreateIntArray_6:
   \   000079   E5..         MOV     A,?V0 + 0
   \   00007B   45..         ORL     A,?V0 + 1
   \   00007D   70B1         JNZ     ??cJSON_CreateIntArray_3
   \   00007F   12....       LCALL   ?Subroutine107 & 0xFFFF
   2586              }
   \                     ??CrossCallReturnLabel_381:
   \   000082   80B7         SJMP    ??cJSON_CreateIntArray_4
   \                     ??cJSON_CreateIntArray_5:
   \   000084   8E82         MOV     DPL,R6
   \   000086   8F83         MOV     DPH,R7
   \   000088   12....       LCALL   ??Subroutine203_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_492:
   \   00008B   6003         JZ      ??CrossCallReturnLabel_30
   2587          
   2588              if (a && a->child) {
   2589                  a->child->prev = n;
   \   00008D   12....       LCALL   ?Subroutine27 & 0xFFFF
   2590              }
   2591          
   2592              return a;
   \                     ??CrossCallReturnLabel_30:
   \   000090   EE           MOV     A,R6
   \   000091   FA           MOV     R2,A
   \   000092   EF           MOV     A,R7
   \   000093   FB           MOV     R3,A
   \                     ??cJSON_CreateIntArray_2:
   \   000094   7F0E         MOV     R7,#0xe
   \   000096   02....       LJMP    ?BANKED_LEAVE_XDATA
   2593          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine90:
   \   000000   85....       MOV     ?V0 + 4,?V0 + 2
   \   000003   85....       MOV     ?V0 + 5,?V0 + 3
   \   000006                REQUIRE ??Subroutine220_0
   \   000006                ; // Fall through to label ??Subroutine220_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine220_0:
   \   000000   E5..         MOV     A,?V0 + 0
   \   000002   2401         ADD     A,#0x1
   \   000004   F5..         MOV     ?V0 + 0,A
   \   000006   E5..         MOV     A,?V0 + 1
   \   000008   3400         ADDC    A,#0x0
   \   00000A   F5..         MOV     ?V0 + 1,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine127:
   \   000000   12....       LCALL   ??cJSON_CreateArray?relay
   \   000003   8A..         MOV     ?V0 + 0,R2
   \   000005   8B..         MOV     ?V0 + 1,R3
   \   000007   AE..         MOV     R6,?V0 + 0
   \   000009   AF..         MOV     R7,?V0 + 1
   \   00000B   75..00       MOV     ?V0 + 0,#0x0
   \   00000E   75..00       MOV     ?V0 + 1,#0x0
   \   000011   EE           MOV     A,R6
   \   000012   4F           ORL     A,R7
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine120:
   \   000000   C3           CLR     C
   \   000001   E5..         MOV     A,?V0 + 0
   \   000003   95..         SUBB    A,?V0 + 6
   \   000005   E5..         MOV     A,?V0 + 1
   \   000007   95..         SUBB    A,?V0 + 7
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine133:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008                REQUIRE ??Subroutine222_0
   \   000008                ; // Fall through to label ??Subroutine222_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine222_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine223_0
   \   000001                ; // Fall through to label ??Subroutine223_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine223_0:
   \   000000   12....       LCALL   ??Subroutine166_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_609:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL   ?Subroutine133 & 0xFFFF
   \                     ??CrossCallReturnLabel_591:
   \   000003   A3           INC     DPTR
   \   000004   E5..         MOV     A,?V0 + 2
   \   000006   F0           MOVX    @DPTR,A
   \   000007   A3           INC     DPTR
   \   000008   E5..         MOV     A,?V0 + 3
   \   00000A   F0           MOVX    @DPTR,A
   \   00000B   22           RET
   2594          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine111:
   \   000000   8A..         MOV     ?V0 + 8,R2
   \   000002   8B..         MOV     ?V0 + 9,R3
   \   000004   8C..         MOV     ?V0 + 6,R4
   \   000006   8D..         MOV     ?V0 + 7,R5
   \   000008   75..00       MOV     ?V0 + 4,#0x0
   \   00000B   75..00       MOV     ?V0 + 5,#0x0
   \   00000E   75..00       MOV     ?V0 + 2,#0x0
   \   000011   75..00       MOV     ?V0 + 3,#0x0
   \   000014                REQUIRE ??Subroutine207_0
   \   000014                ; // Fall through to label ??Subroutine207_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2595          CJSON_PUBLIC(cJSON *) cJSON_CreateFloatArray(const float *numbers, int count)
   \                     cJSON_CreateFloatArray:
   2596          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine111 & 0xFFFF
   2597              size_t i = 0;
   2598              cJSON *n = NULL;
   2599              cJSON *p = NULL;
   2600              cJSON *a = NULL;
   2601          
   2602              if ((count < 0) || (numbers == NULL))
   \                     ??CrossCallReturnLabel_505:
   \   000008   4005         JC      ??cJSON_CreateFloatArray_0
   \   00000A   EA           MOV     A,R2
   \   00000B   45..         ORL     A,?V0 + 9
   \   00000D   7006         JNZ     ??cJSON_CreateFloatArray_1
   2603              {
   2604                  return NULL;
   \                     ??cJSON_CreateFloatArray_0:
   \   00000F   7A00         MOV     R2,#0x0
   \   000011   7B00         MOV     R3,#0x0
   \   000013   805C         SJMP    ??cJSON_CreateFloatArray_2
   2605              }
   2606          
   2607              a = cJSON_CreateArray();
   \                     ??cJSON_CreateFloatArray_1:
   \   000015                ; Setup parameters for call to function cJSON_CreateArray
   \   000015   12....       LCALL   ?Subroutine127 & 0xFFFF
   2608          
   2609              for(i = 0; a && (i < (size_t)count); i++)
   \                     ??CrossCallReturnLabel_198:
   \   000018   6053         JZ      ??CrossCallReturnLabel_61
   \   00001A   8014         SJMP    ??CrossCallReturnLabel_585
   2610              {
   2611                  n = cJSON_CreateNumber((double)numbers[i]);
   2612                  if(!n)
   2613                  {
   2614                      cJSON_Delete(a);
   2615                      return NULL;
   2616                  }
   2617                  if(!i)
   2618                  {
   2619                      a->child = n;
   2620                  }
   2621                  else
   2622                  {
   2623                      suffix_object(p, n);
   \                     ??cJSON_CreateFloatArray_3:
   \   00001C                ; Setup parameters for call to function suffix_object
   \   00001C   AC..         MOV     R4,?V0 + 4
   \   00001E   AD..         MOV     R5,?V0 + 5
   \   000020   AA..         MOV     R2,?V0 + 2
   \   000022   AB..         MOV     R3,?V0 + 3
   \   000024   12....       LCALL   ??suffix_object?relay
   2624                  }
   2625                  p = n;
   \                     ??cJSON_CreateFloatArray_4:
   \   000027   85....       MOV     ?V0 + 2,?V0 + 4
   \   00002A   85....       MOV     ?V0 + 3,?V0 + 5
   \   00002D   12....       LCALL   ??Subroutine220_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_585:
   \   000030   12....       LCALL   ?Subroutine120 & 0xFFFF
   \                     ??CrossCallReturnLabel_186:
   \   000033   502C         JNC     ??cJSON_CreateFloatArray_5
   \   000035                ; Setup parameters for call to function cJSON_CreateNumber
   \   000035   85....       MOV     ?V0 + 4,?V0 + 0
   \   000038   85....       MOV     ?V0 + 5,?V0 + 1
   \   00003B   7402         MOV     A,#0x2
   \   00003D   78..         MOV     R0,#?V0 + 4
   \   00003F   12....       LCALL   ?S_SHL
   \   000042   12....       LCALL   ?Subroutine121 & 0xFFFF
   \                     ??CrossCallReturnLabel_189:
   \   000045   12....       LCALL   ?XLOAD_R2345
   \   000048   12....       LCALL   ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_201:
   \   00004B   7009         JNZ     ??cJSON_CreateFloatArray_6
   \   00004D                ; Setup parameters for call to function cJSON_Delete
   \   00004D   EE           MOV     A,R6
   \   00004E   FA           MOV     R2,A
   \   00004F   EF           MOV     A,R7
   \   000050   FB           MOV     R3,A
   \   000051   12....       LCALL   ??cJSON_Delete?relay
   \   000054   80B9         SJMP    ??cJSON_CreateFloatArray_0
   \                     ??cJSON_CreateFloatArray_6:
   \   000056   E5..         MOV     A,?V0 + 0
   \   000058   45..         ORL     A,?V0 + 1
   \   00005A   70C0         JNZ     ??cJSON_CreateFloatArray_3
   \   00005C   12....       LCALL   ?Subroutine107 & 0xFFFF
   2626              }
   \                     ??CrossCallReturnLabel_382:
   \   00005F   80C6         SJMP    ??cJSON_CreateFloatArray_4
   \                     ??cJSON_CreateFloatArray_5:
   \   000061   8E82         MOV     DPL,R6
   \   000063   8F83         MOV     DPH,R7
   \   000065   12....       LCALL   ??Subroutine203_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_493:
   \   000068   6003         JZ      ??CrossCallReturnLabel_61
   2627          
   2628              if (a && a->child) {
   2629                  a->child->prev = n;
   \   00006A   12....       LCALL   ?Subroutine43 & 0xFFFF
   2630              }
   2631          
   2632              return a;
   \                     ??CrossCallReturnLabel_61:
   \   00006D   EE           MOV     A,R6
   \   00006E   FA           MOV     R2,A
   \   00006F   EF           MOV     A,R7
   \   000070   FB           MOV     R3,A
   \                     ??cJSON_CreateFloatArray_2:
   \   000071   80..         SJMP    ??Subroutine221_0
   2633          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine128:
   \   000000   12....       LCALL   ??cJSON_CreateNumber?relay
   \   000003   8A..         MOV     ?V0 + 4,R2
   \   000005   8B..         MOV     ?V0 + 5,R3
   \   000007   EA           MOV     A,R2
   \   000008   45..         ORL     A,?V0 + 5
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine121:
   \   000000   E5..         MOV     A,?V0 + 8
   \   000002   25..         ADD     A,?V0 + 4
   \   000004   F582         MOV     DPL,A
   \   000006   E5..         MOV     A,?V0 + 9
   \   000008   35..         ADDC    A,?V0 + 5
   \   00000A   F583         MOV     DPH,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   12....       LCALL   ?Subroutine133 & 0xFFFF
   \                     ??CrossCallReturnLabel_592:
   \   000003   A3           INC     DPTR
   \   000004   E5..         MOV     A,?V0 + 4
   \   000006   F0           MOVX    @DPTR,A
   \   000007   A3           INC     DPTR
   \   000008   E5..         MOV     A,?V0 + 5
   \   00000A   F0           MOVX    @DPTR,A
   \   00000B   22           RET
   2634          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2635          CJSON_PUBLIC(cJSON *) cJSON_CreateDoubleArray(const double *numbers, int count)
   \                     cJSON_CreateDoubleArray:
   2636          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine111 & 0xFFFF
   2637              size_t i = 0;
   2638              cJSON *n = NULL;
   2639              cJSON *p = NULL;
   2640              cJSON *a = NULL;
   2641          
   2642              if ((count < 0) || (numbers == NULL))
   \                     ??CrossCallReturnLabel_506:
   \   000008   4005         JC      ??cJSON_CreateDoubleArray_0
   \   00000A   EA           MOV     A,R2
   \   00000B   45..         ORL     A,?V0 + 9
   \   00000D   7006         JNZ     ??cJSON_CreateDoubleArray_1
   2643              {
   2644                  return NULL;
   \                     ??cJSON_CreateDoubleArray_0:
   \   00000F   7A00         MOV     R2,#0x0
   \   000011   7B00         MOV     R3,#0x0
   \   000013   805C         SJMP    ??cJSON_CreateDoubleArray_2
   2645              }
   2646          
   2647              a = cJSON_CreateArray();
   \                     ??cJSON_CreateDoubleArray_1:
   \   000015                ; Setup parameters for call to function cJSON_CreateArray
   \   000015   12....       LCALL   ?Subroutine127 & 0xFFFF
   2648          
   2649              for(i = 0; a && (i < (size_t)count); i++)
   \                     ??CrossCallReturnLabel_199:
   \   000018   6053         JZ      ??CrossCallReturnLabel_62
   \   00001A   8014         SJMP    ??CrossCallReturnLabel_586
   2650              {
   2651                  n = cJSON_CreateNumber(numbers[i]);
   2652                  if(!n)
   2653                  {
   2654                      cJSON_Delete(a);
   2655                      return NULL;
   2656                  }
   2657                  if(!i)
   2658                  {
   2659                      a->child = n;
   2660                  }
   2661                  else
   2662                  {
   2663                      suffix_object(p, n);
   \                     ??cJSON_CreateDoubleArray_3:
   \   00001C                ; Setup parameters for call to function suffix_object
   \   00001C   AC..         MOV     R4,?V0 + 4
   \   00001E   AD..         MOV     R5,?V0 + 5
   \   000020   AA..         MOV     R2,?V0 + 2
   \   000022   AB..         MOV     R3,?V0 + 3
   \   000024   12....       LCALL   ??suffix_object?relay
   2664                  }
   2665                  p = n;
   \                     ??cJSON_CreateDoubleArray_4:
   \   000027   85....       MOV     ?V0 + 2,?V0 + 4
   \   00002A   85....       MOV     ?V0 + 3,?V0 + 5
   \   00002D   12....       LCALL   ??Subroutine220_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_586:
   \   000030   12....       LCALL   ?Subroutine120 & 0xFFFF
   \                     ??CrossCallReturnLabel_187:
   \   000033   502C         JNC     ??cJSON_CreateDoubleArray_5
   \   000035                ; Setup parameters for call to function cJSON_CreateNumber
   \   000035   85....       MOV     ?V0 + 4,?V0 + 0
   \   000038   85....       MOV     ?V0 + 5,?V0 + 1
   \   00003B   7402         MOV     A,#0x2
   \   00003D   78..         MOV     R0,#?V0 + 4
   \   00003F   12....       LCALL   ?S_SHL
   \   000042   12....       LCALL   ?Subroutine121 & 0xFFFF
   \                     ??CrossCallReturnLabel_190:
   \   000045   12....       LCALL   ?XLOAD_R2345
   \   000048   12....       LCALL   ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_202:
   \   00004B   7009         JNZ     ??cJSON_CreateDoubleArray_6
   \   00004D                ; Setup parameters for call to function cJSON_Delete
   \   00004D   EE           MOV     A,R6
   \   00004E   FA           MOV     R2,A
   \   00004F   EF           MOV     A,R7
   \   000050   FB           MOV     R3,A
   \   000051   12....       LCALL   ??cJSON_Delete?relay
   \   000054   80B9         SJMP    ??cJSON_CreateDoubleArray_0
   \                     ??cJSON_CreateDoubleArray_6:
   \   000056   E5..         MOV     A,?V0 + 0
   \   000058   45..         ORL     A,?V0 + 1
   \   00005A   70C0         JNZ     ??cJSON_CreateDoubleArray_3
   \   00005C   12....       LCALL   ?Subroutine107 & 0xFFFF
   2666              }
   \                     ??CrossCallReturnLabel_383:
   \   00005F   80C6         SJMP    ??cJSON_CreateDoubleArray_4
   \                     ??cJSON_CreateDoubleArray_5:
   \   000061   8E82         MOV     DPL,R6
   \   000063   8F83         MOV     DPH,R7
   \   000065   12....       LCALL   ??Subroutine203_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_494:
   \   000068   6003         JZ      ??CrossCallReturnLabel_62
   2667          
   2668              if (a && a->child) {
   2669                  a->child->prev = n;
   \   00006A   12....       LCALL   ?Subroutine43 & 0xFFFF
   2670              }
   2671          
   2672              return a;
   \                     ??CrossCallReturnLabel_62:
   \   00006D   EE           MOV     A,R6
   \   00006E   FA           MOV     R2,A
   \   00006F   EF           MOV     A,R7
   \   000070   FB           MOV     R3,A
   \                     ??cJSON_CreateDoubleArray_2:
   \   000071   80..         SJMP    ??Subroutine221_0
   2673          }
   2674          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2675          CJSON_PUBLIC(cJSON *) cJSON_CreateStringArray(const char *const *strings, int count)
   \                     cJSON_CreateStringArray:
   2676          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 8,R2
   \   000007   8B..         MOV     ?V0 + 9,R3
   \   000009   8C..         MOV     ?V0 + 6,R4
   \   00000B   8D..         MOV     ?V0 + 7,R5
   2677              size_t i = 0;
   2678              cJSON *n = NULL;
   \   00000D   75..00       MOV     ?V0 + 2,#0x0
   \   000010   75..00       MOV     ?V0 + 3,#0x0
   2679              cJSON *p = NULL;
   \   000013   75..00       MOV     ?V0 + 4,#0x0
   \   000016   75..00       MOV     ?V0 + 5,#0x0
   2680              cJSON *a = NULL;
   2681          
   2682              if ((count < 0) || (strings == NULL))
   \   000019   12....       LCALL   ??Subroutine207_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_515:
   \   00001C   4005         JC      ??cJSON_CreateStringArray_0
   \   00001E   EA           MOV     A,R2
   \   00001F   45..         ORL     A,?V0 + 9
   \   000021   7006         JNZ     ??cJSON_CreateStringArray_1
   2683              {
   2684                  return NULL;
   \                     ??cJSON_CreateStringArray_0:
   \   000023   7A00         MOV     R2,#0x0
   \   000025   7B00         MOV     R3,#0x0
   \   000027   8059         SJMP    ??cJSON_CreateStringArray_2
   2685              }
   2686          
   2687              a = cJSON_CreateArray();
   \                     ??cJSON_CreateStringArray_1:
   \   000029                ; Setup parameters for call to function cJSON_CreateArray
   \   000029   12....       LCALL   ?Subroutine127 & 0xFFFF
   2688          
   2689              for (i = 0; a && (i < (size_t)count); i++)
   \                     ??CrossCallReturnLabel_200:
   \   00002C   6050         JZ      ??CrossCallReturnLabel_31
   \   00002E   800E         SJMP    ??CrossCallReturnLabel_584
   2690              {
   2691                  n = cJSON_CreateString(strings[i]);
   2692                  if(!n)
   2693                  {
   2694                      cJSON_Delete(a);
   2695                      return NULL;
   2696                  }
   2697                  if(!i)
   2698                  {
   2699                      a->child = n;
   2700                  }
   2701                  else
   2702                  {
   2703                      suffix_object(p,n);
   \                     ??cJSON_CreateStringArray_3:
   \   000030                ; Setup parameters for call to function suffix_object
   \   000030   AC..         MOV     R4,?V0 + 2
   \   000032   AD..         MOV     R5,?V0 + 3
   \   000034   AA..         MOV     R2,?V0 + 4
   \   000036   AB..         MOV     R3,?V0 + 5
   \   000038   12....       LCALL   ??suffix_object?relay
   2704                  }
   2705                  p = n;
   \                     ??cJSON_CreateStringArray_4:
   \   00003B   12....       LCALL   ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_584:
   \   00003E   12....       LCALL   ?Subroutine120 & 0xFFFF
   \                     ??CrossCallReturnLabel_188:
   \   000041   502F         JNC     ??cJSON_CreateStringArray_5
   \   000043                ; Setup parameters for call to function cJSON_CreateString
   \   000043   E5..         MOV     A,?V0 + 0
   \   000045   C3           CLR     C
   \   000046   33           RLC     A
   \   000047   F8           MOV     R0,A
   \   000048   E5..         MOV     A,?V0 + 1
   \   00004A   33           RLC     A
   \   00004B   F9           MOV     R1,A
   \   00004C   E5..         MOV     A,?V0 + 8
   \   00004E   28           ADD     A,R0
   \   00004F   F582         MOV     DPL,A
   \   000051   E5..         MOV     A,?V0 + 9
   \   000053   39           ADDC    A,R1
   \   000054   F583         MOV     DPH,A
   \   000056   12....       LCALL   ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000059   EA           MOV     A,R2
   \   00005A   45..         ORL     A,?V0 + 3
   \   00005C   7009         JNZ     ??cJSON_CreateStringArray_6
   \   00005E                ; Setup parameters for call to function cJSON_Delete
   \   00005E   EE           MOV     A,R6
   \   00005F   FA           MOV     R2,A
   \   000060   EF           MOV     A,R7
   \   000061   FB           MOV     R3,A
   \   000062   12....       LCALL   ??cJSON_Delete?relay
   \   000065   80BC         SJMP    ??cJSON_CreateStringArray_0
   \                     ??cJSON_CreateStringArray_6:
   \   000067   E5..         MOV     A,?V0 + 0
   \   000069   45..         ORL     A,?V0 + 1
   \   00006B   70C3         JNZ     ??cJSON_CreateStringArray_3
   \   00006D   12....       LCALL   ?Subroutine107 & 0xFFFF
   2706              }
   \                     ??CrossCallReturnLabel_384:
   \   000070   80C9         SJMP    ??cJSON_CreateStringArray_4
   \                     ??cJSON_CreateStringArray_5:
   \   000072   8E82         MOV     DPL,R6
   \   000074   8F83         MOV     DPH,R7
   \   000076   12....       LCALL   ??Subroutine203_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_495:
   \   000079   6003         JZ      ??CrossCallReturnLabel_31
   2707          
   2708              if (a && a->child) {
   2709                  a->child->prev = n;
   \   00007B   12....       LCALL   ?Subroutine27 & 0xFFFF
   2710              }
   2711          
   2712              return a;
   \                     ??CrossCallReturnLabel_31:
   \   00007E   EE           MOV     A,R6
   \   00007F   FA           MOV     R2,A
   \   000080   EF           MOV     A,R7
   \   000081   FB           MOV     R3,A
   \                     ??cJSON_CreateStringArray_2:
   \   000082   02....       LJMP    ??Subroutine221_0 & 0xFFFF
   2713          }
   2714          
   2715          /* Duplication */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2716          CJSON_PUBLIC(cJSON *) cJSON_Duplicate(const cJSON *item, cJSON_bool recurse)
   \                     cJSON_Duplicate:
   2717          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   8C..         MOV     ?V0 + 8,R4
   \   00000B   8D..         MOV     ?V0 + 9,R5
   2718              cJSON *newitem = NULL;
   2719              cJSON *child = NULL;
   2720              cJSON *next = NULL;
   \   00000D   75..00       MOV     ?V0 + 4,#0x0
   \   000010   75..00       MOV     ?V0 + 5,#0x0
   2721              cJSON *newchild = NULL;
   \   000013   75..00       MOV     ?V0 + 2,#0x0
   \   000016   75..00       MOV     ?V0 + 3,#0x0
   2722          
   2723              /* Bail on bad ptr */
   2724              if (!item)
   \   000019   EA           MOV     A,R2
   \   00001A   45..         ORL     A,?V0 + 1
   \   00001C   7003         JNZ     $+5
   \   00001E   02....       LJMP    ??cJSON_Duplicate_0 & 0xFFFF
   2725              {
   2726                  goto fail;
   2727              }
   2728              /* Create new item */
   2729              newitem = cJSON_New_Item(&global_hooks);
   \   000021                ; Setup parameters for call to function cJSON_New_Item
   \   000021   7A..         MOV     R2,#global_hooks & 0xff
   \   000023   7B..         MOV     R3,#(global_hooks >> 8) & 0xff
   \   000025   12....       LCALL   ??cJSON_New_Item?relay
   \   000028   8A..         MOV     ?V0 + 6,R2
   \   00002A   8B..         MOV     ?V0 + 7,R3
   \   00002C   AE..         MOV     R6,?V0 + 6
   \   00002E   AF..         MOV     R7,?V0 + 7
   2730              if (!newitem)
   \   000030   EE           MOV     A,R6
   \   000031   4F           ORL     A,R7
   \   000032   7003         JNZ     $+5
   \   000034   02....       LJMP    ??cJSON_Duplicate_0 & 0xFFFF
   2731              {
   2732                  goto fail;
   2733              }
   2734              /* Copy over all vars */
   2735              newitem->type = item->type & (~cJSON_IsReference);
   \   000037   85..82       MOV     DPL,?V0 + 0
   \   00003A   85..83       MOV     DPH,?V0 + 1
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   E0           MOVX    A,@DPTR
   \   000044   F8           MOV     R0,A
   \   000045   A3           INC     DPTR
   \   000046   E0           MOVX    A,@DPTR
   \   000047   54FE         ANL     A,#0xfe
   \   000049   F9           MOV     R1,A
   \   00004A   8E82         MOV     DPL,R6
   \   00004C   8F83         MOV     DPH,R7
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   12....       LCALL   ??Subroutine197_0 & 0xFFFF
   2736              newitem->valueint = item->valueint;
   \                     ??CrossCallReturnLabel_451:
   \   000053   85..82       MOV     DPL,?V0 + 0
   \   000056   85..83       MOV     DPH,?V0 + 1
   \   000059   A3           INC     DPTR
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   000060   A3           INC     DPTR
   \   000061   A3           INC     DPTR
   \   000062   12....       LCALL   ??Subroutine197_0 & 0xFFFF
   2737              newitem->valuedouble = item->valuedouble;
   \                     ??CrossCallReturnLabel_452:
   \   000065   12....       LCALL   ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_141:
   \   000068   12....       LCALL   ?XLOAD_R2345
   \   00006B   12....       LCALL   ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_143:
   \   00006E   12....       LCALL   ?XSTORE_R2345
   2738              if (item->valuestring)
   \   000071   85..82       MOV     DPL,?V0 + 0
   \   000074   85..83       MOV     DPH,?V0 + 1
   \   000077   12....       LCALL   ??Subroutine202_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_500:
   \   00007A   6036         JZ      ??cJSON_Duplicate_1
   2739              {
   2740                  newitem->valuestring = (char*)cJSON_strdup((unsigned char*)item->valuestring, &global_hooks);
   \   00007C   EE           MOV     A,R6
   \   00007D   2408         ADD     A,#0x8
   \   00007F   F5..         MOV     ?V0 + 6,A
   \   000081   EF           MOV     A,R7
   \   000082   3400         ADDC    A,#0x0
   \   000084   F5..         MOV     ?V0 + 7,A
   \   000086                ; Setup parameters for call to function cJSON_strdup
   \   000086   7C..         MOV     R4,#global_hooks & 0xff
   \   000088   7D..         MOV     R5,#(global_hooks >> 8) & 0xff
   \   00008A   85..82       MOV     DPL,?V0 + 0
   \   00008D   85..83       MOV     DPH,?V0 + 1
   \   000090   A3           INC     DPTR
   \   000091   A3           INC     DPTR
   \   000092   A3           INC     DPTR
   \   000093   A3           INC     DPTR
   \   000094   A3           INC     DPTR
   \   000095   A3           INC     DPTR
   \   000096   A3           INC     DPTR
   \   000097   A3           INC     DPTR
   \   000098   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   00009B   85..82       MOV     DPL,?V0 + 6
   \   00009E   85..83       MOV     DPH,?V0 + 7
   \   0000A1   12....       LCALL   ??Subroutine186_0 & 0xFFFF
   2741                  if (!newitem->valuestring)
   \                     ??CrossCallReturnLabel_378:
   \   0000A4   85..82       MOV     DPL,?V0 + 6
   \   0000A7   85..83       MOV     DPH,?V0 + 7
   \   0000AA   12....       LCALL   ??Subroutine205_0 & 0xFFFF
   2742                  {
   2743                      goto fail;
   2744                  }
   2745              }
   \                     ??CrossCallReturnLabel_484:
   \   0000AD   7003         JNZ     $+5
   \   0000AF   02....       LJMP    ??cJSON_Duplicate_2 & 0xFFFF
   2746              if (item->string)
   \                     ??cJSON_Duplicate_1:
   \   0000B2   12....       LCALL   ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_362:
   \   0000B5   12....       LCALL   ??Subroutine205_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_485:
   \   0000B8   603B         JZ      ??cJSON_Duplicate_3
   2747              {
   2748                  newitem->string = (item->type&cJSON_StringIsConst) ? item->string : (char*)cJSON_strdup((unsigned char*)item->string, &global_hooks);
   \   0000BA   85..82       MOV     DPL,?V0 + 0
   \   0000BD   85..83       MOV     DPH,?V0 + 1
   \   0000C0   A3           INC     DPTR
   \   0000C1   A3           INC     DPTR
   \   0000C2   A3           INC     DPTR
   \   0000C3   A3           INC     DPTR
   \   0000C4   A3           INC     DPTR
   \   0000C5   A3           INC     DPTR
   \   0000C6   A3           INC     DPTR
   \   0000C7   E0           MOVX    A,@DPTR
   \   0000C8   5402         ANL     A,#0x2
   \   0000CA   7012         JNZ     ??cJSON_Duplicate_4
   \   0000CC                ; Setup parameters for call to function cJSON_strdup
   \   0000CC   7C..         MOV     R4,#global_hooks & 0xff
   \   0000CE   7D..         MOV     R5,#(global_hooks >> 8) & 0xff
   \   0000D0   12....       LCALL   ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_363:
   \   0000D3   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   0000D6   8A..         MOV     ?V0 + 6,R2
   \   0000D8   8B..         MOV     ?V0 + 7,R3
   \   0000DA   A8..         MOV     R0,?V0 + 6
   \   0000DC   A9..         MOV     R1,?V0 + 7
   \                     ??cJSON_Duplicate_4:
   \   0000DE   EE           MOV     A,R6
   \   0000DF   2410         ADD     A,#0x10
   \   0000E1   FA           MOV     R2,A
   \   0000E2   EF           MOV     A,R7
   \   0000E3   3400         ADDC    A,#0x0
   \   0000E5   FB           MOV     R3,A
   \   0000E6   8A82         MOV     DPL,R2
   \   0000E8   8B83         MOV     DPH,R3
   \   0000EA   12....       LCALL   ??Subroutine200_0 & 0xFFFF
   2749                  if (!newitem->string)
   \                     ??CrossCallReturnLabel_441:
   \   0000ED   8A82         MOV     DPL,R2
   \   0000EF   8B83         MOV     DPH,R3
   \   0000F1   E0           MOVX    A,@DPTR
   \   0000F2   49           ORL     A,R1
   \   0000F3   606E         JZ      ??cJSON_Duplicate_2
   2750                  {
   2751                      goto fail;
   2752                  }
   2753              }
   2754              /* If non-recursive, then we're done! */
   2755              if (!recurse)
   \                     ??cJSON_Duplicate_3:
   \   0000F5   E5..         MOV     A,?V0 + 8
   \   0000F7   45..         ORL     A,?V0 + 9
   \   0000F9   7006         JNZ     ??cJSON_Duplicate_5
   2756              {
   2757                  return newitem;
   \                     ??cJSON_Duplicate_6:
   \   0000FB   EE           MOV     A,R6
   \   0000FC   FA           MOV     R2,A
   \   0000FD   EF           MOV     A,R7
   \   0000FE   FB           MOV     R3,A
   \   0000FF   806D         SJMP    ??cJSON_Duplicate_7
   2758              }
   2759              /* Walk the ->next chain for the child. */
   2760              child = item->child;
   \                     ??cJSON_Duplicate_5:
   \   000101   85..82       MOV     DPL,?V0 + 0
   \   000104   85..83       MOV     DPH,?V0 + 1
   \   000107   A3           INC     DPTR
   \   000108   A3           INC     DPTR
   \   000109   A3           INC     DPTR
   \   00010A   A3           INC     DPTR
   \   00010B   800D         SJMP    ??cJSON_Duplicate_8
   2761              while (child != NULL)
   2762              {
   2763                  newchild = cJSON_Duplicate(child, true); /* Duplicate (with recurse) each item in the ->next chain */
   2764                  if (!newchild)
   2765                  {
   2766                      goto fail;
   2767                  }
   2768                  if (next != NULL)
   2769                  {
   2770                      /* If newitem->child already set, then crosswire ->prev and ->next and move on */
   2771                      next->next = newchild;
   2772                      newchild->prev = next;
   2773                      next = newchild;
   2774                  }
   2775                  else
   2776                  {
   2777                      /* Set newitem->child and move to it */
   2778                      newitem->child = newchild;
   \                     ??cJSON_Duplicate_9:
   \   00010D   12....       LCALL   ?Subroutine107 & 0xFFFF
   2779                      next = newchild;
   \                     ??CrossCallReturnLabel_385:
   \   000110   8A..         MOV     ?V0 + 4,R2
   \   000112   F5..         MOV     ?V0 + 5,A
   2780                  }
   2781                  child = child->next;
   \                     ??cJSON_Duplicate_10:
   \   000114   85..82       MOV     DPL,?V0 + 0
   \   000117   85..83       MOV     DPH,?V0 + 1
   \                     ??cJSON_Duplicate_8:
   \   00011A   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   00011D   6036         JZ      ??cJSON_Duplicate_11
   \   00011F                ; Setup parameters for call to function cJSON_Duplicate
   \   00011F   7C01         MOV     R4,#0x1
   \   000121   7D00         MOV     R5,#0x0
   \   000123   AA..         MOV     R2,?V0 + 0
   \   000125   AB..         MOV     R3,?V0 + 1
   \   000127   12....       LCALL   ??cJSON_Duplicate?relay
   \   00012A   8A..         MOV     ?V0 + 2,R2
   \   00012C   8B..         MOV     ?V0 + 3,R3
   \   00012E   EA           MOV     A,R2
   \   00012F   45..         ORL     A,?V0 + 3
   \   000131   6030         JZ      ??cJSON_Duplicate_2
   \   000133   E5..         MOV     A,?V0 + 4
   \   000135   45..         ORL     A,?V0 + 5
   \   000137   60D4         JZ      ??cJSON_Duplicate_9
   \   000139   85..82       MOV     DPL,?V0 + 4
   \   00013C   85..83       MOV     DPH,?V0 + 5
   \   00013F   12....       LCALL   ??Subroutine186_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_379:
   \   000142   8A82         MOV     DPL,R2
   \   000144   F583         MOV     DPH,A
   \   000146   A3           INC     DPTR
   \   000147   A3           INC     DPTR
   \   000148   E5..         MOV     A,?V0 + 4
   \   00014A   F0           MOVX    @DPTR,A
   \   00014B   A3           INC     DPTR
   \   00014C   E5..         MOV     A,?V0 + 5
   \   00014E   F0           MOVX    @DPTR,A
   \   00014F   8A..         MOV     ?V0 + 4,R2
   \   000151   8B..         MOV     ?V0 + 5,R3
   \   000153   80BF         SJMP    ??cJSON_Duplicate_10
   2782              }
   \                     ??cJSON_Duplicate_11:
   \   000155   8E82         MOV     DPL,R6
   \   000157   8F83         MOV     DPH,R7
   \   000159   12....       LCALL   ??Subroutine203_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_496:
   \   00015C   609D         JZ      ??cJSON_Duplicate_6
   2783              if (newitem && newitem->child)
   2784              {
   2785                  newitem->child->prev = newchild;
   \   00015E   12....       LCALL   ?Subroutine27 & 0xFFFF
   2786              }
   \                     ??CrossCallReturnLabel_32:
   \   000161   8098         SJMP    ??cJSON_Duplicate_6
   2787          
   2788              return newitem;
   2789          
   2790          fail:
   2791              if (newitem != NULL)
   2792              {
   2793                  cJSON_Delete(newitem);
   \                     ??cJSON_Duplicate_2:
   \   000163                ; Setup parameters for call to function cJSON_Delete
   \   000163   EE           MOV     A,R6
   \   000164   FA           MOV     R2,A
   \   000165   EF           MOV     A,R7
   \   000166   FB           MOV     R3,A
   \   000167   12....       LCALL   ??cJSON_Delete?relay
   2794              }
   2795          
   2796              return NULL;
   \                     ??cJSON_Duplicate_0:
   \   00016A   7A00         MOV     R2,#0x0
   \   00016C   7B00         MOV     R3,#0x0
   \                     ??cJSON_Duplicate_7:
   \   00016E   02....       LJMP    ?Subroutine6 & 0xFFFF
   2797          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000   12....       LCALL   ??Subroutine216_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_554:
   \   000003   12....       LCALL   ??cJSON_strdup?relay
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   12....       LCALL   ?Subroutine130 & 0xFFFF
   \                     ??CrossCallReturnLabel_538:
   \   000003   E5..         MOV     A,?V0 + 0
   \   000005   45..         ORL     A,?V0 + 1
   \   000007   22           RET
   2798          
   2799          static void skip_oneline_comment(char **input)
   2800          {
   2801              *input += static_strlen("//");
   2802          
   2803              for (; (*input)[0] != '\0'; ++(*input))
   2804              {
   2805                  if ((*input)[0] == '\n') {
   2806                      *input += static_strlen("\n");
   2807                      return;
   2808                  }
   2809              }
   2810          }
   2811          
   2812          static void skip_multiline_comment(char **input)
   2813          {
   2814              *input += static_strlen("/*");
   2815          
   2816              for (; (*input)[0] != '\0'; ++(*input))
   2817              {
   2818                  if (((*input)[0] == '*') && ((*input)[1] == '/'))
   2819                  {
   2820                      *input += static_strlen("*/");
   2821                      return;
   2822                  }
   2823              }
   2824          }
   2825          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2826          static void minify_string(char **input, char **output) {
   \                     minify_string:
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   2827              (*output)[0] = (*input)[0];
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   12....       LCALL   ??Subroutine226_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_600:
   \   00000C   C0E0         PUSH    A
   \   00000E   8C82         MOV     DPL,R4
   \   000010   8D83         MOV     DPH,R5
   \   000012   12....       LCALL   ??Subroutine164_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_267:
   \   000015   D0E0         POP     A
   \   000017   803C         SJMP    ??minify_string_0
   2828              *input += static_strlen("\"");
   2829              *output += static_strlen("\"");
   2830          
   2831          
   2832              for (; (*input)[0] != '\0'; (void)++(*input), ++(*output)) {
   2833                  (*output)[0] = (*input)[0];
   2834          
   2835                  if ((*input)[0] == '\"') {
   2836                      (*output)[0] = '\"';
   2837                      *input += static_strlen("\"");
   2838                      *output += static_strlen("\"");
   2839                      return;
   2840                  } else if (((*input)[0] == '\\') && ((*input)[1] == '\"')) {
   \                     ??minify_string_1:
   \   000019   8A82         MOV     DPL,R2
   \   00001B   8B83         MOV     DPH,R3
   \   00001D   12....       LCALL   ??Subroutine227_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_595:
   \   000020   645C         XRL     A,#0x5c
   \   000022   7032         JNZ     ??minify_string_2
   \   000024   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_588:
   \   000027   6422         XRL     A,#0x22
   \   000029   702B         JNZ     ??minify_string_2
   2841                      (*output)[1] = (*input)[1];
   \   00002B   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_589:
   \   00002E   C0E0         PUSH    A
   \   000030   8C82         MOV     DPL,R4
   \   000032   8D83         MOV     DPH,R5
   \   000034   12....       LCALL   ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   000037   D0E0         POP     A
   \   000039   12....       LCALL   ?Subroutine105 & 0xFFFF
   2842                      *input += static_strlen("\"");
   \                     ??CrossCallReturnLabel_169:
   \   00003C   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   00003F   8A82         MOV     DPL,R2
   \   000041   8B83         MOV     DPH,R3
   \   000043   12....       LCALL   ??Subroutine200_0 & 0xFFFF
   2843                      *output += static_strlen("\"");
   \                     ??CrossCallReturnLabel_442:
   \   000046   8C82         MOV     DPL,R4
   \   000048   8D83         MOV     DPH,R5
   \   00004A   12....       LCALL   ?Subroutine33 & 0xFFFF
   2844                  }
   \                     ??CrossCallReturnLabel_43:
   \   00004D   8C82         MOV     DPL,R4
   \   00004F   8D83         MOV     DPH,R5
   \   000051   E8           MOV     A,R0
   \   000052   F0           MOVX    @DPTR,A
   \   000053   A3           INC     DPTR
   \   000054   E9           MOV     A,R1
   \                     ??minify_string_0:
   \   000055   F0           MOVX    @DPTR,A
   \                     ??minify_string_2:
   \   000056   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000059   8A82         MOV     DPL,R2
   \   00005B   8B83         MOV     DPH,R3
   \   00005D   12....       LCALL   ??Subroutine226_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_601:
   \   000060   6029         JZ      ??CrossCallReturnLabel_0
   \   000062   8A82         MOV     DPL,R2
   \   000064   8B83         MOV     DPH,R3
   \   000066   12....       LCALL   ??Subroutine227_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_596:
   \   000069   C0E0         PUSH    A
   \   00006B   8C82         MOV     DPL,R4
   \   00006D   8D83         MOV     DPH,R5
   \   00006F   12....       LCALL   ??Subroutine164_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_268:
   \   000072   D0E0         POP     A
   \   000074   12....       LCALL   ?Subroutine105 & 0xFFFF
   \                     ??CrossCallReturnLabel_170:
   \   000077   12....       LCALL   ??Subroutine226_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_602:
   \   00007A   6422         XRL     A,#0x22
   \   00007C   709B         JNZ     ??minify_string_1
   \   00007E   8C82         MOV     DPL,R4
   \   000080   8D83         MOV     DPH,R5
   \   000082   12....       LCALL   ??Subroutine164_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_269:
   \   000085   7422         MOV     A,#0x22
   \   000087   F0           MOVX    @DPTR,A
   \   000088   12....       LCALL   ?Subroutine16 & 0xFFFF
   2845              }
   \                     ??CrossCallReturnLabel_0:
   \   00008B   02....       LJMP    ??Subroutine191_0 & 0xFFFF
   2846          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004                REQUIRE ??Subroutine224_0
   \   000004                ; // Fall through to label ??Subroutine224_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine224_0:
   \   000000   12....       LCALL   ??Subroutine222_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_593:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine226_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002                REQUIRE ??Subroutine227_0
   \   000002                ; // Fall through to label ??Subroutine227_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine227_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine228_0
   \   000001                ; // Fall through to label ??Subroutine228_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine228_0:
   \   000000   12....       LCALL   ??Subroutine166_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_610:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   12....       LCALL   ?Subroutine131 & 0xFFFF
   \                     ??CrossCallReturnLabel_203:
   \   000007   8A82         MOV     DPL,R2
   \   000009   8B83         MOV     DPH,R3
   \   00000B   E8           MOV     A,R0
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   A3           INC     DPTR
   \   00000E   E9           MOV     A,R1
   \   00000F   F0           MOVX    @DPTR,A
   \   000010   8C82         MOV     DPL,R4
   \   000012   8D83         MOV     DPH,R5
   \   000014   12....       LCALL   ?Subroutine131 & 0xFFFF
   \                     ??CrossCallReturnLabel_204:
   \   000017   8C82         MOV     DPL,R4
   \   000019   8D83         MOV     DPH,R5
   \   00001B   E8           MOV     A,R0
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   A3           INC     DPTR
   \   00001E   E9           MOV     A,R1
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   22           RET
   2847          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   08           INC     R0
   \   000001   12....       LCALL   ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_213:
   \   000004   E8           MOV     A,R0
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   E9           MOV     A,R1
   \   000008   F0           MOVX    @DPTR,A
   \   000009                REQUIRE ??Subroutine225_0
   \   000009                ; // Fall through to label ??Subroutine225_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine225_0:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine226_0
   \   000006                ; // Fall through to label ??Subroutine226_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2848          CJSON_PUBLIC(void) cJSON_Minify(char *json)
   \                     cJSON_Minify:
   2849          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 4
   \   000004   74FC         MOV     A,#-0x4
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   \   000009   12....       LCALL   ?Subroutine106 & 0xFFFF
   2850              char *into = json;
   \                     ??CrossCallReturnLabel_290:
   \   00000C   12....       LCALL   ??Subroutine230_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_617:
   \   00000F   7402         MOV     A,#0x2
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   12....       LCALL   ??Subroutine200_0 & 0xFFFF
   2851          
   2852              if (json == NULL)
   \                     ??CrossCallReturnLabel_443:
   \   000017   85..82       MOV     DPL,?XSP + 0
   \   00001A   85..83       MOV     DPH,?XSP + 1
   \   00001D   12....       LCALL   ??Subroutine205_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_486:
   \   000020   7013         JNZ     ??CrossCallReturnLabel_444
   \   000022   02....       LJMP    ??CrossCallReturnLabel_101 & 0xFFFF
   2853              {
   2854                  return;
   2855              }
   2856          
   2857              while (json[0] != '\0')
   2858              {
   2859                  switch (json[0])
   2860                  {
   2861                      case ' ':
   2862                      case '\t':
   2863                      case '\r':
   2864                      case '\n':
   2865                          json++;
   \                     ??cJSON_Minify_0:
   \   000025   85..82       MOV     DPL,?XSP + 0
   \   000028   85..83       MOV     DPH,?XSP + 1
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   2401         ADD     A,#0x1
   \   00002E   F8           MOV     R0,A
   \                     ??cJSON_Minify_1:
   \   00002F   12....       LCALL   ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_212:
   \   000032   12....       LCALL   ??Subroutine200_0 & 0xFFFF
   2866                          break;
   \                     ??CrossCallReturnLabel_444:
   \   000035   12....       LCALL   ??Subroutine225_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_603:
   \   000038   7003         JNZ     $+5
   \   00003A   02....       LJMP    ??cJSON_Minify_2 & 0xFFFF
   \   00003D   85..82       MOV     DPL,?XSP + 0
   \   000040   85..83       MOV     DPH,?XSP + 1
   \   000043   12....       LCALL   ??Subroutine227_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_597:
   \   000046   24F7         ADD     A,#-0x9
   \   000048   60DB         JZ      ??cJSON_Minify_0
   \   00004A   14           DEC     A
   \   00004B   60D8         JZ      ??cJSON_Minify_0
   \   00004D   24FD         ADD     A,#-0x3
   \   00004F   60D4         JZ      ??cJSON_Minify_0
   \   000051   24ED         ADD     A,#-0x13
   \   000053   60D0         JZ      ??cJSON_Minify_0
   \   000055   24FE         ADD     A,#-0x2
   \   000057   7003         JNZ     $+5
   \   000059   02....       LJMP    ??cJSON_Minify_3 & 0xFFFF
   \   00005C   24F3         ADD     A,#-0xd
   \   00005E   85..82       MOV     DPL,?XSP + 0
   \   000061   85..83       MOV     DPH,?XSP + 1
   \   000064   A3           INC     DPTR
   \   000065   6003         JZ      $+5
   \   000067   02....       LJMP    ??cJSON_Minify_4 & 0xFFFF
   2867          
   2868                      case '/':
   2869                          if (json[1] == '/')
   \   00006A   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   00006D   85..82       MOV     DPL,?XSP + 0
   \   000070   85..83       MOV     DPH,?XSP + 1
   \   000073   7021         JNZ     ??cJSON_Minify_5
   2870                          {
   2871                              skip_oneline_comment(&json);
   \   000075   E0           MOVX    A,@DPTR
   \   000076   2402         ADD     A,#0x2
   \   000078   08           INC     R0
   \                     ??cJSON_Minify_6:
   \   000079   12....       LCALL   ?Subroutine19 & 0xFFFF
   2872                          }
   \                     ??CrossCallReturnLabel_604:
   \   00007C   60B7         JZ      ??CrossCallReturnLabel_444
   \   00007E   85..82       MOV     DPL,?XSP + 0
   \   000081   85..83       MOV     DPH,?XSP + 1
   \   000084   12....       LCALL   ??Subroutine227_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_598:
   \   000087   640A         XRL     A,#0xa
   \   000089   609A         JZ      ??cJSON_Minify_0
   \   00008B   85..82       MOV     DPL,?XSP + 0
   \   00008E   85..83       MOV     DPH,?XSP + 1
   \   000091   E0           MOVX    A,@DPTR
   \   000092   2401         ADD     A,#0x1
   \   000094   80E3         SJMP    ??cJSON_Minify_6
   2873                          else if (json[1] == '*')
   \                     ??cJSON_Minify_5:
   \   000096   12....       LCALL   ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_587:
   \   000099   642A         XRL     A,#0x2a
   \   00009B   7088         JNZ     ??cJSON_Minify_0
   2874                          {
   2875                              skip_multiline_comment(&json);
   \   00009D   85..82       MOV     DPL,?XSP + 0
   \   0000A0   85..83       MOV     DPH,?XSP + 1
   \   0000A3   E0           MOVX    A,@DPTR
   \   0000A4   2402         ADD     A,#0x2
   \   0000A6   08           INC     R0
   \   0000A7   8009         SJMP    ??cJSON_Minify_7
   2876                          } else {
   \                     ??cJSON_Minify_8:
   \   0000A9   85..82       MOV     DPL,?XSP + 0
   \   0000AC   85..83       MOV     DPH,?XSP + 1
   \   0000AF   E0           MOVX    A,@DPTR
   \   0000B0   2401         ADD     A,#0x1
   \                     ??cJSON_Minify_7:
   \   0000B2   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_605:
   \   0000B5   7003         JNZ     $+5
   \   0000B7   02....       LJMP    ??CrossCallReturnLabel_444 & 0xFFFF
   \   0000BA   85..82       MOV     DPL,?XSP + 0
   \   0000BD   85..83       MOV     DPH,?XSP + 1
   \   0000C0   12....       LCALL   ??Subroutine227_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_599:
   \   0000C3   642A         XRL     A,#0x2a
   \   0000C5   70E2         JNZ     ??cJSON_Minify_8
   \   0000C7   85..82       MOV     DPL,?XSP + 0
   \   0000CA   85..83       MOV     DPH,?XSP + 1
   \   0000CD   A3           INC     DPTR
   \   0000CE   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   0000D1   70D6         JNZ     ??cJSON_Minify_8
   \   0000D3   85..82       MOV     DPL,?XSP + 0
   \   0000D6   85..83       MOV     DPH,?XSP + 1
   \   0000D9   E0           MOVX    A,@DPTR
   \   0000DA   2402         ADD     A,#0x2
   \   0000DC   08           INC     R0
   \   0000DD   08           INC     R0
   \   0000DE   02....       LJMP    ??cJSON_Minify_1 & 0xFFFF
   2877                              json++;
   2878                          }
   2879                          break;
   2880          
   2881                      case '\"':
   2882                          minify_string(&json, (char**)&into);
   \                     ??cJSON_Minify_3:
   \   0000E1                ; Setup parameters for call to function minify_string
   \   0000E1   7402         MOV     A,#0x2
   \   0000E3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E6   AC82         MOV     R4,DPL
   \   0000E8   AD83         MOV     R5,DPH
   \   0000EA   85..82       MOV     DPL,?XSP + 0
   \   0000ED   85..83       MOV     DPH,?XSP + 1
   \   0000F0   AA82         MOV     R2,DPL
   \   0000F2   AB83         MOV     R3,DPH
   \   0000F4   12....       LCALL   ??minify_string?relay
   2883                          break;
   \   0000F7   02....       LJMP    ??CrossCallReturnLabel_444 & 0xFFFF
   2884          
   2885                      default:
   2886                          into[0] = json[0];
   \                     ??cJSON_Minify_4:
   \   0000FA   12....       LCALL   ??Subroutine228_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_594:
   \   0000FD   C0E0         PUSH    A
   \   0000FF   7402         MOV     A,#0x2
   \   000101   12....       LCALL   ?XSTACK_DISP0_8
   \   000104   12....       LCALL   ??Subroutine164_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_270:
   \   000107   D0E0         POP     A
   \   000109   12....       LCALL   ?Subroutine32 & 0xFFFF
   2887                          json++;
   2888                          into++;
   \                     ??CrossCallReturnLabel_37:
   \   00010C   7402         MOV     A,#0x2
   \   00010E   12....       LCALL   ?XSTACK_DISP0_8
   \   000111   12....       LCALL   ?Subroutine33 & 0xFFFF
   2889                  }
   2890              }
   \                     ??CrossCallReturnLabel_44:
   \   000114   7402         MOV     A,#0x2
   \   000116   12....       LCALL   ?XSTACK_DISP0_8
   \   000119   02....       LJMP    ??CrossCallReturnLabel_212 & 0xFFFF
   2891          
   2892              /* and null-terminate. */
   2893              *into = '\0';
   \                     ??cJSON_Minify_2:
   \   00011C   7402         MOV     A,#0x2
   \   00011E   12....       LCALL   ?XSTACK_DISP0_8
   \   000121   12....       LCALL   ?Subroutine65 & 0xFFFF
   2894          }
   \                     ??CrossCallReturnLabel_101:
   \   000124   7404         MOV     A,#0x4
   \   000126   12....       LCALL   ?DEALLOC_XSTACK8
   \   000129   02....       LJMP    ??Subroutine209_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine138:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   3400         ADDC    A,#0x0
   \   000004   F9           MOV     R1,A
   \   000005   85..82       MOV     DPL,?XSP + 0
   \   000008   85..83       MOV     DPH,?XSP + 1
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000   12....       LCALL   ??Subroutine223_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_590:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   642F         XRL     A,#0x2f
   \   000006   22           RET
   2895          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2896          CJSON_PUBLIC(cJSON_bool) cJSON_IsInvalid(const cJSON * const item)
   \                     cJSON_IsInvalid:
   2897          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2898              if (item == NULL)
   \   000004   EA           MOV     A,R2
   \   000005   4B           ORL     A,R3
   \   000006   7004         JNZ     ??cJSON_IsInvalid_0
   2899              {
   2900                  return false;
   \   000008   7A00         MOV     R2,#0x0
   \   00000A   8018         SJMP    ??cJSON_IsInvalid_1
   2901              }
   2902          
   2903              return (item->type & 0xFF) == cJSON_Invalid;
   \                     ??cJSON_IsInvalid_0:
   \   00000C   8A82         MOV     DPL,R2
   \   00000E   8B83         MOV     DPH,R3
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   7004         JNZ     ??cJSON_IsInvalid_2
   \   000019   D2F0         SETB    B.0
   \   00001B   8002         SJMP    ??cJSON_IsInvalid_3
   \                     ??cJSON_IsInvalid_2:
   \   00001D   C2F0         CLR     B.0
   \                     ??cJSON_IsInvalid_3:
   \   00001F   A2F0         MOV     C,B.0
   \   000021   E4           CLR     A
   \   000022   33           RLC     A
   \   000023   FA           MOV     R2,A
   \                     ??cJSON_IsInvalid_1:
   \   000024   02....       LJMP    ?Subroutine9 & 0xFFFF
   2904          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   7B00         MOV     R3,#0x0
   \   000002   02....       LJMP    ??Subroutine209_0 & 0xFFFF
   2905          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2906          CJSON_PUBLIC(cJSON_bool) cJSON_IsFalse(const cJSON * const item)
   \                     cJSON_IsFalse:
   2907          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2908              if (item == NULL)
   \   000004   EA           MOV     A,R2
   \   000005   4B           ORL     A,R3
   \   000006   7004         JNZ     ??cJSON_IsFalse_0
   2909              {
   2910                  return false;
   \   000008   7A00         MOV     R2,#0x0
   \   00000A   801A         SJMP    ??cJSON_IsFalse_1
   2911              }
   2912          
   2913              return (item->type & 0xFF) == cJSON_False;
   \                     ??cJSON_IsFalse_0:
   \   00000C   8A82         MOV     DPL,R2
   \   00000E   8B83         MOV     DPH,R3
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   6401         XRL     A,#0x1
   \   000019   7004         JNZ     ??cJSON_IsFalse_2
   \   00001B   D2F0         SETB    B.0
   \   00001D   8002         SJMP    ??cJSON_IsFalse_3
   \                     ??cJSON_IsFalse_2:
   \   00001F   C2F0         CLR     B.0
   \                     ??cJSON_IsFalse_3:
   \   000021   A2F0         MOV     C,B.0
   \   000023   E4           CLR     A
   \   000024   33           RLC     A
   \   000025   FA           MOV     R2,A
   \                     ??cJSON_IsFalse_1:
   \   000026   02....       LJMP    ?Subroutine9 & 0xFFFF
   2914          }
   2915          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2916          CJSON_PUBLIC(cJSON_bool) cJSON_IsTrue(const cJSON * const item)
   \                     cJSON_IsTrue:
   2917          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2918              if (item == NULL)
   \   000004   EA           MOV     A,R2
   \   000005   4B           ORL     A,R3
   \   000006   7004         JNZ     ??cJSON_IsTrue_0
   2919              {
   2920                  return false;
   \   000008   7A00         MOV     R2,#0x0
   \   00000A   801A         SJMP    ??cJSON_IsTrue_1
   2921              }
   2922          
   2923              return (item->type & 0xff) == cJSON_True;
   \                     ??cJSON_IsTrue_0:
   \   00000C   8A82         MOV     DPL,R2
   \   00000E   8B83         MOV     DPH,R3
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   6402         XRL     A,#0x2
   \   000019   7004         JNZ     ??cJSON_IsTrue_2
   \   00001B   D2F0         SETB    B.0
   \   00001D   8002         SJMP    ??cJSON_IsTrue_3
   \                     ??cJSON_IsTrue_2:
   \   00001F   C2F0         CLR     B.0
   \                     ??cJSON_IsTrue_3:
   \   000021   A2F0         MOV     C,B.0
   \   000023   E4           CLR     A
   \   000024   33           RLC     A
   \   000025   FA           MOV     R2,A
   \                     ??cJSON_IsTrue_1:
   \   000026   80..         SJMP    ?Subroutine9
   2924          }
   2925          
   2926          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2927          CJSON_PUBLIC(cJSON_bool) cJSON_IsBool(const cJSON * const item)
   \                     cJSON_IsBool:
   2928          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2929              if (item == NULL)
   \   000004   EA           MOV     A,R2
   \   000005   4B           ORL     A,R3
   \   000006   7004         JNZ     ??cJSON_IsBool_0
   2930              {
   2931                  return false;
   \   000008   7A00         MOV     R2,#0x0
   \   00000A   801A         SJMP    ??cJSON_IsBool_1
   2932              }
   2933          
   2934              return (item->type & (cJSON_True | cJSON_False)) != 0;
   \                     ??cJSON_IsBool_0:
   \   00000C   8A82         MOV     DPL,R2
   \   00000E   8B83         MOV     DPH,R3
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   5403         ANL     A,#0x3
   \   000019   6004         JZ      ??cJSON_IsBool_2
   \   00001B   D2F0         SETB    B.0
   \   00001D   8002         SJMP    ??cJSON_IsBool_3
   \                     ??cJSON_IsBool_2:
   \   00001F   C2F0         CLR     B.0
   \                     ??cJSON_IsBool_3:
   \   000021   A2F0         MOV     C,B.0
   \   000023   E4           CLR     A
   \   000024   33           RLC     A
   \   000025   FA           MOV     R2,A
   \                     ??cJSON_IsBool_1:
   \   000026   80..         SJMP    ?Subroutine9
   2935          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2936          CJSON_PUBLIC(cJSON_bool) cJSON_IsNull(const cJSON * const item)
   \                     cJSON_IsNull:
   2937          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2938              if (item == NULL)
   \   000004   EA           MOV     A,R2
   \   000005   4B           ORL     A,R3
   \   000006   7004         JNZ     ??cJSON_IsNull_0
   2939              {
   2940                  return false;
   \   000008   7A00         MOV     R2,#0x0
   \   00000A   801A         SJMP    ??cJSON_IsNull_1
   2941              }
   2942          
   2943              return (item->type & 0xFF) == cJSON_NULL;
   \                     ??cJSON_IsNull_0:
   \   00000C   8A82         MOV     DPL,R2
   \   00000E   8B83         MOV     DPH,R3
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   6404         XRL     A,#0x4
   \   000019   7004         JNZ     ??cJSON_IsNull_2
   \   00001B   D2F0         SETB    B.0
   \   00001D   8002         SJMP    ??cJSON_IsNull_3
   \                     ??cJSON_IsNull_2:
   \   00001F   C2F0         CLR     B.0
   \                     ??cJSON_IsNull_3:
   \   000021   A2F0         MOV     C,B.0
   \   000023   E4           CLR     A
   \   000024   33           RLC     A
   \   000025   FA           MOV     R2,A
   \                     ??cJSON_IsNull_1:
   \   000026   80..         SJMP    ?Subroutine9
   2944          }
   2945          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2946          CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)
   \                     cJSON_IsNumber:
   2947          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2948              if (item == NULL)
   \   000004   EA           MOV     A,R2
   \   000005   4B           ORL     A,R3
   \   000006   7004         JNZ     ??cJSON_IsNumber_0
   2949              {
   2950                  return false;
   \   000008   7A00         MOV     R2,#0x0
   \   00000A   801A         SJMP    ??cJSON_IsNumber_1
   2951              }
   2952          
   2953              return (item->type & 0xFF) == cJSON_Number;
   \                     ??cJSON_IsNumber_0:
   \   00000C   8A82         MOV     DPL,R2
   \   00000E   8B83         MOV     DPH,R3
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   6408         XRL     A,#0x8
   \   000019   7004         JNZ     ??cJSON_IsNumber_2
   \   00001B   D2F0         SETB    B.0
   \   00001D   8002         SJMP    ??cJSON_IsNumber_3
   \                     ??cJSON_IsNumber_2:
   \   00001F   C2F0         CLR     B.0
   \                     ??cJSON_IsNumber_3:
   \   000021   A2F0         MOV     C,B.0
   \   000023   E4           CLR     A
   \   000024   33           RLC     A
   \   000025   FA           MOV     R2,A
   \                     ??cJSON_IsNumber_1:
   \   000026                REQUIRE ?Subroutine9
   \   000026                ; // Fall through to label ?Subroutine9
   2954          }
   2955          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2956          CJSON_PUBLIC(cJSON_bool) cJSON_IsString(const cJSON * const item)
   \                     cJSON_IsString:
   2957          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2958              if (item == NULL)
   \   000004   EA           MOV     A,R2
   \   000005   4B           ORL     A,R3
   \   000006   7004         JNZ     ??cJSON_IsString_0
   2959              {
   2960                  return false;
   \   000008   7A00         MOV     R2,#0x0
   \   00000A   801A         SJMP    ??cJSON_IsString_1
   2961              }
   2962          
   2963              return (item->type & 0xFF) == cJSON_String;
   \                     ??cJSON_IsString_0:
   \   00000C   8A82         MOV     DPL,R2
   \   00000E   8B83         MOV     DPH,R3
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   6410         XRL     A,#0x10
   \   000019   7004         JNZ     ??cJSON_IsString_2
   \   00001B   D2F0         SETB    B.0
   \   00001D   8002         SJMP    ??cJSON_IsString_3
   \                     ??cJSON_IsString_2:
   \   00001F   C2F0         CLR     B.0
   \                     ??cJSON_IsString_3:
   \   000021   A2F0         MOV     C,B.0
   \   000023   E4           CLR     A
   \   000024   33           RLC     A
   \   000025   FA           MOV     R2,A
   \                     ??cJSON_IsString_1:
   \   000026   80..         SJMP    ?Subroutine9
   2964          }
   2965          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2966          CJSON_PUBLIC(cJSON_bool) cJSON_IsArray(const cJSON * const item)
   \                     cJSON_IsArray:
   2967          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2968              if (item == NULL)
   \   000004   EA           MOV     A,R2
   \   000005   4B           ORL     A,R3
   \   000006   7004         JNZ     ??cJSON_IsArray_0
   2969              {
   2970                  return false;
   \   000008   7A00         MOV     R2,#0x0
   \   00000A   801A         SJMP    ??cJSON_IsArray_1
   2971              }
   2972          
   2973              return (item->type & 0xFF) == cJSON_Array;
   \                     ??cJSON_IsArray_0:
   \   00000C   8A82         MOV     DPL,R2
   \   00000E   8B83         MOV     DPH,R3
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   6420         XRL     A,#0x20
   \   000019   7004         JNZ     ??cJSON_IsArray_2
   \   00001B   D2F0         SETB    B.0
   \   00001D   8002         SJMP    ??cJSON_IsArray_3
   \                     ??cJSON_IsArray_2:
   \   00001F   C2F0         CLR     B.0
   \                     ??cJSON_IsArray_3:
   \   000021   A2F0         MOV     C,B.0
   \   000023   E4           CLR     A
   \   000024   33           RLC     A
   \   000025   FA           MOV     R2,A
   \                     ??cJSON_IsArray_1:
   \   000026   80..         SJMP    ?Subroutine9
   2974          }
   2975          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2976          CJSON_PUBLIC(cJSON_bool) cJSON_IsObject(const cJSON * const item)
   \                     cJSON_IsObject:
   2977          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2978              if (item == NULL)
   \   000004   EA           MOV     A,R2
   \   000005   4B           ORL     A,R3
   \   000006   7004         JNZ     ??cJSON_IsObject_0
   2979              {
   2980                  return false;
   \   000008   7A00         MOV     R2,#0x0
   \   00000A   801A         SJMP    ??cJSON_IsObject_1
   2981              }
   2982          
   2983              return (item->type & 0xFF) == cJSON_Object;
   \                     ??cJSON_IsObject_0:
   \   00000C   8A82         MOV     DPL,R2
   \   00000E   8B83         MOV     DPH,R3
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   6440         XRL     A,#0x40
   \   000019   7004         JNZ     ??cJSON_IsObject_2
   \   00001B   D2F0         SETB    B.0
   \   00001D   8002         SJMP    ??cJSON_IsObject_3
   \                     ??cJSON_IsObject_2:
   \   00001F   C2F0         CLR     B.0
   \                     ??cJSON_IsObject_3:
   \   000021   A2F0         MOV     C,B.0
   \   000023   E4           CLR     A
   \   000024   33           RLC     A
   \   000025   FA           MOV     R2,A
   \                     ??cJSON_IsObject_1:
   \   000026   80..         SJMP    ?Subroutine9
   2984          }
   2985          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2986          CJSON_PUBLIC(cJSON_bool) cJSON_IsRaw(const cJSON * const item)
   \                     cJSON_IsRaw:
   2987          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2988              if (item == NULL)
   \   000004   EA           MOV     A,R2
   \   000005   4B           ORL     A,R3
   \   000006   7004         JNZ     ??cJSON_IsRaw_0
   2989              {
   2990                  return false;
   \   000008   7A00         MOV     R2,#0x0
   \   00000A   801A         SJMP    ??cJSON_IsRaw_1
   2991              }
   2992          
   2993              return (item->type & 0xFF) == cJSON_Raw;
   \                     ??cJSON_IsRaw_0:
   \   00000C   8A82         MOV     DPL,R2
   \   00000E   8B83         MOV     DPH,R3
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   6480         XRL     A,#0x80
   \   000019   7004         JNZ     ??cJSON_IsRaw_2
   \   00001B   D2F0         SETB    B.0
   \   00001D   8002         SJMP    ??cJSON_IsRaw_3
   \                     ??cJSON_IsRaw_2:
   \   00001F   C2F0         CLR     B.0
   \                     ??cJSON_IsRaw_3:
   \   000021   A2F0         MOV     C,B.0
   \   000023   E4           CLR     A
   \   000024   33           RLC     A
   \   000025   FA           MOV     R2,A
   \                     ??cJSON_IsRaw_1:
   \   000026   02....       LJMP    ?Subroutine9 & 0xFFFF
   2994          }
   2995          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2996          CJSON_PUBLIC(cJSON_bool) cJSON_Compare(const cJSON * const a, const cJSON * const b, const cJSON_bool case_sensitive)
   \                     cJSON_Compare:
   2997          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 4,R2
   \   000007   8B..         MOV     ?V0 + 5,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
   \   00000D   7412         MOV     A,#0x12
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   12....       LCALL   ?Subroutine64 & 0xFFFF
   2998              if ((a == NULL) || (b == NULL) || ((a->type & 0xFF) != (b->type & 0xFF)))
   \                     ??CrossCallReturnLabel_99:
   \   000015   EA           MOV     A,R2
   \   000016   45..         ORL     A,?V0 + 5
   \   000018   601E         JZ      ??cJSON_Compare_0
   \   00001A   EE           MOV     A,R6
   \   00001B   4F           ORL     A,R7
   \   00001C   601A         JZ      ??cJSON_Compare_0
   \   00001E   8A82         MOV     DPL,R2
   \   000020   8B83         MOV     DPH,R3
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F8           MOV     R0,A
   \   00002A   8E82         MOV     DPL,R6
   \   00002C   8F83         MOV     DPH,R7
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   E0           MOVX    A,@DPTR
   \   000035   68           XRL     A,R0
   \   000036   6007         JZ      ??cJSON_Compare_1
   2999              {
   3000                  return false;
   \                     ??cJSON_Compare_0:
   \   000038   7A00         MOV     R2,#0x0
   \                     ??cJSON_Compare_2:
   \   00003A   7B00         MOV     R3,#0x0
   3001              }
   \   00003C   02....       LJMP    ?Subroutine6 & 0xFFFF
   3002          
   3003              /* check if type is valid */
   3004              switch (a->type & 0xFF)
   \                     ??cJSON_Compare_1:
   \   00003F   8A82         MOV     DPL,R2
   \   000041   8B83         MOV     DPH,R3
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   14           DEC     A
   \   00004B   601B         JZ      ??cJSON_Compare_3
   \   00004D   14           DEC     A
   \   00004E   6018         JZ      ??cJSON_Compare_3
   \   000050   24FE         ADD     A,#-0x2
   \   000052   6014         JZ      ??cJSON_Compare_3
   \   000054   24FC         ADD     A,#-0x4
   \   000056   6010         JZ      ??cJSON_Compare_3
   \   000058   24F8         ADD     A,#-0x8
   \   00005A   600C         JZ      ??cJSON_Compare_3
   \   00005C   24F0         ADD     A,#-0x10
   \   00005E   6008         JZ      ??cJSON_Compare_3
   \   000060   24E0         ADD     A,#-0x20
   \   000062   6004         JZ      ??cJSON_Compare_3
   \   000064   24C0         ADD     A,#-0x40
   \   000066   70D0         JNZ     ??cJSON_Compare_0
   3005              {
   3006                  case cJSON_False:
   3007                  case cJSON_True:
   3008                  case cJSON_NULL:
   3009                  case cJSON_Number:
   3010                  case cJSON_String:
   3011                  case cJSON_Raw:
   3012                  case cJSON_Array:
   3013                  case cJSON_Object:
   3014                      break;
   3015          
   3016                  default:
   3017                      return false;
   3018              }
   3019          
   3020              /* identical objects are equal */
   3021              if (a == b)
   \                     ??cJSON_Compare_3:
   \   000068   EE           MOV     A,R6
   \   000069   65..         XRL     A,?V0 + 4
   \   00006B   7003         JNZ     ??cJSON_Compare_4
   \   00006D   EF           MOV     A,R7
   \   00006E   65..         XRL     A,?V0 + 5
   \                     ??cJSON_Compare_4:
   \   000070   7004         JNZ     ??cJSON_Compare_5
   3022              {
   3023                  return true;
   \                     ??cJSON_Compare_6:
   \   000072   7A01         MOV     R2,#0x1
   \   000074   80C4         SJMP    ??cJSON_Compare_2
   3024              }
   3025          
   3026              switch (a->type & 0xFF)
   \                     ??cJSON_Compare_5:
   \   000076   8A82         MOV     DPL,R2
   \   000078   8B83         MOV     DPH,R3
   \   00007A   A3           INC     DPTR
   \   00007B   A3           INC     DPTR
   \   00007C   A3           INC     DPTR
   \   00007D   A3           INC     DPTR
   \   00007E   A3           INC     DPTR
   \   00007F   A3           INC     DPTR
   \   000080   E0           MOVX    A,@DPTR
   \   000081   14           DEC     A
   \   000082   60EE         JZ      ??cJSON_Compare_6
   \   000084   14           DEC     A
   \   000085   60EB         JZ      ??cJSON_Compare_6
   \   000087   24FE         ADD     A,#-0x2
   \   000089   60E7         JZ      ??cJSON_Compare_6
   \   00008B   24FC         ADD     A,#-0x4
   \   00008D   6015         JZ      ??cJSON_Compare_7
   \   00008F   24F8         ADD     A,#-0x8
   \   000091   602F         JZ      ??cJSON_Compare_8
   \   000093   24F0         ADD     A,#-0x10
   \   000095   6065         JZ      ??cJSON_Compare_9
   \   000097   24E0         ADD     A,#-0x20
   \   000099   7003         JNZ     $+5
   \   00009B   02....       LJMP    ??cJSON_Compare_10 & 0xFFFF
   \   00009E   24C0         ADD     A,#-0x40
   \   0000A0   6020         JZ      ??cJSON_Compare_8
   \   0000A2   8094         SJMP    ??cJSON_Compare_0
   3027              {
   3028                  /* in these cases and equal type is enough */
   3029                  case cJSON_False:
   3030                  case cJSON_True:
   3031                  case cJSON_NULL:
   3032                      return true;
   3033          
   3034                  case cJSON_Number:
   3035                      if (compare_double(a->valuedouble, b->valuedouble))
   \                     ??cJSON_Compare_7:
   \   0000A4                ; Setup parameters for call to function compare_double
   \   0000A4   12....       LCALL   ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_144:
   \   0000A7   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0000AA   12....       LCALL   ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_147:
   \   0000AD   12....       LCALL   ?XLOAD_R2345
   \   0000B0   12....       LCALL   ??compare_double?relay
   \   0000B3   7404         MOV     A,#0x4
   \   0000B5   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B8   8B..         MOV     ?V0 + 1,R3
   \   0000BA   EA           MOV     A,R2
   \   0000BB   45..         ORL     A,?V0 + 1
   \   0000BD   70B3         JNZ     ??cJSON_Compare_6
   \   0000BF   02....       LJMP    ??cJSON_Compare_0 & 0xFFFF
   3036                      {
   3037                          return true;
   3038                      }
   3039                      return false;
   3040          
   3041                  case cJSON_String:
   3042                  case cJSON_Raw:
   3043                      if ((a->valuestring == NULL) || (b->valuestring == NULL))
   \                     ??cJSON_Compare_8:
   \   0000C2   8A82         MOV     DPL,R2
   \   0000C4   8B83         MOV     DPH,R3
   \   0000C6   12....       LCALL   ??Subroutine202_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_501:
   \   0000C9   7003         JNZ     $+5
   \   0000CB   02....       LJMP    ??cJSON_Compare_0 & 0xFFFF
   \   0000CE   8E82         MOV     DPL,R6
   \   0000D0   8F83         MOV     DPH,R7
   \   0000D2   12....       LCALL   ??Subroutine202_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_502:
   \   0000D5   7003         JNZ     $+5
   \   0000D7   02....       LJMP    ??cJSON_Compare_0 & 0xFFFF
   3044                      {
   3045                          return false;
   3046                      }
   3047                      if (strcmp(a->valuestring, b->valuestring) == 0)
   \   0000DA                ; Setup parameters for call to function strcmp
   \   0000DA   8E82         MOV     DPL,R6
   \   0000DC   8F83         MOV     DPH,R7
   \   0000DE   A3           INC     DPTR
   \   0000DF   A3           INC     DPTR
   \   0000E0   A3           INC     DPTR
   \   0000E1   A3           INC     DPTR
   \   0000E2   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_547:
   \   0000E5   8A82         MOV     DPL,R2
   \   0000E7   8B83         MOV     DPH,R3
   \   0000E9   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_418:
   \   0000EC   12....       LCALL   ??strcmp?relay
   \   0000EF   8B..         MOV     ?V0 + 1,R3
   \   0000F1   EA           MOV     A,R2
   \   0000F2   45..         ORL     A,?V0 + 1
   \   0000F4   6003         JZ      $+5
   \   0000F6   02....       LJMP    ??cJSON_Compare_0 & 0xFFFF
   \   0000F9   02....       LJMP    ??cJSON_Compare_6 & 0xFFFF
   3048                      {
   3049                          return true;
   3050                      }
   3051          
   3052                      return false;
   3053          
   3054                  case cJSON_Array:
   3055                  {
   3056                      cJSON *a_element = a->child;
   \                     ??cJSON_Compare_9:
   \   0000FC   8A82         MOV     DPL,R2
   \   0000FE   8B83         MOV     DPH,R3
   \   000100   A3           INC     DPTR
   \   000101   A3           INC     DPTR
   \   000102   A3           INC     DPTR
   \   000103   A3           INC     DPTR
   \   000104   12....       LCALL   ?Subroutine39 & 0xFFFF
   3057                      cJSON *b_element = b->child;
   \                     ??CrossCallReturnLabel_57:
   \   000107   802D         SJMP    ??cJSON_Compare_11
   3058          
   3059                      for (; (a_element != NULL) && (b_element != NULL);)
   \                     ??cJSON_Compare_12:
   \   000109   EE           MOV     A,R6
   \   00010A   4F           ORL     A,R7
   \   00010B   7003         JNZ     $+5
   \   00010D   02....       LJMP    ??cJSON_Compare_0 & 0xFFFF
   3060                      {
   3061                          if (!cJSON_Compare(a_element, b_element, case_sensitive))
   \   000110                ; Setup parameters for call to function cJSON_Compare
   \   000110   78..         MOV     R0,#?V0 + 6
   \   000112   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000115   EE           MOV     A,R6
   \   000116   FC           MOV     R4,A
   \   000117   EF           MOV     A,R7
   \   000118   FD           MOV     R5,A
   \   000119   AA..         MOV     R2,?V0 + 0
   \   00011B   AB..         MOV     R3,?V0 + 1
   \   00011D   12....       LCALL   ??cJSON_Compare?relay
   \   000120   7402         MOV     A,#0x2
   \   000122   12....       LCALL   ?DEALLOC_XSTACK8
   \   000125   8B..         MOV     ?V0 + 3,R3
   \   000127   EA           MOV     A,R2
   \   000128   45..         ORL     A,?V0 + 3
   \   00012A   7003         JNZ     $+5
   \   00012C   02....       LJMP    ??cJSON_Compare_0 & 0xFFFF
   3062                          {
   3063                              return false;
   3064                          }
   3065          
   3066                          a_element = a_element->next;
   \   00012F   12....       LCALL   ?Subroutine63 & 0xFFFF
   3067                          b_element = b_element->next;
   \                     ??CrossCallReturnLabel_533:
   \   000132   8E82         MOV     DPL,R6
   \   000134   8F83         MOV     DPH,R7
   \                     ??cJSON_Compare_11:
   \   000136   E0           MOVX    A,@DPTR
   \   000137   FE           MOV     R6,A
   \   000138   A3           INC     DPTR
   \   000139   E0           MOVX    A,@DPTR
   \   00013A   FF           MOV     R7,A
   3068                      }
   \   00013B   E5..         MOV     A,?V0 + 0
   \   00013D   45..         ORL     A,?V0 + 1
   \   00013F   70C8         JNZ     ??cJSON_Compare_12
   3069          
   3070                      /* one of the arrays is longer than the other */
   3071                      if (a_element != b_element) {
   \   000141   EE           MOV     A,R6
   \   000142   4F           ORL     A,R7
   \   000143   7003         JNZ     $+5
   \   000145   02....       LJMP    ??cJSON_Compare_6 & 0xFFFF
   \   000148   02....       LJMP    ??cJSON_Compare_0 & 0xFFFF
   3072                          return false;
   3073                      }
   3074          
   3075                      return true;
   3076                  }
   3077          
   3078                  case cJSON_Object:
   3079                  {
   3080                      cJSON *a_element = NULL;
   3081                      cJSON *b_element = NULL;
   3082                      cJSON_ArrayForEach(a_element, a)
   \                     ??cJSON_Compare_10:
   \   00014B   8A82         MOV     DPL,R2
   \   00014D   8B83         MOV     DPH,R3
   \   00014F   A3           INC     DPTR
   \   000150   A3           INC     DPTR
   \   000151   A3           INC     DPTR
   \   000152   A3           INC     DPTR
   \   000153   8048         SJMP    ??cJSON_Compare_13
   3083                      {
   3084                          /* TODO This has O(n^2) runtime, which is horrible! */
   3085                          b_element = get_object_item(b, a_element->string, case_sensitive);
   \                     ??cJSON_Compare_14:
   \   000155                ; Setup parameters for call to function get_object_item
   \   000155   78..         MOV     R0,#?V0 + 6
   \   000157   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00015A   E5..         MOV     A,?V0 + 2
   \   00015C   12....       LCALL   ??Subroutine231_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_642:
   \   00015F   E5..         MOV     A,?V0 + 3
   \   000161   12....       LCALL   ??Subroutine232_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_655:
   \   000164   12....       LCALL   ??get_object_item?relay
   \   000167   7402         MOV     A,#0x2
   \   000169   12....       LCALL   ?DEALLOC_XSTACK8
   \   00016C   8A..         MOV     ?V0 + 0,R2
   \   00016E   8B..         MOV     ?V0 + 1,R3
   3086                          if (b_element == NULL)
   \   000170   EA           MOV     A,R2
   \   000171   45..         ORL     A,?V0 + 1
   \   000173   7003         JNZ     $+5
   \   000175   02....       LJMP    ??cJSON_Compare_0 & 0xFFFF
   3087                          {
   3088                              return false;
   3089                          }
   3090          
   3091                          if (!cJSON_Compare(a_element, b_element, case_sensitive))
   \   000178                ; Setup parameters for call to function cJSON_Compare
   \   000178   78..         MOV     R0,#?V0 + 6
   \   00017A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00017D   AC..         MOV     R4,?V0 + 0
   \   00017F   AD..         MOV     R5,?V0 + 1
   \   000181   AA..         MOV     R2,?V0 + 2
   \   000183   AB..         MOV     R3,?V0 + 3
   \   000185   12....       LCALL   ??cJSON_Compare?relay
   \   000188   7402         MOV     A,#0x2
   \   00018A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00018D   8B..         MOV     ?V0 + 1,R3
   \   00018F   EA           MOV     A,R2
   \   000190   45..         ORL     A,?V0 + 1
   \   000192   7003         JNZ     $+5
   \   000194   02....       LJMP    ??cJSON_Compare_0 & 0xFFFF
   3092                          {
   3093                              return false;
   3094                          }
   3095                      }
   \   000197   85..82       MOV     DPL,?V0 + 2
   \   00019A   85..83       MOV     DPH,?V0 + 3
   \                     ??cJSON_Compare_13:
   \   00019D   E0           MOVX    A,@DPTR
   \   00019E   F5..         MOV     ?V0 + 2,A
   \   0001A0   A3           INC     DPTR
   \   0001A1   E0           MOVX    A,@DPTR
   \   0001A2   F5..         MOV     ?V0 + 3,A
   \   0001A4   E5..         MOV     A,?V0 + 2
   \   0001A6   45..         ORL     A,?V0 + 3
   \   0001A8   70AB         JNZ     ??cJSON_Compare_14
   \   0001AA   8E82         MOV     DPL,R6
   \   0001AC   8F83         MOV     DPH,R7
   \   0001AE   A3           INC     DPTR
   \   0001AF   A3           INC     DPTR
   \   0001B0   A3           INC     DPTR
   \   0001B1   A3           INC     DPTR
   \                     ??cJSON_Compare_15:
   \   0001B2   12....       LCALL   ?Subroutine62 & 0xFFFF
   3096          
   3097                      /* doing this twice, once on a and b to prevent true comparison if a subset of b
   3098                       * TODO: Do this the proper way, this is just a fix for now */
   3099                      cJSON_ArrayForEach(b_element, b)
   \                     ??CrossCallReturnLabel_96:
   \   0001B5   7003         JNZ     $+5
   \   0001B7   02....       LJMP    ??cJSON_Compare_6 & 0xFFFF
   3100                      {
   3101                          a_element = get_object_item(a, b_element->string, case_sensitive);
   \   0001BA                ; Setup parameters for call to function get_object_item
   \   0001BA   78..         MOV     R0,#?V0 + 6
   \   0001BC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001BF   12....       LCALL   ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_364:
   \   0001C2   12....       LCALL   ??Subroutine214_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_544:
   \   0001C5   AA..         MOV     R2,?V0 + 4
   \   0001C7   AB..         MOV     R3,?V0 + 5
   \   0001C9   12....       LCALL   ??get_object_item?relay
   \   0001CC   7402         MOV     A,#0x2
   \   0001CE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001D1   8A..         MOV     ?V0 + 2,R2
   \   0001D3   8B..         MOV     ?V0 + 3,R3
   3102                          if (a_element == NULL)
   \   0001D5   EA           MOV     A,R2
   \   0001D6   45..         ORL     A,?V0 + 3
   \   0001D8   7003         JNZ     $+5
   \   0001DA   02....       LJMP    ??cJSON_Compare_0 & 0xFFFF
   3103                          {
   3104                              return false;
   3105                          }
   3106          
   3107                          if (!cJSON_Compare(b_element, a_element, case_sensitive))
   \   0001DD                ; Setup parameters for call to function cJSON_Compare
   \   0001DD   78..         MOV     R0,#?V0 + 6
   \   0001DF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001E2   AC..         MOV     R4,?V0 + 2
   \   0001E4   AD..         MOV     R5,?V0 + 3
   \   0001E6   AA..         MOV     R2,?V0 + 0
   \   0001E8   AB..         MOV     R3,?V0 + 1
   \   0001EA   12....       LCALL   ??cJSON_Compare?relay
   \   0001ED   7402         MOV     A,#0x2
   \   0001EF   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001F2   8B..         MOV     ?V0 + 3,R3
   \   0001F4   EA           MOV     A,R2
   \   0001F5   45..         ORL     A,?V0 + 3
   \   0001F7   7003         JNZ     $+5
   \   0001F9   02....       LJMP    ??cJSON_Compare_0 & 0xFFFF
   3108                          {
   3109                              return false;
   3110                          }
   3111                      }
   \   0001FC   85..82       MOV     DPL,?V0 + 0
   \   0001FF   85..83       MOV     DPH,?V0 + 1
   \   000202   80AE         SJMP    ??cJSON_Compare_15
   3112          
   3113                      return true;
   3114                  }
   3115          
   3116                  default:
   3117                      return false;
   3118              }
   3119          }
   3120          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ??Subroutine164_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_271:
   \   000003   12....       LCALL   ?CALL_IND
   \   000006                REQUIRE ??Subroutine209_0
   \   000006                ; // Fall through to label ??Subroutine209_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3121          CJSON_PUBLIC(void *) cJSON_malloc(size_t size)
   \                     cJSON_malloc:
   3122          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3123              return global_hooks.allocate(size);
   \   000004                ; Setup parameters for indirect call
   \   000004   90....       MOV     DPTR,#global_hooks
   \   000007   02....       LJMP    ?Subroutine0 & 0xFFFF
   3124          }
   3125          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3126          CJSON_PUBLIC(void) cJSON_free(void *object)
   \                     cJSON_free:
   3127          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3128              global_hooks.deallocate(object);
   \   000004                ; Setup parameters for indirect call
   \   000004   90....       MOV     DPTR,#global_hooks + 2
   \   000007   02....       LJMP    ?Subroutine0 & 0xFFFF
   3129          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for global_hooks>`:
   \   000000   ....         DW ??osal_mem_alloc?relay
   \   000002   ....         DW ??osal_mem_free?relay
   \   000004   ....         DW ??osal_mem_realloc?relay

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_GetErrorPtr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_GetErrorPtr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_GetStringValue?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_GetStringValue

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_GetNumberValue?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_GetNumberValue

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_Version?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_Version

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??case_insensitive_strcmp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    case_insensitive_strcmp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_mem_realloc?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_mem_realloc

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_strdup?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_strdup

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_InitHooks?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_InitHooks

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_New_Item?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_New_Item

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_Delete?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_Delete

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??parse_number?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    parse_number

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_SetNumberHelper?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_SetNumberHelper

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_SetValuestring?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_SetValuestring

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ensure?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ensure

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??update_offset?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    update_offset

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??compare_double?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    compare_double

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??print_number?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    print_number

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??parse_hex4?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    parse_hex4

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??utf16_literal_to_utf8?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    utf16_literal_to_utf8

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??parse_string?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    parse_string

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??print_string_ptr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    print_string_ptr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??buffer_skip_whitespace?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    buffer_skip_whitespace

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_ParseWithOpts?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_ParseWithOpts

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_ParseWithLengthOpts?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_ParseWithLengthOpts

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_Parse?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_Parse

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_ParseWithLength?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_ParseWithLength

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??print?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    print

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_Print?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_Print

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_PrintUnformatted?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_PrintUnformatted

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_PrintBuffered?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_PrintBuffered

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_PrintPreallocated?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_PrintPreallocated

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??parse_value?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    parse_value

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??print_value?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    print_value

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??parse_array?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    parse_array

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??print_array?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    print_array

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??parse_object?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    parse_object

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??print_object?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    print_object

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_GetArraySize?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_GetArraySize

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??get_array_item?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    get_array_item

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_GetArrayItem?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_GetArrayItem

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??get_object_item?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    get_object_item

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_GetObjectItem?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_GetObjectItem

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_GetObjectItemCaseSensitive?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_GetObjectItemCaseSensitive

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_HasObjectItem?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_HasObjectItem

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??suffix_object?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    suffix_object

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??create_reference?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    create_reference

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??add_item_to_array?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    add_item_to_array

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_AddItemToArray?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_AddItemToArray

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??add_item_to_object?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    add_item_to_object

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_AddItemToObject?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_AddItemToObject

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_AddItemToObjectCS?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_AddItemToObjectCS

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_AddItemReferenceToArray?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_AddItemReferenceToArray

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_AddItemReferenceToObject?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_AddItemReferenceToObject

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_AddNullToObject?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_AddNullToObject

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_AddTrueToObject?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_AddTrueToObject

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_AddFalseToObject?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_AddFalseToObject

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_AddBoolToObject?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_AddBoolToObject

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_AddNumberToObject?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_AddNumberToObject

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_AddStringToObject?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_AddStringToObject

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_AddRawToObject?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_AddRawToObject

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_AddObjectToObject?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_AddObjectToObject

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_AddArrayToObject?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_AddArrayToObject

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_DetachItemViaPointer?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_DetachItemViaPointer

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_DetachItemFromArray?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_DetachItemFromArray

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_DeleteItemFromArray?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_DeleteItemFromArray

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_DetachItemFromObject?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_DetachItemFromObject

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_DetachItemFromObjectCaseSensitive?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_DetachItemFromObjectCaseSensitive

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_DeleteItemFromObject?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_DeleteItemFromObject

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_DeleteItemFromObjectCaseSensitive?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_DeleteItemFromObjectCaseSensitive

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_InsertItemInArray?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_InsertItemInArray

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_ReplaceItemViaPointer?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_ReplaceItemViaPointer

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_ReplaceItemInArray?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_ReplaceItemInArray

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??replace_item_in_object?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    replace_item_in_object

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_ReplaceItemInObject?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_ReplaceItemInObject

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_ReplaceItemInObjectCaseSensitive?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_ReplaceItemInObjectCaseSensitive

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_CreateNull?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_CreateNull

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_CreateTrue?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_CreateTrue

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_CreateFalse?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_CreateFalse

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_CreateBool?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_CreateBool

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_CreateNumber?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_CreateNumber

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_CreateString?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_CreateString

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_CreateStringReference?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_CreateStringReference

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_CreateObjectReference?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_CreateObjectReference

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_CreateArrayReference?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_CreateArrayReference

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_CreateRaw?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_CreateRaw

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_CreateArray?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_CreateArray

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_CreateObject?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_CreateObject

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_CreateIntArray?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_CreateIntArray

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_CreateFloatArray?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_CreateFloatArray

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_CreateDoubleArray?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_CreateDoubleArray

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_CreateStringArray?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_CreateStringArray

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_Duplicate?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_Duplicate

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??minify_string?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    minify_string

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_Minify?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_Minify

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_IsInvalid?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_IsInvalid

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_IsFalse?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_IsFalse

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_IsTrue?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_IsTrue

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_IsBool?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_IsBool

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_IsNull?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_IsNull

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_IsNumber?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_IsNumber

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_IsString?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_IsString

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_IsArray?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_IsArray

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_IsObject?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_IsObject

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_IsRaw?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_IsRaw

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_Compare?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_Compare

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_malloc?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_malloc

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_free?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_free

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%i.%i.%i">`:
   \   000000   25692E25     DB "%i.%i.%i"
   \            692E2569
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000011   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000019   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "null">`:
   \   000000   6E756C6C     DB "null"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%d">`:
   \   000000   256400       DB "%d"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%1.15g">`:
   \   000000   25312E31     DB "%1.15g"
   \            356700  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%lg">`:
   \   000000   256C6700     DB "%lg"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%1.17g">`:
   \   000000   25312E31     DB "%1.17g"
   \            376700  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\"\\"">`:
   \   000000   222200       DB "\"\""

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "u%04x">`:
   \   000000   75253034     DB "u%04x"
   \            7800    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\357\\273\\277">`:
   \   000000   EFBBBF00     DB "\357\273\277"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {(unsigned char const *)0, 0, 0, 0,`:
   \   000000   0000         DW 0H
   \   000002   0000         DW 0
   \   000004   0000         DW 0
   \   000006   0000         DW 0
   \   000008   0000         DW 0H
   \   00000A   0000         DW 0H
   \   00000C   0000         DW 0H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {(unsigned char *)0, 0, 0, 0, 0, 0,`:
   \   000000   0000         DW 0H
   \   000002   0000         DW 0
   \   000004   0000         DW 0
   \   000006   0000         DW 0
   \   000008   0000         DW 0
   \   00000A   0000         DW 0
   \   00000C   0000         DW 0H
   \   00000E   0000         DW 0H
   \   000010   0000         DW 0H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {(unsigned char *)0, 0, 0, 0, 0, 0,_1`:
   \   000000   0000         DW 0H
   \   000002   0000         DW 0
   \   000004   0000         DW 0
   \   000006   0000         DW 0
   \   000008   0000         DW 0
   \   00000A   0000         DW 0
   \   00000C   0000         DW 0H
   \   00000E   0000         DW 0H
   \   000010   0000         DW 0H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "false">`:
   \   000000   66616C73     DB "false"
   \            6500    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "true">`:
   \   000000   74727565     DB "true"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_0:
   \   000000   00000000     DD 0H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_46fffe00:
   \   000000   00FEFF46     DD 46FFFE00H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_c6fffffe:
   \   000000   FEFFFFC6     DD 0C6FFFFFEH

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_34000000:
   \   000000   00000034     DD 34000000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_10000:
   \   000000   00000100     DD 65536

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_80:
   \   000000   80000000     DD 128

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_800:
   \   000000   00080000     DD 2048

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_110000:
   \   000000   00001100     DD 1114112

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     add_item_to_array                  0      0     26
       -> suffix_object                 0      0     20
     add_item_to_object                 0      0     38
       -> cJSON_strdup                  0      0     32
       -> add_item_to_array             0      0     32
     buffer_skip_whitespace             4      0     30
     cJSON_AddArrayToObject             0      0     20
       -> cJSON_CreateArray             0      0     28
       -> add_item_to_object            0      0     40
       -> cJSON_Delete                  0      0     28
     cJSON_AddBoolToObject              0      0     22
       -> cJSON_CreateBool              0      0     28
       -> add_item_to_object            0      0     40
       -> cJSON_Delete                  0      0     28
     cJSON_AddFalseToObject             0      0     20
       -> cJSON_CreateFalse             0      0     28
       -> add_item_to_object            0      0     40
       -> cJSON_Delete                  0      0     28
     cJSON_AddItemReferenceToArray      0      0      9
       -> create_reference              0      0     18
       -> add_item_to_array             0      0     18
     cJSON_AddItemReferenceToObject     0      0     20
       -> create_reference              0      0     32
       -> add_item_to_object            0      0     36
     cJSON_AddItemToArray               2      0      0
       -> add_item_to_array             4      0      0
     cJSON_AddItemToObject              0      0     20
       -> add_item_to_object            0      0     36
     cJSON_AddItemToObjectCS            0      0     20
       -> add_item_to_object            0      0     36
     cJSON_AddNullToObject              0      0     20
       -> cJSON_CreateNull              0      0     28
       -> add_item_to_object            0      0     40
       -> cJSON_Delete                  0      0     28
     cJSON_AddNumberToObject            0      0     26
       -> cJSON_CreateNumber            0      0     32
       -> add_item_to_object            0      0     44
       -> cJSON_Delete                  0      0     32
     cJSON_AddObjectToObject            0      0     20
       -> cJSON_CreateObject            0      0     28
       -> add_item_to_object            0      0     40
       -> cJSON_Delete                  0      0     28
     cJSON_AddRawToObject               0      0     22
       -> cJSON_CreateRaw               0      0     28
       -> add_item_to_object            0      0     40
       -> cJSON_Delete                  0      0     28
     cJSON_AddStringToObject            0      0     22
       -> cJSON_CreateString            0      0     28
       -> add_item_to_object            0      0     40
       -> cJSON_Delete                  0      0     28
     cJSON_AddTrueToObject              0      0     20
       -> cJSON_CreateTrue              0      0     28
       -> add_item_to_object            0      0     40
       -> cJSON_Delete                  0      0     28
     cJSON_Compare                      0      0     42
       -> compare_double                0      0     44
       -> strcmp                        0      0     36
       -> cJSON_Compare                 0      0     40
       -> get_object_item               0      0     40
       -> cJSON_Compare                 0      0     40
       -> get_object_item               0      0     40
       -> cJSON_Compare                 0      0     40
     cJSON_CreateArray                  0      0     32
       -> cJSON_New_Item                0      0     20
     cJSON_CreateArrayReference         0      0     10
       -> cJSON_New_Item                0      0     20
     cJSON_CreateBool                   0      0     24
       -> cJSON_New_Item                0      0     20
     cJSON_CreateDoubleArray            0      0     20
       -> cJSON_CreateArray             0      0     40
       -> suffix_object                 0      0     40
       -> cJSON_CreateNumber            0      0     40
       -> cJSON_Delete                  0      0     40
     cJSON_CreateFalse                  0      0     24
       -> cJSON_New_Item                0      0     20
     cJSON_CreateFloatArray             0      0     20
       -> cJSON_CreateArray             0      0     40
       -> suffix_object                 0      0     40
       -> cJSON_CreateNumber            0      0     40
       -> cJSON_Delete                  0      0     40
     cJSON_CreateIntArray               0      0     22
       -> cJSON_CreateArray             0      0     44
       -> suffix_object                 0      0     44
       -> cJSON_CreateNumber            0      0     44
       -> cJSON_Delete                  0      0     44
     cJSON_CreateNull                   0      0     24
       -> cJSON_New_Item                0      0     20
     cJSON_CreateNumber                 0      0     38
       -> cJSON_New_Item                0      0     32
     cJSON_CreateObject                 0      0     24
       -> cJSON_New_Item                0      0     20
     cJSON_CreateObjectReference        0      0     10
       -> cJSON_New_Item                0      0     20
     cJSON_CreateRaw                    0      0     26
       -> cJSON_New_Item                0      0     24
       -> cJSON_strdup                  0      0     24
       -> cJSON_Delete                  0      0     24
     cJSON_CreateString                 0      0     32
       -> cJSON_New_Item                0      0     24
       -> cJSON_strdup                  0      0     24
       -> cJSON_Delete                  0      0     24
     cJSON_CreateStringArray            0      0     20
       -> cJSON_CreateArray             0      0     40
       -> suffix_object                 0      0     40
       -> cJSON_CreateString            0      0     40
       -> cJSON_Delete                  0      0     40
     cJSON_CreateStringReference        0      0     10
       -> cJSON_New_Item                0      0     20
     cJSON_CreateTrue                   0      0     24
       -> cJSON_New_Item                0      0     20
     cJSON_Delete                       0      0     40
       -> cJSON_Delete                  0      0     20
     cJSON_DeleteItemFromArray          2      0      0
       -> cJSON_DetachItemFromArray     4      0      0
       -> cJSON_Delete                  4      0      0
     cJSON_DeleteItemFromObject         2      0      0
       -> cJSON_DetachItemFromObject
                                        4      0      0
       -> cJSON_Delete                  4      0      0
     cJSON_DeleteItemFromObjectCaseSensitive
                                        2      0      0
       -> cJSON_DetachItemFromObjectCaseSensitive
                                        4      0      0
       -> cJSON_Delete                  4      0      0
     cJSON_DetachItemFromArray          0      0      9
       -> get_array_item                0      0     18
       -> cJSON_DetachItemViaPointer
                                        0      0     18
     cJSON_DetachItemFromObject         0      0      9
       -> cJSON_GetObjectItem           0      0     18
       -> cJSON_DetachItemViaPointer
                                        0      0     18
     cJSON_DetachItemFromObjectCaseSensitive
                                        0      0      9
       -> cJSON_GetObjectItemCaseSensitive
                                        0      0     18
       -> cJSON_DetachItemViaPointer
                                        0      0     18
     cJSON_DetachItemViaPointer         0      0     18
     cJSON_Duplicate                    0      0     36
       -> cJSON_New_Item                0      0     36
       -> cJSON_strdup                  0      0     36
       -> cJSON_strdup                  0      0     36
       -> cJSON_Duplicate               0      0     36
       -> cJSON_Delete                  0      0     36
     cJSON_GetArrayItem                 2      0      0
       -> get_array_item                4      0      0
     cJSON_GetArraySize                 2      0      0
     cJSON_GetErrorPtr                  2      0      0
     cJSON_GetNumberValue               0      0     16
       -> cJSON_IsNumber                0      0     32
     cJSON_GetObjectItem                0      0     22
       -> get_object_item               0      0     24
     cJSON_GetObjectItemCaseSensitive
                                        0      0     21
       -> get_object_item               0      0     24
     cJSON_GetStringValue               0      0     10
       -> cJSON_IsString                0      0     20
     cJSON_HasObjectItem                0      0     10
       -> cJSON_GetObjectItem           0      0     20
     cJSON_InitHooks                    2      0      0
     cJSON_InsertItemInArray            0      0     14
       -> get_array_item                0      0     24
       -> add_item_to_array             0      0     24
     cJSON_IsArray                      2      0      0
     cJSON_IsBool                       2      0      0
     cJSON_IsFalse                      2      0      0
     cJSON_IsInvalid                    2      0      0
     cJSON_IsNull                       2      0      0
     cJSON_IsNumber                     2      0     16
     cJSON_IsObject                     2      0      0
     cJSON_IsRaw                        2      0      0
     cJSON_IsString                     2      0     10
     cJSON_IsTrue                       2      0      0
     cJSON_Minify                       3      0      4
       -> minify_string                 4      0      8
     cJSON_New_Item                     0      0     42
       -> memset                        0      0     24
     cJSON_Parse                        0      0     12
       -> cJSON_ParseWithOpts           0      0     24
     cJSON_ParseWithLength              0      0     14
       -> cJSON_ParseWithLengthOpts     0      0     28
     cJSON_ParseWithLengthOpts          2      0     46
       -> cJSON_New_Item                0      0     60
       -> strncmp                       0      0     64
       -> buffer_skip_whitespace        0      0     60
       -> parse_value                   0      0     60
       -> buffer_skip_whitespace        0      0     60
       -> cJSON_Delete                  0      0     60
     cJSON_ParseWithOpts                0      0     26
       -> strlen                        0      0     28
       -> cJSON_ParseWithLengthOpts     0      0     28
     cJSON_Print                        0      0     12
       -> print                         0      0     24
     cJSON_PrintBuffered                2      0     32
       -> print_value                   0      0     60
     cJSON_PrintPreallocated            2      0     32
       -> print_value                   0      0     56
     cJSON_PrintUnformatted             0      0     12
       -> print                         0      0     24
     cJSON_ReplaceItemInArray           0      0     14
       -> get_array_item                0      0     24
       -> cJSON_ReplaceItemViaPointer
                                        0      0     24
     cJSON_ReplaceItemInObject          0      0     18
       -> replace_item_in_object        0      0     32
     cJSON_ReplaceItemInObjectCaseSensitive
                                        0      0     18
       -> replace_item_in_object        0      0     32
     cJSON_ReplaceItemViaPointer        0      0     29
       -> cJSON_Delete                  0      0     22
     cJSON_SetNumberHelper              0      0     20
     cJSON_SetValuestring               0      0     14
       -> strlen                        0      0     28
       -> strlen                        0      0     28
       -> strcpy                        0      0     28
       -> cJSON_strdup                  0      0     28
       -> cJSON_free                    0      0     28
     cJSON_Version                      0      0     16
       -> sprintf                       0      0     32
     cJSON_free                         2      0     16
     cJSON_malloc                       2      0      0
     cJSON_strdup                       0      0     34
       -> strlen                        0      0     28
       -> memcpy                        0      0     32
     case_insensitive_strcmp            0      0     21
     compare_double                     0      0     78
     create_reference                   0      0     30
       -> cJSON_New_Item                0      0     24
       -> memcpy                        0      0     28
     ensure                             2      0     66
       -> memcpy                        0      0     32
     get_array_item                     2      0     12
     get_object_item                    0      0     32
       -> strcmp                        0      0     24
       -> case_insensitive_strcmp       0      0     24
     minify_string                      1      0     13
     osal_mem_realloc                   0      0      9
       -> osal_mem_free                 0      0     18
       -> osal_mem_alloc                0      0     18
     parse_array                        2      0     28
       -> buffer_skip_whitespace        0      0     32
       -> cJSON_New_Item                0      0     32
       -> buffer_skip_whitespace        0      0     32
       -> parse_value                   0      0     32
       -> buffer_skip_whitespace        0      0     32
       -> cJSON_Delete                  0      0     32
     parse_hex4                         0      0     28
     parse_number                       2      0     98
       -> strtod                        0      0    172
     parse_object                       2      0     28
       -> buffer_skip_whitespace        0      0     32
       -> cJSON_New_Item                0      0     32
       -> buffer_skip_whitespace        0      0     32
       -> parse_string                  0      0     32
       -> buffer_skip_whitespace        0      0     32
       -> buffer_skip_whitespace        0      0     32
       -> parse_value                   0      0     32
       -> buffer_skip_whitespace        0      0     32
       -> cJSON_Delete                  0      0     32
     parse_string                       2      0     38
       -> utf16_literal_to_utf8         0      0     44
     parse_value                        2      0     44
       -> strncmp                       0      0     28
       -> strncmp                       0      0     28
       -> strncmp                       0      0     28
       -> parse_string                  0      0     24
       -> parse_number                  0      0     24
       -> parse_array                   0      0     24
       -> parse_object                  0      0     24
     print                              2      0     48
       -> memset                        0      0     72
       -> print_value                   0      0     68
       -> update_offset                 0      0     68
       -> memcpy                        0      0     72
     print_array                        0      0     28
       -> ensure                        0      0     28
       -> ensure                        0      0     28
       -> print_value                   0      0     28
       -> update_offset                 0      0     28
       -> ensure                        0      0     28
     print_number                       2      0     68
       -> sprintf                       0      0    100
       -> sprintf                       0      0    104
       -> sprintf                       0      0    108
       -> sscanf                        0      0    104
       -> compare_double                0      0    108
       -> sprintf                       0      0    108
       -> ensure                        0      0    100
     print_object                       0      0     28
       -> ensure                        0      0     28
       -> ensure                        0      0     28
       -> ensure                        0      0     28
       -> print_string_ptr              0      0     28
       -> update_offset                 0      0     28
       -> ensure                        0      0     28
       -> print_value                   0      0     28
       -> update_offset                 0      0     28
       -> ensure                        0      0     28
     print_string_ptr                   1      0     34
       -> ensure                        0      0     36
       -> strcpy                        0      0     36
       -> ensure                        0      0     36
       -> memcpy                        0      0     40
       -> sprintf                       0      0     40
     print_value                        0      0     50
       -> ensure                        0      0     28
       -> strcpy                        0      0     28
       -> ensure                        0      0     28
       -> strcpy                        0      0     28
       -> ensure                        0      0     28
       -> strcpy                        0      0     28
       -> print_number                  0      0     28
       -> strlen                        0      0     28
       -> ensure                        0      0     28
       -> memcpy                        0      0     32
       -> print_string_ptr              0      0     28
       -> print_array                   0      0     28
       -> print_object                  0      0     28
     replace_item_in_object             0      0     36
       -> cJSON_free                    0      0     32
       -> cJSON_strdup                  0      0     32
       -> get_object_item               0      0     40
       -> cJSON_ReplaceItemViaPointer
                                        0      0     36
     suffix_object                      2      0     22
     update_offset                      0      0     44
       -> strlen                        0      0     20
     utf16_literal_to_utf8              1      0     40
       -> parse_hex4                    0      0     36
       -> parse_hex4                    0      0     36


   Segment part sizes:

     Function/Label                                   Bytes
     --------------                                   -----
     global_error                                        4
     cJSON_GetErrorPtr                                  20
     ?Subroutine150                                      7
     ??Subroutine206_0                                   6
     ??Subroutine209_0                                   7
     ??Subroutine230_0                                   4
     cJSON_GetStringValue                               35
     ??Subroutine162_0                                   5
     ?Subroutine70                                       4
     ??Subroutine194_0                                   4
     ??Subroutine195_0                                   4
     ??Subroutine216_0                                   6
     cJSON_GetNumberValue                               65
     ??Subroutine178_0                                   5
     ??Subroutine190_0                                   5
     ?Subroutine84                                      10
     cJSON_Version                                      55
     version                                            15
     case_insensitive_strcmp                           143
     ?Subroutine20                                      17
     ??Subroutine180_0                                   4
     ??Subroutine191_0                                   5
     osal_mem_realloc                                   22
     global_hooks                                        6
     cJSON_strdup                                       73
     ??Subroutine164_0                                   4
     ?Subroutine143                                      1
     ??Subroutine165_0                                   6
     ?Subroutine129                                      6
     ?Subroutine149                                      1
     ??Subroutine166_0                                   6
     ?Subroutine93                                      11
     ??Subroutine192_0                                   5
     cJSON_InitHooks                                   120
     ??Subroutine200_0                                   6
     ??Subroutine204_0                                   2
     ??Subroutine205_0                                   6
     ?Subroutine105                                      6
     cJSON_New_Item                                     61
     cJSON_Delete                                      157
     ?Subroutine23                                      10
     ??Subroutine202_0                                   4
     ??Subroutine203_0                                   2
     ?Subroutine130                                      8
     ?Subroutine112                                      1
     ??Subroutine231_0                                   5
     ?Subroutine39                                      12
     parse_number                                      376
     ?Subroutine91                                       1
     ??Subroutine153_0                                   9
     ?Subroutine81                                       4
     ?Subroutine140                                     11
     ?Subroutine25                                      28
     ?Subroutine83                                       8
     ?Subroutine55                                       8
     ?Subroutine54                                      12
     ??Subroutine167_0                                   8
     ?Subroutine95                                      14
     ?Subroutine142                                      4
     ??Subroutine181_0                                   9
     ?Subroutine137                                      2
     ??Subroutine215_0                                   2
     ??Subroutine217_0                                   5
     ?Subroutine5                                        3
     ??Subroutine221_0                                   5
     cJSON_SetNumberHelper                             161
     cJSON_SetValuestring                              186
     ?Subroutine66                                      15
     ?Subroutine113                                     11
     ?Subroutine67                                       7
     ensure                                            303
     ?Subroutine26                                      20
     ?Subroutine52                                      13
     ?Subroutine99                                       6
     ??Subroutine163_0                                   8
     ?Subroutine36                                       8
     ?Subroutine33                                       4
     ?Subroutine131                                     10
     ?Subroutine22                                       7
     ?Subroutine34                                      11
     ??Subroutine229_0                                   2
     update_offset                                      62
     compare_double                                    134
     print_number                                      444
     ?Subroutine80                                       5
     ?Subroutine79                                       9
     ??Subroutine171_0                                  10
     ??Subroutine179_0                                   6
     ?Subroutine145                                     10
     ?Subroutine85                                      10
     ?Subroutine38                                      17
     parse_hex4                                        116
     ??Subroutine182_0                                   9
     utf16_literal_to_utf8                             366
     ?Subroutine117                                     10
     ?Subroutine6                                        5
     ?Subroutine59                                       8
     ??Subroutine208_0                                   8
     parse_string                                      607
     ?Subroutine47                                       6
     ??Subroutine154_0                                   2
     ??Subroutine155_0                                   8
     ?Subroutine89                                      10
     ?Subroutine72                                       6
     ?Subroutine56                                       4
     ?Subroutine136                                     12
     ?Subroutine100                                     15
     ?Subroutine28                                       8
     ?Subroutine146                                      6
     ?Subroutine109                                      5
     ?Subroutine46                                       5
     ?Subroutine98                                       6
     ??Subroutine197_0                                   2
     ??Subroutine198_0                                   1
     ??Subroutine199_0                                   1
     ?Subroutine65                                       6
     ?Subroutine32                                      22
     print_string_ptr                                  457
     buffer_skip_whitespace                            138
     ??Subroutine157_0                                   4
     ??Subroutine158_0                                   3
     ??Subroutine159_0                                   4
     ??Subroutine172_0                                   4
     ?Subroutine139                                      9
     ?Subroutine152                                      9
     ?Subroutine151                                      7
     cJSON_ParseWithOpts                                64
     ??Subroutine176_0                                   6
     cJSON_ParseWithLengthOpts                         452
     ?Subroutine51                                      10
     ?Subroutine126                                      9
     ??Subroutine173_0                                   9
     ??Subroutine177_0                                   8
     ??Subroutine186_0                                   6
     ?Subroutine2                                        3
     ??Subroutine160_0                                   2
     ??Subroutine161_0                                   3
     cJSON_Parse                                        25
     cJSON_ParseWithLength                              28
     print                                             419
     ?Subroutine30                                      15
     ?Subroutine125                                     10
     ??Subroutine174_0                                   9
     ?Subroutine75                                      10
     ??Subroutine212_0                                   4
     cJSON_Print                                        18
     ?Subroutine12                                       8
     cJSON_PrintUnformatted                             20
     cJSON_PrintBuffered                               186
     ?Subroutine106                                     10
     ??Subroutine183_0                                   3
     ??Subroutine184_0                                   5
     ??Subroutine211_0                                   8
     cJSON_PrintPreallocated                           154
     parse_value                                       393
     ?Subroutine76                                      18
     ?Subroutine18                                       4
     ??Subroutine168_0                                  11
     ?Subroutine17                                      19
     ?Subroutine15                                       9
     ??Subroutine169_0                                   9
     ?Subroutine134                                     12
     ?Subroutine94                                       2
     ?Subroutine53                                       4
     print_value                                       195
     ?Subroutine116                                      2
     ??Subroutine170_0                                   2
     ?Subroutine68                                       7
     ??Subroutine156_0                                   2
     parse_array                                       337
     ?Subroutine61                                       6
     ?Subroutine35                                      11
     ?Subroutine24                                      15
     ?Subroutine11                                       5
     ?Subroutine103                                      2
     ?Subroutine57                                       6
     ?Subroutine132                                     11
     ?Subroutine135                                      4
     ?Subroutine101                                      8
     ?Subroutine58                                       4
     print_array                                       140
     ?Subroutine123                                      8
     ?Subroutine86                                       6
     ??Subroutine175_0                                   7
     ?Subroutine148                                     18
     ?Subroutine40                                      12
     ?Subroutine115                                     18
     ?Subroutine114                                     14
     ?Subroutine144                                      7
     ?Subroutine60                                      14
     ?Subroutine41                                      15
     ?Subroutine21                                       3
     ??Subroutine187_0                                  12
     ??Subroutine188_0                                   2
     ??Subroutine189_0                                   6
     ?Subroutine4                                        2
     ??Subroutine201_0                                   6
     ?Subroutine63                                       6
     parse_object                                      421
     ?Subroutine29                                      23
     ?Subroutine102                                      7
     ?Subroutine97                                       4
     ??Subroutine210_0                                   2
     print_object                                      409
     ?Subroutine108                                      4
     ?Subroutine88                                       8
     ?Subroutine92                                       9
     ?Subroutine14                                       7
     ?Subroutine44                                      14
     ??Subroutine233_0                                  10
     cJSON_GetArraySize                                 51
     get_array_item                                     48
     cJSON_GetArrayItem                                 21
     ??Subroutine207_0                                   2
     get_object_item                                   114
     ?Subroutine31                                       8
     ??Subroutine232_0                                   3
     ?Subroutine1                                        8
     cJSON_GetObjectItem                                13
     cJSON_GetObjectItemCaseSensitive
                                                        14
     cJSON_HasObjectItem                                21
     ?Subroutine10                                       5
     suffix_object                                      23
     ??Subroutine185_0                                   2
     create_reference                                   87
     ??Subroutine218_0                                  14
     add_item_to_array                                 109
     ?Subroutine71                                       5
     cJSON_AddItemToArray                               10
     add_item_to_object                                211
     ?Subroutine64                                       8
     ?Subroutine7                                       24
     cJSON_AddItemToObject                              16
     ??Subroutine193_0                                   6
     ?Subroutine49                                       9
     cJSON_AddItemToObjectCS                            16
     ?Subroutine45                                      10
     cJSON_AddItemReferenceToArray                      43
     cJSON_AddItemReferenceToObject                     82
     ?Subroutine122                                      8
     cJSON_AddNullToObject                              62
     ?Subroutine82                                      10
     ??Subroutine196_0                                   8
     cJSON_AddTrueToObject                              62
     cJSON_AddFalseToObject                             62
     cJSON_AddBoolToObject                              71
     cJSON_AddNumberToObject                            81
     cJSON_AddStringToObject                            64
     ?Subroutine48                                      11
     cJSON_AddRawToObject                               71
     cJSON_AddObjectToObject                            63
     cJSON_AddArrayToObject                             63
     cJSON_DetachItemViaPointer                        151
     ?Subroutine77                                       9
     ?Subroutine50                                      10
     cJSON_DetachItemFromArray                          29
     ?Subroutine124                                     12
     cJSON_DeleteItemFromArray                           7
     ?Subroutine8                                        5
     ?Subroutine3                                       11
     cJSON_DetachItemFromObject                         15
     cJSON_DetachItemFromObjectCaseSensitive
                                                        15
     cJSON_DeleteItemFromObject                          9
     cJSON_DeleteItemFromObjectCaseSensitive
                                                         9
     cJSON_InsertItemInArray                           140
     ??Subroutine214_0                                   6
     ?Subroutine37                                      13
     cJSON_ReplaceItemViaPointer                       211
     ?Subroutine78                                       9
     ?Subroutine42                                       2
     ??Subroutine213_0                                   2
     ?Subroutine104                                      8
     cJSON_ReplaceItemInArray                           44
     replace_item_in_object                            185
     ?Subroutine147                                     10
     ?Subroutine141                                     12
     cJSON_ReplaceItemInObject                          13
     ?Subroutine13                                      18
     cJSON_ReplaceItemInObjectCaseSensitive
                                                        15
     cJSON_CreateNull                                   28
     ??Subroutine219_0                                  10
     cJSON_CreateTrue                                   28
     cJSON_CreateFalse                                  28
     cJSON_CreateBool                                   37
     ?Subroutine119                                      4
     cJSON_CreateNumber                                147
     ?Subroutine110                                      4
     cJSON_CreateString                                 42
     ?Subroutine118                                      8
     ?Subroutine87                                      31
     cJSON_CreateStringReference                        43
     cJSON_CreateObjectReference                        28
     ?Subroutine96                                      19
     cJSON_CreateArrayReference                         28
     cJSON_CreateRaw                                    42
     cJSON_CreateArray                                  20
     cJSON_CreateObject                                 28
     ?Subroutine107                                      6
     cJSON_CreateIntArray                              153
     ?Subroutine90                                       6
     ??Subroutine220_0                                  13
     ?Subroutine127                                     20
     ?Subroutine120                                     10
     ?Subroutine133                                      8
     ??Subroutine222_0                                   1
     ??Subroutine223_0                                   5
     ?Subroutine27                                      12
     ?Subroutine111                                     20
     cJSON_CreateFloatArray                            115
     ?Subroutine128                                     11
     ?Subroutine121                                     13
     ?Subroutine43                                      12
     cJSON_CreateDoubleArray                           115
     cJSON_CreateStringArray                           133
     cJSON_Duplicate                                   369
     ?Subroutine69                                       7
     ?Subroutine62                                       8
     minify_string                                     142
     ?Subroutine74                                       4
     ??Subroutine224_0                                   5
     ??Subroutine226_0                                   2
     ??Subroutine227_0                                   1
     ??Subroutine228_0                                   5
     ?Subroutine16                                      33
     ?Subroutine19                                       9
     ??Subroutine225_0                                   6
     cJSON_Minify                                      300
     ?Subroutine138                                     12
     ?Subroutine73                                       7
     cJSON_IsInvalid                                    39
     ?Subroutine9                                        5
     cJSON_IsFalse                                      41
     cJSON_IsTrue                                       40
     cJSON_IsBool                                       40
     cJSON_IsNull                                       40
     cJSON_IsNumber                                     38
     cJSON_IsString                                     40
     cJSON_IsArray                                      40
     cJSON_IsObject                                     40
     cJSON_IsRaw                                        41
     cJSON_Compare                                     516
     ?Subroutine0                                        6
     cJSON_malloc                                       10
     cJSON_free                                         10
     ?<Initializer for global_hooks>                     6
     ??cJSON_GetErrorPtr?relay                           6
     ??cJSON_GetStringValue?relay                        6
     ??cJSON_GetNumberValue?relay                        6
     ??cJSON_Version?relay                               6
     ??case_insensitive_strcmp?relay                     6
     ??osal_mem_realloc?relay                            6
     ??cJSON_strdup?relay                                6
     ??cJSON_InitHooks?relay                             6
     ??cJSON_New_Item?relay                              6
     ??cJSON_Delete?relay                                6
     ??parse_number?relay                                6
     ??cJSON_SetNumberHelper?relay                       6
     ??cJSON_SetValuestring?relay                        6
     ??ensure?relay                                      6
     ??update_offset?relay                               6
     ??compare_double?relay                              6
     ??print_number?relay                                6
     ??parse_hex4?relay                                  6
     ??utf16_literal_to_utf8?relay                       6
     ??parse_string?relay                                6
     ??print_string_ptr?relay                            6
     ??buffer_skip_whitespace?relay                      6
     ??cJSON_ParseWithOpts?relay                         6
     ??cJSON_ParseWithLengthOpts?relay                   6
     ??cJSON_Parse?relay                                 6
     ??cJSON_ParseWithLength?relay                       6
     ??print?relay                                       6
     ??cJSON_Print?relay                                 6
     ??cJSON_PrintUnformatted?relay                      6
     ??cJSON_PrintBuffered?relay                         6
     ??cJSON_PrintPreallocated?relay                     6
     ??parse_value?relay                                 6
     ??print_value?relay                                 6
     ??parse_array?relay                                 6
     ??print_array?relay                                 6
     ??parse_object?relay                                6
     ??print_object?relay                                6
     ??cJSON_GetArraySize?relay                          6
     ??get_array_item?relay                              6
     ??cJSON_GetArrayItem?relay                          6
     ??get_object_item?relay                             6
     ??cJSON_GetObjectItem?relay                         6
     ??cJSON_GetObjectItemCaseSensitive?relay            6
     ??cJSON_HasObjectItem?relay                         6
     ??suffix_object?relay                               6
     ??create_reference?relay                            6
     ??add_item_to_array?relay                           6
     ??cJSON_AddItemToArray?relay                        6
     ??add_item_to_object?relay                          6
     ??cJSON_AddItemToObject?relay                       6
     ??cJSON_AddItemToObjectCS?relay                     6
     ??cJSON_AddItemReferenceToArray?relay               6
     ??cJSON_AddItemReferenceToObject?relay              6
     ??cJSON_AddNullToObject?relay                       6
     ??cJSON_AddTrueToObject?relay                       6
     ??cJSON_AddFalseToObject?relay                      6
     ??cJSON_AddBoolToObject?relay                       6
     ??cJSON_AddNumberToObject?relay                     6
     ??cJSON_AddStringToObject?relay                     6
     ??cJSON_AddRawToObject?relay                        6
     ??cJSON_AddObjectToObject?relay                     6
     ??cJSON_AddArrayToObject?relay                      6
     ??cJSON_DetachItemViaPointer?relay                  6
     ??cJSON_DetachItemFromArray?relay                   6
     ??cJSON_DeleteItemFromArray?relay                   6
     ??cJSON_DetachItemFromObject?relay                  6
     ??cJSON_DetachItemFromObjectCaseSensitive?relay     6
     ??cJSON_DeleteItemFromObject?relay                  6
     ??cJSON_DeleteItemFromObjectCaseSensitive?relay     6
     ??cJSON_InsertItemInArray?relay                     6
     ??cJSON_ReplaceItemViaPointer?relay                 6
     ??cJSON_ReplaceItemInArray?relay                    6
     ??replace_item_in_object?relay                      6
     ??cJSON_ReplaceItemInObject?relay                   6
     ??cJSON_ReplaceItemInObjectCaseSensitive?relay      6
     ??cJSON_CreateNull?relay                            6
     ??cJSON_CreateTrue?relay                            6
     ??cJSON_CreateFalse?relay                           6
     ??cJSON_CreateBool?relay                            6
     ??cJSON_CreateNumber?relay                          6
     ??cJSON_CreateString?relay                          6
     ??cJSON_CreateStringReference?relay                 6
     ??cJSON_CreateObjectReference?relay                 6
     ??cJSON_CreateArrayReference?relay                  6
     ??cJSON_CreateRaw?relay                             6
     ??cJSON_CreateArray?relay                           6
     ??cJSON_CreateObject?relay                          6
     ??cJSON_CreateIntArray?relay                        6
     ??cJSON_CreateFloatArray?relay                      6
     ??cJSON_CreateDoubleArray?relay                     6
     ??cJSON_CreateStringArray?relay                     6
     ??cJSON_Duplicate?relay                             6
     ??minify_string?relay                               6
     ??cJSON_Minify?relay                                6
     ??cJSON_IsInvalid?relay                             6
     ??cJSON_IsFalse?relay                               6
     ??cJSON_IsTrue?relay                                6
     ??cJSON_IsBool?relay                                6
     ??cJSON_IsNull?relay                                6
     ??cJSON_IsNumber?relay                              6
     ??cJSON_IsString?relay                              6
     ??cJSON_IsArray?relay                               6
     ??cJSON_IsObject?relay                              6
     ??cJSON_IsRaw?relay                                 6
     ??cJSON_Compare?relay                               6
     ??cJSON_malloc?relay                                6
     ??cJSON_free?relay                                  6
     ?<Constant "%i.%i.%i">                              9
     ?<Constant {0}>                                    26
     ?<Constant "null">                                  5
     ?<Constant "%d">                                    3
     ?<Constant "%1.15g">                                7
     ?<Constant "%lg">                                   4
     ?<Constant "%1.17g">                                7
     ?<Constant "\"\"">                                  3
     ?<Constant "u%04x">                                 6
     ?<Constant "\357\273\277">                          4
     ?<Constant {(unsigned char const *)0, 0, 0, 0,     14
     ?<Constant {(unsigned char *)0, 0, 0, 0, 0, 0,     18
     ?<Constant {(unsigned char *)0, 0, 0, 0, 0, 0,_1   18
     ?<Constant "false">                                 6
     ?<Constant "true">                                  5
     __Constant_0                                        4
     __Constant_46fffe00                                 4
     __Constant_c6fffffe                                 4
     __Constant_34000000                                 4
     __Constant_10000                                    4
     __Constant_80                                       4
     __Constant_800                                      4
     __Constant_110000                                   4

 
 14 312 bytes in segment BANKED_CODE
    642 bytes in segment BANK_RELAYS
      6 bytes in segment XDATA_I
      6 bytes in segment XDATA_ID
    167 bytes in segment XDATA_ROM_C
     19 bytes in segment XDATA_Z
 
 14 960 bytes of CODE  memory
    135 bytes of CONST memory (+ 32 bytes shared)
     25 bytes of XDATA memory

Errors: none
Warnings: 1
